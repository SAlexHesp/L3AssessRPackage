if (is.na(lasval)) lasval=1
if (which(is.na(linevals))>0) linevals=c(0,0)
linevals
is.na(linevals)
if (length(which(is.na(linevals)))>0) linevals=c(0,0)
axis(1, at = seq(xmin, xmax, xint), line = linevals[1], labels = F)
axis(2, at = seq(ymin, ymax, yint), line = linevals[2], labels = F)
axis(1, at = seq(xmin, xmax, xint), lwd=lwdval, labels=xaxlabel, line=linevals[1], cex=cexval, cex.axis=cexaxisval, las=lasval, tck=tcklen)
axis(2, at = seq(ymin, ymax, yint), lwd=lwdval, labels=T, line=linevals[2], cex=cexval, cex.axis=cexaxisval, las=lasval)
#' @param ymin y axis minimum
#' @param ymax y axis maximum
#' @param yint y axis tick interval
#' @param cexval label size
#' @param cexaxisval axis size
#' @param lwdval line widths
#' @param lineval axis offset
#' @param lasval axis orientation
#'
#' @return adds axes to plots
AddAxesAndTickLabelsToPlot <- function(xmin, xmax, xint, ymin, ymax, yint, cexval, cexaxisval, lwdval, linevals, lasval, xaxlabel, tcklen) {
if (is.na(xmin)) xmin=0
if (is.na(ymin)) ymin=0
if (is.na(cexval)) cexval=1
if (is.na(cexaxisval)) cexaxisval=1
if (is.na(lwdval)) lwdval=1
if (is.na(lasval)) lasval=1
if (length(which(is.na(linevals)))>0) linevals=c(0,0)
axis(1, at = seq(xmin, xmax, xint), line = linevals[1], labels = F)
axis(2, at = seq(ymin, ymax, yint), line = linevals[2], labels = F)
axis(1, at = seq(xmin, xmax, xint), lwd=lwdval, labels=xaxlabel, line=linevals[1], cex=cexval, cex.axis=cexaxisval, las=lasval, tck=tcklen)
axis(2, at = seq(ymin, ymax, yint), lwd=lwdval, labels=T, line=linevals[2], cex=cexval, cex.axis=cexaxisval, las=lasval)
}
AddAxesAndTickLabelsToPlot(xmin=0.5, xmax=11.5, xint=1, ymin=0, ymax=1, yint=0.2, cexval=1,  cexaxisval=NA, lwdval=NA,
linevals=c(-0.5,-0.5), lasval=1, xaxlabel = MMabb[1:12], tcklen = 0.03)
#' @param ymin y axis minimum
#' @param ymax y axis maximum
#' @param yint y axis tick interval
#' @param cexval label size
#' @param cexaxisval axis size
#' @param lwdval line widths
#' @param lineval axis offset
#' @param lasval axis orientation
#'
#' @return adds axes to plots
AddAxesAndTickLabelsToPlot <- function(xmin, xmax, xint, ymin, ymax, yint, cexval, cexaxisval, lwdval, linevals, lasval, xaxlabel, tcklen) {
if (is.na(xmin)) xmin=0
if (is.na(ymin)) ymin=0
if (is.na(cexval)) cexval=1
if (is.na(cexaxisval)) cexaxisval=1
if (is.na(lwdval)) lwdval=1
if (is.na(lasval)) lasval=1
if (length(which(is.na(linevals)))>0) linevals=c(0,0)
axis(1, at = seq(xmin, xmax, xint), line = linevals[1], labels = F)
axis(2, at = seq(ymin, ymax, yint), line = linevals[2], labels = F)
axis(1, at = seq(xmin, xmax, xint), lwd=lwdval, labels=xaxlabel, line=linevals[1], cex=cexval, cex.axis=cexaxisval, las=lasval, tck=tcklen)
axis(2, at = seq(ymin, ymax, yint), lwd=lwdval, labels=T, line=linevals[2], cex=cexval, cex.axis=cexaxisval, las=lasval)
}
nLenCats = length(lbnds)
MMabb = substr(month.abb, 1, 1)
for (i in 1:nLenCats) {
subDat = ObsSpawnDat[ObsSpawnDat$FishLen >= lbnds[i] & ObsSpawnDat$FishLen < ubnds[i],]
Probs = CalcMonthlyObsSpawnProps_SpDurMod(subDat)
plot(seq(0.5,11.5,1), Probs, xaxt='n', yaxt="n", cex=0.8, cex.axis=1,bty='n', ylim=c(0,1), xlim=c(0,12),
xlab = list(" Month",cex=1.2), ylab=list("Prop. spawning",cex=1.2), main=paste0(lbnds[i],"-",ubnds[i]," mm"), cex.main=1)
AddAxesAndTickLabelsToPlot(xmin=0.5, xmax=11.5, xint=1, ymin=0, ymax=1, yint=0.2, cexval=1,  cexaxisval=NA, lwdval=NA,
linevals=c(-0.5,-0.5), lasval=1, xaxlabel = MMabb[1:12], tcklen = 0.03)
if(!is.na(params[i])) {
FishLen=(lbnds[i] + ubnds[i])/2
DecDay_plot = seq(0,1,0.01)
Res=CalcDailySpawnProps_SpDurMod(FishLen, DecDay_plot, params)
lines(DecDay_plot*12,Res$P_t_s,col=i)
}
} # i
#' MM=Res$MM
#' ObsSpawnDat = data.frame(MM=MM,FishLen=FishLen,ObsMatStatus=ObsMatStatus)
#' # params = c(lnL50,lnslope,logitPkSpawn,lnkappa,lnkappa2,lnslope1,lnslope2)
#' params = NA
#' lbnds = seq(300,900,100)
#' ubnds = lbnds + 100
#' par(mfrow=c(3,2), mar=c(4,2,2,2))
#' PlotSpawningDurationData(ObsSpawnDat, lbnds, ubnds, params)
#' @export
#'
PlotSpawningDurationData <- function(ObsSpawnDat, lbnds, ubnds, params) {
nLenCats = length(lbnds)
MMabb = substr(month.abb, 1, 1)
for (i in 1:nLenCats) {
subDat = ObsSpawnDat[ObsSpawnDat$FishLen >= lbnds[i] & ObsSpawnDat$FishLen < ubnds[i],]
Probs = CalcMonthlyObsSpawnProps_SpDurMod(subDat)
plot(seq(0.5,11.5,1), Probs, xaxt='n', yaxt="n", cex=0.8, cex.axis=1,bty='n', ylim=c(0,1), xlim=c(0,12),
xlab = list(" Month",cex=1.2), ylab=list("Prop. spawning",cex=1.2), main=paste0(lbnds[i],"-",ubnds[i]," mm"), cex.main=1)
AddAxesAndTickLabelsToPlot(xmin=0.5, xmax=11.5, xint=1, ymin=0, ymax=1, yint=0.2, cexval=1,  cexaxisval=NA, lwdval=NA,
linevals=c(-0.5,-0.5), lasval=1, xaxlabel = MMabb[1:12], tcklen = 0.03)
if(!is.na(params[i])) {
FishLen=(lbnds[i] + ubnds[i])/2
DecDay_plot = seq(0,1,0.01)
Res=CalcDailySpawnProps_SpDurMod(FishLen, DecDay_plot, params)
lines(DecDay_plot*12,Res$P_t_s,col=i)
}
} # i
}
#' Calculate NLL for spawning duration model given data and parameter values
#'
#' Calculate negative log-likelihood for spawning duration model given data and parameter values
#'
#' @keywords internal
#'
#' @param params specified (or estimated), transformed parameter values, for the spawning duration model (including
#' lnL50, lnslope, logitPkSpawn, lnkappa, lnkappa2, lnslope1, lnslope2)
#'
#' @return negative log-likelihood (NLL)
CalcNLL_SpDurMod <- function(params) {
Res = CalcDailySpawnProps2_SpDurMod(params)
Likelihood = rep(-999, length(DecDay))
Likelihood[which(ObsMatStatus==1)] = Res$P_t_s[which(ObsMatStatus==1)]
Likelihood[which(ObsMatStatus==0)] = 1 - Res$P_t_s[which(ObsMatStatus==0)]
LL <- log(Likelihood + 1E-4)
NLL = -sum(LL) + Res$param_pen
results = NLL
cat("NLL",NLL,"params",params,"Res$param_pen",Res$param_pen,'\n')
return(results)
}
#' lnkappa2 = log(0.00035)
#' lnslope1 = log(25)
#' lnslope2 = log(35)
#' params = c(lnL50,lnslope,logitPkSpawn,lnkappa,lnkappa2,lnslope1,lnslope2)
#' nsims=20
#' MinLen=0
#' MaxLen=1100
#' LenInc=100
#' res=GetSpawningDurationModelResults(params, FishLen, DecDay, ObsMatStatus, MinLen, MaxLen, LenInc, nsims)
#' @export
GetSpawningDurationModelResults <- function(params, FishLen, DecDay, ObsMatStatus, MinLen, MaxLen, LenInc, nsims) {
FishLen=FishLen
DecDay=DecDay
ObsMatStatus=ObsMatStatus
nlmb <- nlminb(params, CalcNLL_SpDurMod, gradient = NULL, hessian = TRUE,
control=list(trace=1, rel.tol=0.0000001))
params = nlmb$par
NLL = nlmb$objective
convergence = nlmb$convergence
# get variance-covariance matrix, from fitted model
hess.out = optimHess(params, CalcNLL_SpDurMod)
vcov.Params = solve(hess.out)
ses = sqrt(diag(vcov.Params))
# get parameter estimates and asymptotic error estimates
EstL50 = c(exp(nlmb$par[1]), exp(nlmb$par[1] + c(-1.96, 1.96) * ses[1]))
Estslope = c(exp(nlmb$par[2]), exp(nlmb$par[2] + c(-1.96, 1.96) * ses[2]))
temp=c(nlmb$par[3], nlmb$par[3] + c(-1.96, 1.96) * ses[3])
EstPkSpawn = exp(temp) / (exp(temp)+1) # ilogit transform
Estkappa = c(exp(nlmb$par[4]), exp(nlmb$par[4] + c(-1.96, 1.96) * ses[4]))
Estkappa2 = c(exp(nlmb$par[5]), exp(nlmb$par[5] + c(-1.96, 1.96) * ses[5]))
Estslope1 = c(exp(nlmb$par[6]), exp(nlmb$par[6] + c(-1.96, 1.96) * ses[6]))
Estslope2 = c(exp(nlmb$par[7]), exp(nlmb$par[7] + c(-1.96, 1.96) * ses[7]))
ParamEst = t(data.frame(EstL50=round(EstL50,2), Estslope=round(Estslope,3),
EstPkSpawn=round(EstPkSpawn,3), Estkappa=round(Estkappa,5),
Estkappa2=round(Estkappa2,5), Estslope1=round(Estslope1,3),
Estslope2=round(Estslope2,3)))
ParamEst.sim = NA
if (nsims > 0) {
# Use resampling approach to get estimates of uncertainty of derived outputs for model
sims = data.frame(MASS::mvrnorm(n = nsims, params, vcov.Params))
names(sims) = c("ln_L50", "ln_slope","lgt_PkSpawn","ln_kappa","ln_kappa2",
"ln_slope1","ln_slope2")
sims$L50 = exp(sims$ln_L50)
sims$slope = exp(sims$ln_slope)
sims$Peak_spawn = exp(sims$lgt_PkSpawn) / (exp(sims$lgt_PkSpawn)+1) # ilogit transform
sims$kappa = exp(sims$ln_kappa)
sims$kappa2 = exp(sims$ln_kappa2)
sims$slope1 = exp(sims$ln_slope1)
sims$slope2 = exp(sims$ln_slope2)
# Recalculate 95% CLs for estimated parameters and back-transformed values of estimated parameters
sims.mean = apply(sims[, 1:14], MARGIN=2, function(x) mean(x))
sims.median = apply(sims[, 1:14], MARGIN=2, function(x) quantile(x, 0.5))
sims.lowCL = apply(sims[, 1:14], MARGIN=2, function(x) quantile(x, 0.025))
sims.uppCL = apply(sims[, 1:14], MARGIN=2, function(x) quantile(x, 0.975))
ParamEst.sim = round(cbind(sims.mean, sims.median, sims.lowCL, sims.uppCL), 3)
}
# get relationships between maximum proportion spawning and spawning duration with fish length,
# with uncertainty
SizeIntPlot = MaxLen / 100 # calculate for 100 sizes, from 0 to maxlen
FishLen = seq(0,MaxLen,SizeIntPlot)
nFishLen = length(FishLen)
nDecDay = length(DecDay)
P_t_s.sim <- array(dim=c(nsims,nFishLen,nDecDay))
MaxCurveHeightEst = data.frame(matrix(nrow=nsims,ncol=nFishLen))
colnames(MaxCurveHeightEst) = FishLen
MaxCurveHeightEst = as.matrix(MaxCurveHeightEst)
SpawnDurEst = MaxCurveHeightEst
MaxPropSpawnVsFishLen=NA
SpawnDurVsFishLen=NA
if (nsims > 0) {
for (i in 1:nsims) {
d50 = sims$Peak_spawn[i] - sims$kappa[i] * FishLen
d50_2 = sims$Peak_spawn[i] + sims$kappa2[i] * FishLen
Height = 1 / (1 + exp(-sims$slope[i]*(FishLen-sims$L50[i])))
# spawning duration with respect to fish length, for each set of simulated parameters
SpawnDurEst[i,] = d50_2 - d50 # sim, fishlen
for (k in 1:nFishLen) {
P_t_s.sim[i,k,] = 1 / (1 + exp(-sims$slope1[i]*(DecDay-d50[k]))) *
1 / (1 + exp(sims$slope2[i]*(DecDay-d50_2[k]))) * Height[k]
# maximum proportion spawning with respect to fish length, for each set of simulated parameters
MaxCurveHeightEst[i,k] = max(P_t_s.sim[i,k,]) # sim, fishlen, DecDay
}
cat("1:Resampling: i",i,"of",nsims,"nsims",'\n')
} # nsims
# relationship between maximum proportion spawning and fish size, with uncertainty
MaxCurve.mean = apply(MaxCurveHeightEst[,], MARGIN=2, function(x) mean(x))
MaxCurve.median = apply(MaxCurveHeightEst[,], MARGIN=2, function(x) quantile(x, 0.5))
MaxCurve.lowCL = apply(MaxCurveHeightEst[,], MARGIN=2, function(x) quantile(x, 0.025))
MaxCurve.uppCL = apply(MaxCurveHeightEst[,], MARGIN=2, function(x) quantile(x, 0.975))
MaxPropSpawnVsFishLen = data.frame(FishLen=FishLen,
MaxCurve.mean=MaxCurve.mean,
MaxCurve.median=MaxCurve.median,
MaxCurve.lowCL=MaxCurve.lowCL,
MaxCurve.uppCL=MaxCurve.uppCL)
# relationship between spawning duration and fish size, with uncertainty
SpawnDur.mean = apply(SpawnDurEst[,], MARGIN=2, function(x) mean(x))
SpawnDur.median = apply(SpawnDurEst[,], MARGIN=2, function(x) quantile(x, 0.5))
SpawnDur.lowCL = apply(SpawnDurEst[,], MARGIN=2, function(x) quantile(x, 0.025))
SpawnDur.uppCL = apply(SpawnDurEst[,], MARGIN=2, function(x) quantile(x, 0.975))
SpawnDurVsFishLen = data.frame(FishLen=FishLen,
SpawnDur.mean=SpawnDur.mean,
SpawnDur.median=SpawnDur.median,
SpawnDur.lowCL=SpawnDur.lowCL,
SpawnDur.uppCL=SpawnDur.uppCL)
} # if nsims > 0
# get model curves with uncertainty for fish with respect to
# midpoints of specified size categories
lbnds = seq(MinLen,MaxLen-LenInc,LenInc)
ubnds = lbnds + LenInc
midpts = lbnds + (LenInc/2)
nSizeClasses = length(midpts)
DecDayPlot = seq(0,1,0.01)
DecDay = DecDayPlot
nDecDayPlot = length(DecDayPlot)
ModelCurveEst <- array(dim=c(nsims,nSizeClasses,nDecDayPlot))
if (nsims > 0) {
for (i in 1:nsims) {
for (k in 1:nSizeClasses) {
fish_size= midpts[k]
EstPar=as.numeric(sims[i,1:7])
res = CalcDailySpawnProps_SpDurMod(fish_size, DecDay, EstPar)
ModelCurveEst[i,k,] = res$P_t_s
}
cat("2:Resampling: i",i,"of",nsims,"nsims",'\n')
}
}
# estimated curve describing proportion spawning, for fish of specified sizes,
# corresponding to midpoints of specified length categories
ModelCurvesVsFishLenCl <- array(dim=c(nSizeClasses,4,nDecDayPlot))
dimnames(ModelCurvesVsFishLenCl)[[1]] <- midpts
dimnames(ModelCurvesVsFishLenCl)[[2]] <- c("Mean","Median","Lw95CL","Up95CL")
dimnames(ModelCurvesVsFishLenCl)[[3]] <- DecDay
if (nsims > 0) {
for (k in 1:nSizeClasses) {
CurveEst.mean = apply(ModelCurveEst[,k,], MARGIN=2, function(x) mean(x))
CurveEst.median = apply(ModelCurveEst[,k,], MARGIN=2, function(x) quantile(x, 0.5))
CurveEst.lowCL = apply(ModelCurveEst[,k,], MARGIN=2, function(x) quantile(x, 0.025))
CurveEst.uppCL = apply(ModelCurveEst[,k,], MARGIN=2, function(x) quantile(x, 0.975))
ModelCurvesVsFishLenCl[k,1,]= CurveEst.mean
ModelCurvesVsFishLenCl[k,2,]= CurveEst.median
ModelCurvesVsFishLenCl[k,3,]= CurveEst.lowCL
ModelCurvesVsFishLenCl[k,4,]= CurveEst.uppCL
cat("3:Estimates from resampling: k",k,"of",nSizeClasses,"fish size classes",'\n')
}
}
res = list(params=params,
NLL=NLL,
convergence=convergence,
vcov.Params=vcov.Params,
ParamEst=ParamEst,
ParamEst.sim=ParamEst.sim,
MaxPropSpawnVsFishLen=MaxPropSpawnVsFishLen,
SpawnDurVsFishLen=SpawnDurVsFishLen,
ModelCurvesVsFishLenCl=ModelCurvesVsFishLenCl,
lbnds=lbnds,
ubnds=ubnds,
midpts=midpts,
DecDayPlot=DecDayPlot)
return(res)
}
nLenCats = length(lbnds)
MMabb = substr(month.abb, 1, 1)
for (i in 1:nLenCats) {
subDat = ObsSpawnDat[ObsSpawnDat$FishLen >= lbnds[i] & ObsSpawnDat$FishLen < ubnds[i],]
Probs = CalcMonthlyObsSpawnProps_SpDurMod(subDat)
plot(seq(0.5,11.5,1), Probs, xaxt='n', yaxt="n", cex=0.8, cex.axis=1,bty='n', ylim=c(0,1), xlim=c(0,12),
xlab = list(" Month",cex=1.2), ylab=list("Prop. spawning",cex=1.2), main=paste0(lbnds[i],"-",ubnds[i]," mm"), cex.main=1)
AddAxesAndTickLabelsToPlot(xmin=0.5, xmax=11.5, xint=1, ymin=0, ymax=1, yint=0.2, cexval=1,  cexaxisval=NA, lwdval=NA,
linevals=c(-0.5,-0.5), lasval=1, xaxlabel = MMabb[1:12], tcklen = 0.03)
if(!is.na(params[i])) {
FishLen=(lbnds[i] + ubnds[i])/2
DecDay_plot = seq(0,1,0.01)
Res=CalcDailySpawnProps_SpDurMod(FishLen, DecDay_plot, params)
lines(DecDay_plot*12,Res$P_t_s,col=i)
}
} # i
AddAxesAndTickLabelsToPlot(xmin=0.5, xmax=11.5, xint=1, ymin=0, ymax=1, yint=0.2, cexval=1,  cexaxisval=NA, lwdval=NA,
linevals=c(-0.5,0), lasval=1, xaxlabel = MMabb[1:12], tcklen = 0.03)
AddAxesAndTickLabelsToPlot(xmin=0.5, xmax=11.5, xint=1, ymin=0, ymax=1, yint=0.2, cexval=1,  cexaxisval=NA, lwdval=NA,
linevals=c(0,0), lasval=1, xaxlabel = MMabb[1:12], tcklen = 0.03)
nLenCats = length(lbnds)
MMabb = substr(month.abb, 1, 1)
for (i in 1:nLenCats) {
subDat = ObsSpawnDat[ObsSpawnDat$FishLen >= lbnds[i] & ObsSpawnDat$FishLen < ubnds[i],]
Probs = CalcMonthlyObsSpawnProps_SpDurMod(subDat)
plot(seq(0.5,11.5,1), Probs, xaxt='n', yaxt="n", cex=0.8, cex.axis=1,bty='n', ylim=c(0,1), xlim=c(0,12),
xlab = list(" Month",cex=1.2), ylab=list("Prop. spawning",cex=1.2), main=paste0(lbnds[i],"-",ubnds[i]," mm"), cex.main=1)
AddAxesAndTickLabelsToPlot(xmin=0.5, xmax=11.5, xint=1, ymin=0, ymax=1, yint=0.2, cexval=1,  cexaxisval=NA, lwdval=NA,
linevals=c(0,0), lasval=1, xaxlabel = MMabb[1:12], tcklen = 0.03)
if(!is.na(params[i])) {
FishLen=(lbnds[i] + ubnds[i])/2
DecDay_plot = seq(0,1,0.01)
Res=CalcDailySpawnProps_SpDurMod(FishLen, DecDay_plot, params)
lines(DecDay_plot*12,Res$P_t_s,col=i)
}
} # i
subDat = ObsSpawnDat[ObsSpawnDat$FishLen >= lbnds[i] & ObsSpawnDat$FishLen < ubnds[i],]
Probs = CalcMonthlyObsSpawnProps_SpDurMod(subDat)
plot(seq(0.5,11.5,1), Probs, xaxt='n', yaxt="n", cex=0.8, cex.axis=1,bty='n', ylim=c(0,1), xlim=c(0,12),
xlab = list(" Month",cex=1.2), ylab=list("Prop. spawning",cex=1.2), main=paste0(lbnds[i],"-",ubnds[i]," mm"), cex.main=1)
if (is.na(xmin)) xmin=0
if (is.na(ymin)) ymin=0
if (is.na(cexval)) cexval=1
if (is.na(cexaxisval)) cexaxisval=1
if (is.na(lwdval)) lwdval=1
if (is.na(lasval)) lasval=1
if (length(which(is.na(linevals)))>0) linevals=c(0,0)
axis(1, at = seq(xmin, xmax, xint), line = linevals[1], labels = F)
axis(2, at = seq(ymin, ymax, yint), line = linevals[2], labels = F)
axis(1, at = seq(xmin, xmax, xint), lwd=lwdval, labels=xaxlabel, line=linevals[1], cex=cexval, cex.axis=cexaxisval, las=lasval, tck=tcklen)
linevals[1]
axis(2, at = seq(ymin, ymax, yint), lwd=lwdval, labels=T, line=linevals[2], cex=cexval, cex.axis=cexaxisval, las=lasval)
#' @param ymin y axis minimum
#' @param ymax y axis maximum
#' @param yint y axis tick interval
#' @param cexval label size
#' @param cexaxisval axis size
#' @param lwdval line widths
#' @param lineval axis offset
#' @param lasval axis orientation
#'
#' @return adds axes to plots
AddAxesAndTickLabelsToPlot <- function(xmin, xmax, xint, ymin, ymax, yint, cexval, cexaxisval, lwdval, linevals, lasval, xaxlabel, tcklen) {
if (is.na(xmin)) xmin=0
if (is.na(ymin)) ymin=0
if (is.na(cexval)) cexval=1
if (is.na(cexaxisval)) cexaxisval=1
if (is.na(lwdval)) lwdval=1
if (is.na(lasval)) lasval=1
if (length(which(is.na(linevals)))>0) linevals=c(0,0)
axis(1, at = seq(xmin, xmax, xint), line = linevals[1], labels = xaxlabel)
axis(2, at = seq(ymin, ymax, yint), line = linevals[2], labels = F)
axis(1, at = seq(xmin, xmax, xint), lwd=lwdval, labels=F, line=linevals[1], cex=cexval, cex.axis=cexaxisval, las=lasval, tck=tcklen)
axis(2, at = seq(ymin, ymax, yint), lwd=lwdval, labels=T, line=linevals[2], cex=cexval, cex.axis=cexaxisval, las=lasval)
}
nLenCats = length(lbnds)
MMabb = substr(month.abb, 1, 1)
for (i in 1:nLenCats) {
subDat = ObsSpawnDat[ObsSpawnDat$FishLen >= lbnds[i] & ObsSpawnDat$FishLen < ubnds[i],]
Probs = CalcMonthlyObsSpawnProps_SpDurMod(subDat)
plot(seq(0.5,11.5,1), Probs, xaxt='n', yaxt="n", cex=0.8, cex.axis=1,bty='n', ylim=c(0,1), xlim=c(0,12),
xlab = list(" Month",cex=1.2), ylab=list("Prop. spawning",cex=1.2), main=paste0(lbnds[i],"-",ubnds[i]," mm"), cex.main=1)
AddAxesAndTickLabelsToPlot(xmin=0.5, xmax=11.5, xint=1, ymin=0, ymax=1, yint=0.2, cexval=1,  cexaxisval=NA, lwdval=NA,
linevals=c(0,0), lasval=1, xaxlabel = MMabb[1:12], tcklen = 0.03)
if(!is.na(params[i])) {
FishLen=(lbnds[i] + ubnds[i])/2
DecDay_plot = seq(0,1,0.01)
Res=CalcDailySpawnProps_SpDurMod(FishLen, DecDay_plot, params)
lines(DecDay_plot*12,Res$P_t_s,col=i)
}
} # i
#' MM=Res$MM
#' ObsSpawnDat = data.frame(MM=MM,FishLen=FishLen,ObsMatStatus=ObsMatStatus)
#' # params = c(lnL50,lnslope,logitPkSpawn,lnkappa,lnkappa2,lnslope1,lnslope2)
#' params = NA
#' lbnds = seq(300,900,100)
#' ubnds = lbnds + 100
#' par(mfrow=c(3,2), mar=c(4,2,2,2))
#' PlotSpawningDurationData(ObsSpawnDat, lbnds, ubnds, params)
#' @export
#'
PlotSpawningDurationData <- function(ObsSpawnDat, lbnds, ubnds, params) {
nLenCats = length(lbnds)
MMabb = substr(month.abb, 1, 1)
for (i in 1:nLenCats) {
subDat = ObsSpawnDat[ObsSpawnDat$FishLen >= lbnds[i] & ObsSpawnDat$FishLen < ubnds[i],]
Probs = CalcMonthlyObsSpawnProps_SpDurMod(subDat)
plot(seq(0.5,11.5,1), Probs, xaxt='n', yaxt="n", cex=0.8, cex.axis=1,bty='n', ylim=c(0,1), xlim=c(0,12),
xlab = list(" Month",cex=1.2), ylab=list("Prop. spawning",cex=1.2), main=paste0(lbnds[i],"-",ubnds[i]," mm"), cex.main=1)
AddAxesAndTickLabelsToPlot(xmin=0.5, xmax=11.5, xint=1, ymin=0, ymax=1, yint=0.2, cexval=1,  cexaxisval=NA, lwdval=NA,
linevals=c(0,0), lasval=1, xaxlabel = MMabb[1:12], tcklen = 0.03)
if(!is.na(params[i])) {
FishLen=(lbnds[i] + ubnds[i])/2
DecDay_plot = seq(0,1,0.01)
Res=CalcDailySpawnProps_SpDurMod(FishLen, DecDay_plot, params)
lines(DecDay_plot*12,Res$P_t_s,col=i)
}
} # i
}
#' Calculate NLL for spawning duration model given data and parameter values
#'
#' Calculate negative log-likelihood for spawning duration model given data and parameter values
#'
#' @keywords internal
#'
#' @param params specified (or estimated), transformed parameter values, for the spawning duration model (including
#' lnL50, lnslope, logitPkSpawn, lnkappa, lnkappa2, lnslope1, lnslope2)
#'
#' @return negative log-likelihood (NLL)
CalcNLL_SpDurMod <- function(params) {
Res = CalcDailySpawnProps2_SpDurMod(params)
Likelihood = rep(-999, length(DecDay))
Likelihood[which(ObsMatStatus==1)] = Res$P_t_s[which(ObsMatStatus==1)]
Likelihood[which(ObsMatStatus==0)] = 1 - Res$P_t_s[which(ObsMatStatus==0)]
LL <- log(Likelihood + 1E-4)
NLL = -sum(LL) + Res$param_pen
results = NLL
cat("NLL",NLL,"params",params,"Res$param_pen",Res$param_pen,'\n')
return(results)
}
subDat = ObsSpawnDat[ObsSpawnDat$FishLen >= lbnds[i] & ObsSpawnDat$FishLen < ubnds[i],]
Probs = CalcMonthlyObsSpawnProps_SpDurMod(subDat)
plot(seq(0.5,11.5,1), Probs, xaxt='n', yaxt="n", cex=0.8, cex.axis=1,bty='n', ylim=c(0,1), xlim=c(0,12),
xlab = list(" Month",cex=1.2), ylab=list("Prop. spawning",cex=1.2), main=paste0(lbnds[i],"-",ubnds[i]," mm"), cex.main=1)
if (is.na(xmin)) xmin=0
if (is.na(ymin)) ymin=0
if (is.na(cexval)) cexval=1
if (is.na(cexaxisval)) cexaxisval=1
if (is.na(lwdval)) lwdval=1
if (is.na(lasval)) lasval=1
if (length(which(is.na(linevals)))>0) linevals=c(0,0)
axis(1, at = seq(xmin, xmax, xint), line = linevals[1], labels = xaxlabel)
axis(2, at = seq(ymin, ymax, yint), line = linevals[2], labels = F)
axis(2, at = seq(ymin, ymax, yint), lwd=lwdval, labels=T, line=linevals[2], cex=cexval, cex.axis=cexaxisval, las=lasval)
#' @param ymin y axis minimum
#' @param ymax y axis maximum
#' @param yint y axis tick interval
#' @param cexval label size
#' @param cexaxisval axis size
#' @param lwdval line widths
#' @param lineval axis offset
#' @param lasval axis orientation
#'
#' @return adds axes to plots
AddAxesAndTickLabelsToPlot <- function(xmin, xmax, xint, ymin, ymax, yint, cexval, cexaxisval, lwdval, linevals, lasval, xaxlabel, tcklen) {
if (is.na(xmin)) xmin=0
if (is.na(ymin)) ymin=0
if (is.na(cexval)) cexval=1
if (is.na(cexaxisval)) cexaxisval=1
if (is.na(lwdval)) lwdval=1
if (is.na(lasval)) lasval=1
if (length(which(is.na(linevals)))>0) linevals=c(0,0)
axis(1, at = seq(xmin, xmax, xint), line = linevals[1], labels = xaxlabel)
axis(2, at = seq(ymin, ymax, yint), line = linevals[2], labels = F)
axis(2, at = seq(ymin, ymax, yint), lwd=lwdval, labels=T, line=linevals[2], cex=cexval, cex.axis=cexaxisval, las=lasval)
}
nLenCats = length(lbnds)
MMabb = substr(month.abb, 1, 1)
for (i in 1:nLenCats) {
subDat = ObsSpawnDat[ObsSpawnDat$FishLen >= lbnds[i] & ObsSpawnDat$FishLen < ubnds[i],]
Probs = CalcMonthlyObsSpawnProps_SpDurMod(subDat)
plot(seq(0.5,11.5,1), Probs, xaxt='n', yaxt="n", cex=0.8, cex.axis=1,bty='n', ylim=c(0,1), xlim=c(0,12),
xlab = list(" Month",cex=1.2), ylab=list("Prop. spawning",cex=1.2), main=paste0(lbnds[i],"-",ubnds[i]," mm"), cex.main=1)
AddAxesAndTickLabelsToPlot(xmin=0.5, xmax=11.5, xint=1, ymin=0, ymax=1, yint=0.2, cexval=1,  cexaxisval=NA, lwdval=NA,
linevals=c(0,0), lasval=1, xaxlabel = MMabb[1:12], tcklen = 0.03)
if(!is.na(params[i])) {
FishLen=(lbnds[i] + ubnds[i])/2
DecDay_plot = seq(0,1,0.01)
Res=CalcDailySpawnProps_SpDurMod(FishLen, DecDay_plot, params)
lines(DecDay_plot*12,Res$P_t_s,col=i)
}
} # i
#' @param ymin y axis minimum
#' @param ymax y axis maximum
#' @param yint y axis tick interval
#' @param cexval label size
#' @param cexaxisval axis size
#' @param lwdval line widths
#' @param lineval axis offset
#' @param lasval axis orientation
#'
#' @return adds axes to plots
AddAxesAndTickLabelsToPlot <- function(xmin, xmax, xint, ymin, ymax, yint, cexval, cexaxisval, lwdval, lineval, lasval, xaxlabel, tcklen) {
if (is.na(xmin)) xmin=0
if (is.na(ymin)) ymin=0
if (is.na(cexval)) cexval=1
if (is.na(cexaxisval)) cexaxisval=1
if (is.na(lwdval)) lwdval=1
if (is.na(lasval)) lasval=1
if (is.na(lineval)) lineval=0
axis(1, at = seq(xmin, xmax, xint), line = lineval, labels = xaxlabel)
axis(2, at = seq(ymin, ymax, yint), line = lineval, labels = F)
axis(2, at = seq(ymin, ymax, yint), lwd=lwdval, labels=T, line=lineval, cex=cexval, cex.axis=cexaxisval, las=lasval)
}
nLenCats = length(lbnds)
MMabb = substr(month.abb, 1, 1)
for (i in 1:nLenCats) {
subDat = ObsSpawnDat[ObsSpawnDat$FishLen >= lbnds[i] & ObsSpawnDat$FishLen < ubnds[i],]
Probs = CalcMonthlyObsSpawnProps_SpDurMod(subDat)
plot(seq(0.5,11.5,1), Probs, xaxt='n', yaxt="n", cex=0.8, cex.axis=1,bty='n', ylim=c(0,1), xlim=c(0,12),
xlab = list(" Month",cex=1.2), ylab=list("Prop. spawning",cex=1.2), main=paste0(lbnds[i],"-",ubnds[i]," mm"), cex.main=1)
AddAxesAndTickLabelsToPlot(xmin=0.5, xmax=11.5, xint=1, ymin=0, ymax=1, yint=0.2, cexval=1,  cexaxisval=NA, lwdval=NA,
lineval=0, lasval=1, xaxlabel = MMabb[1:12], tcklen = 0.03)
if(!is.na(params[i])) {
FishLen=(lbnds[i] + ubnds[i])/2
DecDay_plot = seq(0,1,0.01)
Res=CalcDailySpawnProps_SpDurMod(FishLen, DecDay_plot, params)
lines(DecDay_plot*12,Res$P_t_s,col=i)
}
} # i
