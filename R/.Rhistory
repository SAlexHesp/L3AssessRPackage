RandFemLenCl
RandFemLenCl
table(RandFemLenCl)
table(RandFemLenCl,cut=1:nLenCL)
table(RandFemLenCl,cut=1:nLenCl)
RandFemLenCl
?table
hist(RandFemLenCl,breaks=1:nLenCl)
hist(RandFemLenCl,breaks=1:nLenCl,plot=F)
hist(RandFemLenCl,breaks=1:nLenCl,right=T, plot=F)
hist(RandFemLenCl,breaks=1:nLenCl,right=T, plot=T)
hist(RandFemLenCl,breaks=1:nLenCl,right=T, plot=T)
?hist
hist(RandFemLenCl,breaks=1:nLenCl,right=T, plot=F)
hist(RandFemLenCl,breaks=1:nLenCl,left=T, plot=F)
hist(RandFemLenCl,breaks=1:nLenCl,right=T, plot=F)
hist(RandFemLenCl,breaks=1:nLenCl,right=F, plot=F)
nLenCl
hist(RandFemLenCl,breaks=seq(1,nLenCl,1),right=F, plot=F)
hist(RandFemLenCl,breaks=seq(1,nLenCl+1,1),right=F, plot=F)
FemFreq = hist(RandFemLenCl,breaks=seq(1,nLenCl,1),right=F, plot=F)
FemDat = hist(RandFemLenCl,breaks=seq(1,nLenCl,1),right=F, plot=F)
FemDat$counts
FemDat = hist(RandFemLenCl,breaks=seq(1,nLenCl,1),right=F, plot=F)
MalDat = hist(RandMalLenCl,breaks=seq(1,nLenCl,1),right=F, plot=F)
FreqFem = FemDat$counts
FreqMal = MalDat$counts
FreqFem
# generate random lengths for age class
RandFemLen=rep(midpt,FreqFem)
FreqFem
FreqFem = as.vector(FemDat$counts)
# generate random lengths for age class
RandFemLen=rep(midpt,FreqFem)
FreqFem
midpt
length(FreqFem)
length(midpt)
FemDat
FemDat = hist(RandFemLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
MalDat = hist(RandMalLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
FemDat
MalDat = hist(RandMalLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
FreqFem = as.vector(FemDat$counts)
FreqMal = MalDat$counts
# generate random lengths for age class
RandFemLen=rep(midpt,FreqFem)
length(FreqFem)
length(midpt)
RandMalLen=rep(1:nLenCl,FreqFem)))
FemDat = hist(RandFemLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
MalDat = hist(RandMalLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
FreqFem = as.vector(FemDat$counts)
FreqMal = as-vector(MalDat$counts)
# generate random lengths for age class
RandFemLen=rep(midpt,FreqFem)
length(FreqFem)
length(midpt)
RandMalLen=rep(1:nLenCl,FreqFem)
RandMalLen
RandMalLen=rep(midpt,FreqMal)
RandMalLen
# generate random lengths for age class
RandFemLenClAtAge=rep(midpt,FreqFem)
RandMalLenClAtAge=rep(midpt,FreqMal)
RandFemLen = round(RandFemLenClAtAge + runif(nFem,-LenInc, LenInc),0)
RandFemLen
LenInc
LenInterv = (ubnd[1] - lbnd[1]) / 2 # randomising fish lengths, within each length class
LenInterv
RandFemLen = round(RandFemLenClAtAge + runif(nFem,-LenInterv, LenInterv),0)
RandMalLen = round(RandMalLenCl + runif(1000,-LenInterv, LenInterv),0)
RandMalLen = round(RandMalLenClAtAge + runif(nMal,-LenInterv, LenInterv),0)
RandMalLen
LenInc
FemLenAtAge_lw = rep(0,MaxModelAge); FemLenAtAge_hi = rep(0,MaxModelAge)
MalLenAtAge_lw = rep(0,MaxModelAge); MalLenAtAge_hi = rep(0,MaxModelAge)
FemLenAtAge_lw[i] = quantile(RandFemLen,0.975)
quantile(RandFemLen,0.975)
FemLenAtAge_lw[i]
MalLenAtAge_lw[i] = quantile(RandMalLen,0.025); MalLenAtAge_hi[i] = quantile(RandMalLen,0.975)
for (i in 1:MaxModelAge) {
# calc length class distribution for age class
FemProbs = Res$ModelDiag$Fish_FemNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_FemNPerRecAtAge[i,])
MalProbs = Res$ModelDiag$Fish_MalNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_MalNPerRecAtAge[i,])
# get number of fish in age class
nFem = length(which(RandFemAgeCl==i))
nMal = length(which(RandMalAgeCl==i))
# generate random length classes for age class
RandFemLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nFem,FemProbs))))
RandMalLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nMal,MalProbs))))
FemDat = hist(RandFemLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
MalDat = hist(RandMalLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
FreqFem = as.vector(FemDat$counts)
FreqMal = as-vector(MalDat$counts)
# generate random lengths for age class
RandFemLenClAtAge=rep(midpt,FreqFem)
RandMalLenClAtAge=rep(midpt,FreqMal)
# randomising fish lengths, within each length class
LenInterv = (ubnd[1] - lbnd[1]) / 2
RandFemLen = round(RandFemLenClAtAge + runif(nFem,-LenInterv, LenInterv),0)
RandMalLen = round(RandMalLenClAtAge + runif(nMal,-LenInterv, LenInterv),0)
FemLenAtAge_lw[i] = quantile(RandFemLen,0.025); FemLenAtAge_hi[i] = quantile(RandFemLen,0.975)
MalLenAtAge_lw[i] = quantile(RandMalLen,0.025); MalLenAtAge_hi[i] = quantile(RandMalLen,0.975)
}
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(L3Assess)
# library(WAFishBiology)
MaxModelAge <- 20 # maximum age considered by model, years
TimeStep <- 1 # Model time step (y) (for shorter-lived species, might be appropriate to use a smaller time step)
MaxLen = 800
LenInc = 20
lbnd = seq(0,MaxLen - LenInc, LenInc)
ubnd = lbnd + LenInc
midpt = lbnd + (LenInc/2)
nLenCl = length(midpt)
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf <- c(550, 500) # mm - von Bertalanffy growth model parameters - Females, males
vbK <- c(0.2, 0.2) # year-1 - von Bertalanffy growth model parameters - Females, males
tzero <- c(0, 0) # years - von Bertalanffy growth model parameters - Females, males
GrowthParams = data.frame(Linf=Linf, vbK=vbK, tzero=tzero)
RefnceAges = NA
# GrowthParams c(Linf, vbK, tzero) single sex von Bertalanffy, or data.frame(Linf=Linf, vbK=vbK, tzero=tzero),
#' both sexes von Bertalanffy, or c(y1, y2, a, b) single sex Schnute, or data.frame(y1=y1, y2=y2, a=a, b=b), both sexes Schnute
CVSizeAtAge = c(0.05,0.05)
lenwt_a <- 0.000005 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
ln_lenwt_a <- NA # for log-log relationship
lenwt_b <- 3 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
WLrel_Type <- 1 # 1=power, 2=log-log relationship
EstWtAtLen <- data.frame(EstFemWtAtLen=NA,
EstMalWtAtLen=NA) # weight at age, inputted as values in data frame
ReprodScale <- 1 # 1=default (standard calculations for spawning biomass), 2=hyperallometric reproductive scaling with female mass (i.e. BOFFF effects)
ReprodPattern <- 1 # 1 = gonochoristic (separate sexes), 2 = protogynous (female to male sex change), 3 = protandrous (male to female sex change)
InitRatioFem <- 0.5 # Ratio of females to males at recruitment age/length
FinalSex_Pmax <- NA # Logistic sex change relationship parameters (max probability of final sex)
FinalSex_L50 <- NA # Logistic sex change relationship parameters (inflection point)
FinalSex_L95 <- NA # Logistic sex change relationship parameters (95% of max probability)
mat_L50 <- c(250, 250) # females, males - Logistic length (mm) at maturity relationship parameters
mat_L95 <- c(300, 300) # females, males - Logistic length (mm) at maturity relationship parameters
EstMatAtLen <- data.frame(EstFemMatAtLen=NA,
EstMalMatAtLen=NA) # maturity at length, inputted as values in data frame
sel_L50 <- c(250, 250) # females, males - Logistic length selectivity relationship parameters
sel_L95 <- c(300, 300) # females, males - Logistic length selectivity relationship parameters
ret_Pmax <- c(1.0, 1.0) # maximum retention, values lower than 1 imply discarding of fish above MLL
ret_L50 <- c(250, 250) # females, males - Logistic fish retention at length parameters
ret_L95 <- c(300, 300) # females, males - Logistic fish retention at length parameters
DiscMort <- 0.25 # discard mortality (e.g. 50% released fish die = 0.5)
Steepness <- 0.75 # steepness parameter of the Beverton and Holt stock-recruitment relationship
SRrel_Type <- 1 # 1 = Beverton-Holt, 2=Ricker
NatMort = 4.22 / MaxModelAge # natural mortality  (year-1)
FMort = 0.2
Res=CalcYPRAndSPRForFMort_LB(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type,
EstWtAtLen, ReprodScale, ReprodPattern, InitRatioFem, FinalSex_Pmax, FinalSex_L50,
FinalSex_L95, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, ret_Pmax,
ret_L50, ret_L95, DiscMort, Steepness, SRrel_Type, NatMort, FMort)
# get random length classes (across ages)
FemProbs = Res$ModelDiag$Fish_FemNPerRecLen / sum(Res$ModelDiag$Fish_FemNPerRecLen)
MalProbs = Res$ModelDiag$Fish_FemNPerRecLen / sum(Res$ModelDiag$Fish_FemNPerRecLen)
RandFemLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,1000,FemProbs))))
RandMalLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,1000,MalProbs))))
FemLenAtAge_lw = rep(0,MaxModelAge); FemLenAtAge_hi = rep(0,MaxModelAge)
MalLenAtAge_lw = rep(0,MaxModelAge); MalLenAtAge_hi = rep(0,MaxModelAge)
for (i in 1:MaxModelAge) {
# calc length class distribution for age class
FemProbs = Res$ModelDiag$Fish_FemNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_FemNPerRecAtAge[i,])
MalProbs = Res$ModelDiag$Fish_MalNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_MalNPerRecAtAge[i,])
# get number of fish in age class
nFem = length(which(RandFemAgeCl==i))
nMal = length(which(RandMalAgeCl==i))
# generate random length classes for age class
RandFemLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nFem,FemProbs))))
RandMalLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nMal,MalProbs))))
FemDat = hist(RandFemLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
MalDat = hist(RandMalLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
FreqFem = as.vector(FemDat$counts)
FreqMal = as-vector(MalDat$counts)
# generate random lengths for age class
RandFemLenClAtAge=rep(midpt,FreqFem)
RandMalLenClAtAge=rep(midpt,FreqMal)
# randomising fish lengths, within each length class
LenInterv = (ubnd[1] - lbnd[1]) / 2
RandFemLen = round(RandFemLenClAtAge + runif(nFem,-LenInterv, LenInterv),0)
RandMalLen = round(RandMalLenClAtAge + runif(nMal,-LenInterv, LenInterv),0)
FemLenAtAge_lw[i] = quantile(RandFemLen,0.025); FemLenAtAge_hi[i] = quantile(RandFemLen,0.975)
MalLenAtAge_lw[i] = quantile(RandMalLen,0.025); MalLenAtAge_hi[i] = quantile(RandMalLen,0.975)
}
MalDat
FemLenAtAge_lw = rep(NA,MaxModelAge); FemLenAtAge_hi = rep(NA,MaxModelAge)
MalLenAtAge_lw = rep(NA,MaxModelAge); MalLenAtAge_hi = rep(NA,MaxModelAge)
for (i in 1:MaxModelAge) {
# calc length class distribution for age class
FemProbs = Res$ModelDiag$Fish_FemNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_FemNPerRecAtAge[i,])
MalProbs = Res$ModelDiag$Fish_MalNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_MalNPerRecAtAge[i,])
# get number of fish in age class
nFem = length(which(RandFemAgeCl==i))
nMal = length(which(RandMalAgeCl==i))
# generate random length classes for age class
RandFemLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nFem,FemProbs))))
RandMalLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nMal,MalProbs))))
FemDat = hist(RandFemLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
MalDat = hist(RandMalLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
FreqFem = as.vector(FemDat$counts)
FreqMal = as.vector(MalDat$counts)
# generate random lengths for age class
RandFemLenClAtAge=rep(midpt,FreqFem)
RandMalLenClAtAge=rep(midpt,FreqMal)
# randomising fish lengths, within each length class
LenInterv = (ubnd[1] - lbnd[1]) / 2
RandFemLen = round(RandFemLenClAtAge + runif(nFem,-LenInterv, LenInterv),0)
RandMalLen = round(RandMalLenClAtAge + runif(nMal,-LenInterv, LenInterv),0)
FemLenAtAge_lw[i] = quantile(RandFemLen,0.025); FemLenAtAge_hi[i] = quantile(RandFemLen,0.975)
MalLenAtAge_lw[i] = quantile(RandMalLen,0.025); MalLenAtAge_hi[i] = quantile(RandMalLen,0.975)
}
FemLenAtAge_lw
FemLenAtAge_hi
# get random length classes (across ages)
FemProbs = Res$ModelDiag$Fish_FemNPerRecLen / sum(Res$ModelDiag$Fish_FemNPerRecLen)
MalProbs = Res$ModelDiag$Fish_FemNPerRecLen / sum(Res$ModelDiag$Fish_FemNPerRecLen)
RandFemLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,10000,FemProbs))))
RandMalLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,10000,MalProbs))))
FemLenAtAge_lw = rep(NA,MaxModelAge); FemLenAtAge_hi = rep(NA,MaxModelAge)
MalLenAtAge_lw = rep(NA,MaxModelAge); MalLenAtAge_hi = rep(NA,MaxModelAge)
for (i in 1:MaxModelAge) {
# calc length class distribution for age class
FemProbs = Res$ModelDiag$Fish_FemNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_FemNPerRecAtAge[i,])
MalProbs = Res$ModelDiag$Fish_MalNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_MalNPerRecAtAge[i,])
# get number of fish in age class
nFem = length(which(RandFemAgeCl==i))
nMal = length(which(RandMalAgeCl==i))
# generate random length classes for age class
RandFemLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nFem,FemProbs))))
RandMalLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nMal,MalProbs))))
FemDat = hist(RandFemLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
MalDat = hist(RandMalLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
FreqFem = as.vector(FemDat$counts)
FreqMal = as.vector(MalDat$counts)
# generate random lengths for age class
RandFemLenClAtAge=rep(midpt,FreqFem)
RandMalLenClAtAge=rep(midpt,FreqMal)
# randomising fish lengths, within each length class
LenInterv = (ubnd[1] - lbnd[1]) / 2
RandFemLen = round(RandFemLenClAtAge + runif(nFem,-LenInterv, LenInterv),0)
RandMalLen = round(RandMalLenClAtAge + runif(nMal,-LenInterv, LenInterv),0)
FemLenAtAge_lw[i] = quantile(RandFemLen,0.025); FemLenAtAge_hi[i] = quantile(RandFemLen,0.975)
MalLenAtAge_lw[i] = quantile(RandMalLen,0.025); MalLenAtAge_hi[i] = quantile(RandMalLen,0.975)
}
FemLenAtAge_lw
MalLenAtAge_lw
# get random length classes (across ages)
FemProbs = Res$ModelDiag$UnFish_FemNPerRecLen / sum(Res$ModelDiag$UnFish_FemNPerRecLen)
MalProbs = Res$ModelDiag$UnFish_FemNPerRecLen / sum(Res$ModelDiag$UnFish_FemNPerRecLen)
RandFemLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,10000,FemProbs))))
RandMalLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,10000,MalProbs))))
FemLenAtAge_lw = rep(NA,MaxModelAge); FemLenAtAge_hi = rep(NA,MaxModelAge)
MalLenAtAge_lw = rep(NA,MaxModelAge); MalLenAtAge_hi = rep(NA,MaxModelAge)
for (i in 1:MaxModelAge) {
# calc length class distribution for age class
FemProbs = Res$ModelDiag$Fish_FemNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_FemNPerRecAtAge[i,])
MalProbs = Res$ModelDiag$Fish_MalNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_MalNPerRecAtAge[i,])
# get number of fish in age class
nFem = length(which(RandFemAgeCl==i))
nMal = length(which(RandMalAgeCl==i))
# generate random length classes for age class
RandFemLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nFem,FemProbs))))
RandMalLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nMal,MalProbs))))
FemDat = hist(RandFemLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
MalDat = hist(RandMalLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
FreqFem = as.vector(FemDat$counts)
FreqMal = as.vector(MalDat$counts)
# generate random lengths for age class
RandFemLenClAtAge=rep(midpt,FreqFem)
RandMalLenClAtAge=rep(midpt,FreqMal)
# randomising fish lengths, within each length class
LenInterv = (ubnd[1] - lbnd[1]) / 2
RandFemLen = round(RandFemLenClAtAge + runif(nFem,-LenInterv, LenInterv),0)
RandMalLen = round(RandMalLenClAtAge + runif(nMal,-LenInterv, LenInterv),0)
FemLenAtAge_lw[i] = quantile(RandFemLen,0.025); FemLenAtAge_hi[i] = quantile(RandFemLen,0.975)
MalLenAtAge_lw[i] = quantile(RandMalLen,0.025); MalLenAtAge_hi[i] = quantile(RandMalLen,0.975)
}
FemLenAtAge_lw
FemLenAtAge_hi
MalLenAtAge_lw
MalLenAtAge_hi
# get random length classes (across ages)
FemProbs = Res$ModelDiag$UnFish_FemNPerRecLen / sum(Res$ModelDiag$UnFish_FemNPerRecLen)
MalProbs = Res$ModelDiag$UnFish_FemNPerRecLen / sum(Res$ModelDiag$UnFish_FemNPerRecLen)
RandFemLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,100000,FemProbs))))
RandMalLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,100000,MalProbs))))
FemLenAtAge_lw = rep(NA,MaxModelAge); FemLenAtAge_hi = rep(NA,MaxModelAge)
MalLenAtAge_lw = rep(NA,MaxModelAge); MalLenAtAge_hi = rep(NA,MaxModelAge)
for (i in 1:MaxModelAge) {
# calc length class distribution for age class
FemProbs = Res$ModelDiag$Fish_FemNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_FemNPerRecAtAge[i,])
MalProbs = Res$ModelDiag$Fish_MalNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_MalNPerRecAtAge[i,])
# get number of fish in age class
nFem = length(which(RandFemAgeCl==i))
nMal = length(which(RandMalAgeCl==i))
# generate random length classes for age class
RandFemLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nFem,FemProbs))))
RandMalLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nMal,MalProbs))))
FemDat = hist(RandFemLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
MalDat = hist(RandMalLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
FreqFem = as.vector(FemDat$counts)
FreqMal = as.vector(MalDat$counts)
# generate random lengths for age class
RandFemLenClAtAge=rep(midpt,FreqFem)
RandMalLenClAtAge=rep(midpt,FreqMal)
# randomising fish lengths, within each length class
LenInterv = (ubnd[1] - lbnd[1]) / 2
RandFemLen = round(RandFemLenClAtAge + runif(nFem,-LenInterv, LenInterv),0)
RandMalLen = round(RandMalLenClAtAge + runif(nMal,-LenInterv, LenInterv),0)
FemLenAtAge_lw[i] = quantile(RandFemLen,0.025); FemLenAtAge_hi[i] = quantile(RandFemLen,0.975)
MalLenAtAge_lw[i] = quantile(RandMalLen,0.025); MalLenAtAge_hi[i] = quantile(RandMalLen,0.975)
}
FemLenAtAge_lw
MalLenAtAge_lw
MalLenAtAge_hi
FemLenAtAge_lw
FemLenAtAge_hi
RefPointPlotOpt <- 1 # 0=don't plot, 1=plot defaults, 2=plot BMSY ref points
PlotOpt <- 0 # 0=all plots, 1=len at-age, 2=wt at length, 3=fem mat/sel/ret at length, 4=mal mat/sel/ret at length,
# 5=fem F at length, 6=mal F at length, 7=fem rel surv, 8=mal rel surv, 9=fem biom at age, 10=fem biom at age,
# 11=ypr/eq catch, 12=fem SPR/Brel, 13=mal SPR/Brel, 14=eq recruit
Current_F = 0.2
PlotPerRecruitResults_LB(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type,
EstWtAtLen, ReprodScale, ReprodPattern, InitRatioFem, FinalSex_Pmax, FinalSex_L50,
FinalSex_L95, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, ret_Pmax,
ret_L50, ret_L95, DiscMort, Steepness, SRrel_Type, NatMort, Current_F, PlotOpt)
for (i in 1:MaxModelAge) {
# calc length class distribution for age class
FemProbs = Res$ModelDiag$Fish_FemNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_FemNPerRecAtAge[i,])
MalProbs = Res$ModelDiag$Fish_MalNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_MalNPerRecAtAge[i,])
# specify number of fish in age class
nFem = 100
nMal = 100
# generate random length classes for age class
RandFemLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nFem,FemProbs))))
RandMalLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nMal,MalProbs))))
FemDat = hist(RandFemLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
MalDat = hist(RandMalLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
FreqFem = as.vector(FemDat$counts)
FreqMal = as.vector(MalDat$counts)
# generate random lengths for age class
RandFemLenClAtAge=rep(midpt,FreqFem)
RandMalLenClAtAge=rep(midpt,FreqMal)
# randomising fish lengths, within each length class
LenInterv = (ubnd[1] - lbnd[1]) / 2
RandFemLen = round(RandFemLenClAtAge + runif(nFem,-LenInterv, LenInterv),0)
RandMalLen = round(RandMalLenClAtAge + runif(nMal,-LenInterv, LenInterv),0)
FemLenAtAge_lw[i] = quantile(RandFemLen,0.025); FemLenAtAge_hi[i] = quantile(RandFemLen,0.975)
MalLenAtAge_lw[i] = quantile(RandMalLen,0.025); MalLenAtAge_hi[i] = quantile(RandMalLen,0.975)
}
MalLenAtAge_lw
MalLenAtAge_hi
for (i in 1:MaxModelAge) {
# calc length class distribution for age class
FemProbs = Res$ModelDiag$Fish_FemNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_FemNPerRecAtAge[i,])
MalProbs = Res$ModelDiag$Fish_MalNPerRecAtAge[i,] / sum(Res$ModelDiag$Fish_MalNPerRecAtAge[i,])
# specify number of fish in age class
nFem = 1000; nMal = 1000
# generate random length classes for age class
RandFemLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nFem,FemProbs))))
RandMalLenCl=rep(1:nLenCl,(as.vector(rmultinom(1,nMal,MalProbs))))
FemDat = hist(RandFemLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
MalDat = hist(RandMalLenCl,breaks=seq(0,nLenCl,1),right=F, plot=F)
FreqFem = as.vector(FemDat$counts)
FreqMal = as.vector(MalDat$counts)
# generate random lengths for age class
RandFemLenClAtAge=rep(midpt,FreqFem)
RandMalLenClAtAge=rep(midpt,FreqMal)
# randomising fish lengths, within each length class
LenInterv = (ubnd[1] - lbnd[1]) / 2
RandFemLen = round(RandFemLenClAtAge + runif(nFem,-LenInterv, LenInterv),0)
RandMalLen = round(RandMalLenClAtAge + runif(nMal,-LenInterv, LenInterv),0)
FemLenAtAge_lw[i] = quantile(RandFemLen,0.025); FemLenAtAge_hi[i] = quantile(RandFemLen,0.975)
MalLenAtAge_lw[i] = quantile(RandMalLen,0.025); MalLenAtAge_hi[i] = quantile(RandMalLen,0.975)
}
RefPointPlotOpt <- 1 # 0=don't plot, 1=plot defaults, 2=plot BMSY ref points
PlotOpt <- 0 # 0=all plots, 1=len at-age, 2=wt at length, 3=fem mat/sel/ret at length, 4=mal mat/sel/ret at length,
# 5=fem F at length, 6=mal F at length, 7=fem rel surv, 8=mal rel surv, 9=fem biom at age, 10=fem biom at age,
# 11=ypr/eq catch, 12=fem SPR/Brel, 13=mal SPR/Brel, 14=eq recruit
Current_F = 0.2
PlotPerRecruitResults_LB(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type,
EstWtAtLen, ReprodScale, ReprodPattern, InitRatioFem, FinalSex_Pmax, FinalSex_L50,
FinalSex_L95, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, ret_Pmax,
ret_L50, ret_L95, DiscMort, Steepness, SRrel_Type, NatMort, Current_F, PlotOpt)
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
rm(list=ls())
library(L3Assess)
# library(WAFishBiology)
defpar = par()
# Example 1. Non-hermaphroditic species
InitRecruit <- 1 # Initial recruitment
MaxModelAge <- 20 # maximum age considered by model, years
TimeStep <- 1 # Model time step (y) (for shorter-lived species, might be approprriate to use a smaller time step)
Linf <- c(550, 500) # mm - von Bertalanffy growth model parameters - Females, males
vbK <- c(0.5, 0.5) # year-1 - von Bertalanffy growth model parameters - Females, males
tzero <- c(0, 0) # years - von Bertalanffy growth model parameters - Females, males
EstLenAtAge <- data.frame(EstFemLenAtAge=NA, EstMalLenAtAge=NA) # length at age (from age 0), inputted as values in data frame
lenwt_a <- 0.000005 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
ln_lenwt_a <- NA # for log-log relationship
lenwt_b <- 3 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
WLrel_Type <- 1 # 1=power, 2=log-log relationship
EstWtAtAge <- data.frame(EstFemWtAtAge=NA, EstMalWtAtAge=NA) # weight at age (from age 0), inputted as values in data frame
ReprodScale <- 1 # 1=default (standard calculations for spawning biomass), 2=hyperallometric reproductive scaling with female mass (i.e. BOFFF effects)
ReprodPattern <- 1 # 1 = gonochoristic (separate sexes), 2 = protogynous (female to male sex change), 3 = protandrous (male to female sex change)
InitRatioFem <- 0.5 # Ratio of females to males at age zero
FinalSex_Pmax <- NA # Logistic sex change relationship parameters (max probability of final sex)
FinalSex_A50 <- NA # Logistic sex change relationship parameters (inflection point)
FinalSex_A95 <- NA # Logistic sex change relationship parameters (95% of max probability)
mat_A50 <- c(2.5, 2.5) # females, males - Logistic length (mm) at maturity relationship parameters
mat_A95 <- c(3.5, 3.5) # females, males - Logistic length (mm) at maturity relationship parameters
EstMatAtAge <- data.frame(EstFemMatAtAge=NA, EstMalMatAtAge=NA) # maturity at age (from age 0), inputted as values in data frame
Gear_sel_A50 <- NA # females, males - Logistic age selectivity relationship parameters
Gear_sel_A95 <- NA # females, males - Logistic age selectivity relationship parameters
EstGearSelAtAge <- data.frame(EstFemSelAtAge=NA, EstMalSelAtAge=NA) # gear selectivity at age (from age 0), inputted as values in data frame
Land_sel_A50 <- c(2.5, 2.5) # females, males - Logistic age selectivity relationship parameters
Land_sel_A95 <- c(3.5, 3.5) # females, males - Logistic age selectivity relationship parameters
EstLandSelAtAge <- data.frame(EstFemSelAtAge=NA, EstMalSelAtAge=NA) # gear selectivity at age (from age 0), inputted as values in data frame
ret_Pmax <- NA  # maximum retention, values lower than 1 imply discarding of fish above MLL
ret_A50 <- NA  # females, males - Logistic age fish retention at age parameters
ret_A95 <- NA  # females, males - Logistic age fish retention at age parameters
EstRetenAtAge <- data.frame(EstFemRetenAtAge=NA, EstMalRetenAtAge=NA) # fish retention at age (from age 0), inputted as values in data frame
DiscMort <- 0.0 # discard mortality (e.g. 50% released fish die = 0.5)
Steepness <- 0.75 # steepness parameter of the Beverton and Holt stock-recruitment relationship
SRrel_Type <- 1 # 1 = Beverton-Holt, 2=Ricker
NatMort = 0.2 # natural mortality  (year-1)
FMort <- 0.4 # estimate of fishing mortality, e.g. from catch curve analysis
Res=CalcYPRAndSPRForFMort_AB(MaxModelAge, TimeStep, Linf, vbK, tzero, EstLenAtAge,
lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type, EstWtAtAge, ReprodScale,
ReprodPattern, InitRatioFem, FinalSex_Pmax, FinalSex_A50, FinalSex_A95,
mat_A50, mat_A95, EstMatAtAge, Gear_sel_A50, Gear_sel_A95, EstGearSelAtAge,
Land_sel_A50, Land_sel_A95, EstLandSelAtAge, ret_Pmax, ret_A50, ret_A95,
EstRetenAtAge, DiscMort, Steepness, SRrel_Type, NatMort, FMort)
library(L3Assess)
# Alex Hesp
# 29 Jan 2024
# Exploration of effect of allowing for egg fertilisation rate on
# stock assessment results for hermphroditic fish species
# from .gz file
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# from github
# library(devtools)
# devtools::install_github("SAlexHesp/L3AssessRPackage", build_vignettes=TRUE, force=TRUE)
library(L3Assess)
# Alex Hesp
# 29 Jan 2024
# Exploration of effect of allowing for egg fertilisation rate on
# stock assessment results for hermphroditic fish species
# from .gz file
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# from github
# library(devtools)
# devtools::install_github("SAlexHesp/L3AssessRPackage", build_vignettes=TRUE, force=TRUE)
library(L3Assess)
MaxModelAge <- 20 # maximum age considered by model, years
TimeStep <- 1 # Model time step (y) (for shorter-lived species, might be appropriate to use a smaller time step)
MaxLen = 800
LenInc = 20
lbnd = seq(0,MaxLen - LenInc, LenInc)
ubnd = lbnd + LenInc
midpt = lbnd + (LenInc/2)
nLenCl = length(midpt)
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf <- c(550, 500) # mm - von Bertalanffy growth model parameters - Females, males
vbK <- c(0.2, 0.2) # year-1 - von Bertalanffy growth model parameters - Females, males
tzero <- c(0, 0) # years - von Bertalanffy growth model parameters - Females, males
GrowthParams = data.frame(Linf=Linf, vbK=vbK, tzero=tzero)
RefnceAges = NA
# GrowthParams c(Linf, vbK, tzero) single sex von Bertalanffy, or data.frame(Linf=Linf, vbK=vbK, tzero=tzero),
#' both sexes von Bertalanffy, or c(y1, y2, a, b) single sex Schnute, or data.frame(y1=y1, y2=y2, a=a, b=b), both sexes Schnute
CVSizeAtAge = c(0.05,0.05)
lenwt_a <- 0.000005 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
ln_lenwt_a <- NA # for log-log relationship
lenwt_b <- 3 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
WLrel_Type <- 1 # 1=power, 2=log-log relationship
EstWtAtLen <- data.frame(EstFemWtAtLen=NA,
EstMalWtAtLen=NA) # weight at age, inputted as values in data frame
ReprodScale <- 1 # 1=default (standard calculations for spawning biomass), 2=hyperallometric reproductive scaling with female mass (i.e. BOFFF effects)
ReprodPattern <- 1 # 1 = gonochoristic (separate sexes), 2 = protogynous (female to male sex change), 3 = protandrous (male to female sex change)
InitRatioFem <- 0.5 # Ratio of females to males at recruitment age/length
FinalSex_Pmax <- NA # Logistic sex change relationship parameters (max probability of final sex)
FinalSex_L50 <- NA # Logistic sex change relationship parameters (inflection point)
FinalSex_L95 <- NA # Logistic sex change relationship parameters (95% of max probability)
mat_L50 <- c(250, 250) # females, males - Logistic length (mm) at maturity relationship parameters
mat_L95 <- c(300, 300) # females, males - Logistic length (mm) at maturity relationship parameters
EstMatAtLen <- data.frame(EstFemMatAtLen=NA,
EstMalMatAtLen=NA) # maturity at length, inputted as values in data frame
sel_L50 <- c(250, 250) # females, males - Logistic length selectivity relationship parameters
sel_L95 <- c(300, 300) # females, males - Logistic length selectivity relationship parameters
EstGearSelAtLen <- data.frame(EstFemGearSelAtLen=NA,
EstMalGearSelAtLen=NA)
ret_Pmax <- c(1.0, 1.0) # maximum retention, values lower than 1 imply discarding of fish above MLL
ret_L50 <- c(250, 250) # females, males - Logistic fish retention at length parameters
ret_L95 <- c(300, 300) # females, males - Logistic fish retention at length parameters
EstRetenAtLen <- data.frame(EsFemtRetenAtLen=NA,
EstMalRetenAtLen=NA)
DiscMort <- 0.25 # discard mortality (e.g. 50% released fish die = 0.5)
Steepness <- 0.75 # steepness parameter of the Beverton and Holt stock-recruitment relationship
SRrel_Type <- 1 # 1 = Beverton-Holt, 2=Ricker
NatMort = 4.22 / MaxModelAge # natural mortality  (year-1)
FMort = 0.2
Res=CalcYPRAndSPRForFMort_LB(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type,
EstWtAtLen, ReprodScale, ReprodPattern, InitRatioFem, FinalSex_Pmax, FinalSex_L50,
FinalSex_L95, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, EstGearSelAtLen, ret_Pmax,
ret_L50, ret_L95, EstRetenAtLen, DiscMort, Steepness, SRrel_Type, NatMort, FMort)
