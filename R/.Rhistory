#' @param lasval axis orientation
#'
#' @return adds axes to plots
AddAxesAndTickLabelsToPlot <- function(xmin, xmax, xint, ymin, ymax, yint, cexval, cexaxisval, lwdval, linevals, lasval, xaxlabel, tcklen) {
if (is.na(xmin)) xmin=0
if (is.na(ymin)) ymin=0
if (is.na(cexval)) cexval=1
if (is.na(cexaxisval)) cexaxisval=1
if (is.na(lwdval)) lwdval=1
if (is.na(lasval)) lasval=1
if (length(which(is.na(linevals)))>0) linevals=c(0,0)
axis(1, at = seq(xmin, xmax, xint), line = linevals[1], labels = xaxlabel)
axis(2, at = seq(ymin, ymax, yint), line = linevals[2], labels = F)
axis(2, at = seq(ymin, ymax, yint), lwd=lwdval, labels=T, line=linevals[2], cex=cexval, cex.axis=cexaxisval, las=lasval)
}
nLenCats = length(lbnds)
MMabb = substr(month.abb, 1, 1)
for (i in 1:nLenCats) {
subDat = ObsSpawnDat[ObsSpawnDat$FishLen >= lbnds[i] & ObsSpawnDat$FishLen < ubnds[i],]
Probs = CalcMonthlyObsSpawnProps_SpDurMod(subDat)
plot(seq(0.5,11.5,1), Probs, xaxt='n', yaxt="n", cex=0.8, cex.axis=1,bty='n', ylim=c(0,1), xlim=c(0,12),
xlab = list(" Month",cex=1.2), ylab=list("Prop. spawning",cex=1.2), main=paste0(lbnds[i],"-",ubnds[i]," mm"), cex.main=1)
AddAxesAndTickLabelsToPlot(xmin=0.5, xmax=11.5, xint=1, ymin=0, ymax=1, yint=0.2, cexval=1,  cexaxisval=NA, lwdval=NA,
linevals=c(0,0), lasval=1, xaxlabel = MMabb[1:12], tcklen = 0.03)
if(!is.na(params[i])) {
FishLen=(lbnds[i] + ubnds[i])/2
DecDay_plot = seq(0,1,0.01)
Res=CalcDailySpawnProps_SpDurMod(FishLen, DecDay_plot, params)
lines(DecDay_plot*12,Res$P_t_s,col=i)
}
} # i
#' @param ymin y axis minimum
#' @param ymax y axis maximum
#' @param yint y axis tick interval
#' @param cexval label size
#' @param cexaxisval axis size
#' @param lwdval line widths
#' @param lineval axis offset
#' @param lasval axis orientation
#'
#' @return adds axes to plots
AddAxesAndTickLabelsToPlot <- function(xmin, xmax, xint, ymin, ymax, yint, cexval, cexaxisval, lwdval, lineval, lasval, xaxlabel, tcklen) {
if (is.na(xmin)) xmin=0
if (is.na(ymin)) ymin=0
if (is.na(cexval)) cexval=1
if (is.na(cexaxisval)) cexaxisval=1
if (is.na(lwdval)) lwdval=1
if (is.na(lasval)) lasval=1
if (is.na(lineval)) lineval=0
axis(1, at = seq(xmin, xmax, xint), line = lineval, labels = xaxlabel)
axis(2, at = seq(ymin, ymax, yint), line = lineval, labels = F)
axis(2, at = seq(ymin, ymax, yint), lwd=lwdval, labels=T, line=lineval, cex=cexval, cex.axis=cexaxisval, las=lasval)
}
nLenCats = length(lbnds)
MMabb = substr(month.abb, 1, 1)
for (i in 1:nLenCats) {
subDat = ObsSpawnDat[ObsSpawnDat$FishLen >= lbnds[i] & ObsSpawnDat$FishLen < ubnds[i],]
Probs = CalcMonthlyObsSpawnProps_SpDurMod(subDat)
plot(seq(0.5,11.5,1), Probs, xaxt='n', yaxt="n", cex=0.8, cex.axis=1,bty='n', ylim=c(0,1), xlim=c(0,12),
xlab = list(" Month",cex=1.2), ylab=list("Prop. spawning",cex=1.2), main=paste0(lbnds[i],"-",ubnds[i]," mm"), cex.main=1)
AddAxesAndTickLabelsToPlot(xmin=0.5, xmax=11.5, xint=1, ymin=0, ymax=1, yint=0.2, cexval=1,  cexaxisval=NA, lwdval=NA,
lineval=0, lasval=1, xaxlabel = MMabb[1:12], tcklen = 0.03)
if(!is.na(params[i])) {
FishLen=(lbnds[i] + ubnds[i])/2
DecDay_plot = seq(0,1,0.01)
Res=CalcDailySpawnProps_SpDurMod(FishLen, DecDay_plot, params)
lines(DecDay_plot*12,Res$P_t_s,col=i)
}
} # i
library(L3Assess)
heatmap(data)
data = rnorm(100,1,5)
heatmap(data)
data = data.frame(0:100,rnorm(100,1,5))
heatmap(data)
data = data.frame(1:100,rnorm(100,1,5))
heatmap(data)
data
rm(list=ls())
library(L3Assess)
# Simulate data
set.seed(123)
SampleSize=5000
MaxAge = 26
TimeStep = 1 # model timestep (e.g. 1 = annual, 1/12 = monthly)
MinAge = floor(TimeStep)
nAgeCl = length(MinAge:MaxAge)
nTimeSteps = length(seq(TimeStep,MaxAge,TimeStep))
NatMort = 4.22/MaxAge
FishMort = 0.2
MaxLen = 1200
LenInc = 20
MLL=NA # (minimum legal length) # retention set to 1 for all lengths if MLL set to NA and retention parameters not specified is knife-edged at MLL
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logist sel curve, 3=separate logist sel params, common growth
SelectivityAtLen = NA # selectivity vector
SelParams = c(300, 50) # L50, L95-L50 for gear selectivity
RetenParams = c(NA, NA) # L50, L95-L50 for retention
DiscMort = 0
# single sex, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy
Linf = 800
vbK = 0.2
CVSizeAtAge = 0.05
RefnceAges = NA
GrowthParams = c(Linf, vbK, CVSizeAtAge)
Res=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
SelParams, RetenParams, SelectivityAtLen, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
# 2 sexes, von Bertalanffy
# GrowthCurveType = 1 # 1 = von Bertalanffy
# Linf = c(700,850)
# vbK = c(0.25,0.2)
# CVSizeAtAge = c(0.05,0.05)
# RefnceAges = NA
# GrowthParams = data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge)
# Res=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
#                          SelParams, RetenParams, SelectivityAtLen, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
lbnd=Res$lbnd
midpt=Res$midpt
ubnd=Res$ubnd
# get data - 1 sex (or combined sexes)
ObsRetCatchFreqAtLen = as.vector(Res$ObsRetCatchFreqAtLen) # 1 sex
ObsRetCatchFreqAtLengthAndAge = as.matrix(Res$ObsRetCatchFreqAtLengthAndDecAge) # 1 sex
# # get data - 2 sexes
# ObsRetCatchFreqAtLen <- data.frame(matrix(nrow = 2, ncol = length(midpt))) # 2 sex
# colnames(ObsRetCatchFreqAtLen) <- midpt
# ObsRetCatchFreqAtLen[1,] = Res$ObsRetCatchFreqAtLen_Fem
# ObsRetCatchFreqAtLen[2,] = Res$ObsRetCatchFreqAtLen_Mal
# ObsRetCatchFreqAtLengthAndAge = array(c(unlist(Res$ObsRetCatchFreqAtLengthAndDecAge_Fem), unlist(Res$ObsRetCatchFreqAtLengthAndDecAge_Mal)),
#                                       c(nTimeSteps, length(midpt), 2), dimnames=list(rownames(Res$ObsRetCatchFreqAtLengthAndDecAge_Fem),
#                                                                                      colnames(Res$ObsRetCatchFreqAtLengthAndDecAge_Fem)))
# get params - 1 sex
InitFishMort = 0.3 # specify starting parameters
InitL50 = 320
InitDelta = 50 # L95-L50
InitLinf = 800
InitvbK = 0.2
InitCVSizeAtAge = 0.05
InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform (so F is always between 0 and 1)
params = c(InitFishMort_logit, log(c(InitL50, InitDelta, InitLinf, InitvbK, InitCVSizeAtAge)))
# # get params - 2 sexes
# InitFishMort = 0.3 # specify starting parameters
# InitL50 = 320
# InitDelta = 50 # L95-L50
# InitLinf = c(800,800)
# InitvbK = c(0.25,0.25)
# InitCVSizeAtAge = 0.05
# InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform (so F is always between 0 and 1)
# params = c(InitFishMort_logit, log(c(InitL50, InitDelta, InitLinf, InitvbK, InitCVSizeAtAge)))
FittedRes=GetAgeAndLengthBasedCatchCurveResults(params, RefnceAges, MLL, GrowthCurveType, SelectivityType, ObsRetCatchFreqAtLen, ObsRetCatchFreqAtLengthAndAge,
lbnd, ubnd, midpt, SelectivityAtLen, DiscMort, MaxAge, NatMort, TimeStep)
# Example with specified selectivity vector
# Simulate data
SelectivityType=1 # 1=selectivity inputted as vector, 2=asymptotic logist sel curve, 3=separate logist sel params, common growth
SelectivityAtLen = 1 / (1 + exp(-log(19)*(midpt-400)/(500-400)))
SelParams = c(NA, NA) # L50, L95-L50 for gear selectivity
RetenParams = c(NA, NA) # L50, L95-L50 for retention
DiscMort = 0
# single sex, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy
Linf = 800
vbK = 0.2
CVSizeAtAge = 0.05
GrowthParams = c(Linf, vbK, CVSizeAtAge)
RefnceAges = NA
Res=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
SelParams, RetenParams, SelectivityAtLen, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
lbnd=Res$lbnd
midpt=Res$midpt
ubnd=Res$ubnd
# get data - 1 sex (or combined sexes)
ObsRetCatchFreqAtLen = as.vector(Res$ObsRetCatchFreqAtLen) # 1 sex
ObsRetCatchFreqAtLengthAndAge = as.matrix(Res$ObsRetCatchFreqAtLengthAndDecAge) # 1 sex
# get params - 1 sex
InitFishMort = 0.3 # specify starting parameters
InitLinf = 800
InitvbK = 0.2
InitCVSizeAtAge = 0.05
InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform (so F is always between 0 and 1)
params = c(InitFishMort_logit, log(c(InitLinf, InitvbK, InitCVSizeAtAge)))
FittedRes=GetAgeAndLengthBasedCatchCurveResults(params, RefnceAges, MLL, GrowthCurveType, SelectivityType, ObsRetCatchFreqAtLen, ObsRetCatchFreqAtLengthAndAge,
lbnd, ubnd, midpt, SelectivityAtLen, DiscMort, MaxAge, NatMort, TimeStep)
PlotAgeLengthCatchCurve_Growth(params, RefnceAges, MLL, GrowthCurveType, SelectivityType, ObsRetCatchFreqAtLen, ObsRetCatchFreqAtLengthAndAge,
lbnd, ubnd, midpt, SelectivityAtLen, DiscMort, MaxAge, NatMort, TimeStep, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, xmax=40, xint=10,
ymax=1000, yint=200, PlotCLs=TRUE, FittedRes, nReps=200)
#' Get maximum and minimum x values and x interval
#'
#' Used for setting plot defaults
#'
#' @keywords internal
#'
#' @param x_data x axis data for plot
#'
#' @return list object with minimum and maximum x axis values and x axis interval
Get_xaxis_scale <- function(x_data) {
# modified from code provided by
# https://peltiertech.com/calculate-nice-axis-scales-in-excel-vba/
xmax_data = max(x_data)
xmin_data = min(x_data)
xpow = log10(xmax_data-xmin_data)
xint = 10 ^ (xpow-round(xpow,0))
if (xint>=0 & xint<2.5) xint = 0.2
if (xint>=2.5 & xint<5) xint = 0.5
if (xint>=5 & xint<7.5) xint = 1
if (xint>=7.5) xint = 2
xint = xint * 10^round(xpow,0) # major ticks
xmin = xint * round(xmin_data/xint,0)
xmax = xint * (round(xmax_data / xint,0) + 1)
results = list(xmin = xmin,
xmax = xmax,
xint = xint)
}
#' Get maximum and minimum y values and y interval
#'
#' Used for setting plot defaults
#'
#' @keywords internal
#'
#' @param y_data y axis data for plot
#'
#' @return list object with minimum and maximum y axis values and y axis interval
Get_yaxis_scale <- function(y_data) {
# modified from code provided by
# https://peltiertech.com/calculate-nice-axis-scales-in-excel-vba/
ymax_data = max(1.1 * y_data)
ymin_data = min(y_data)
ypow = log10(ymax_data-ymin_data)
yint = 10 ^ (ypow-round(ypow,0))
if (yint>=0 & yint<2.5) yint = 0.2
if (yint>=2.5 & yint<5) yint = 0.5
if (yint>=5 & yint<7.5) yint = 1
if (yint>=7.5) yint = 2
yint = yint * 10^round(ypow,0) # major ticks
ymin = yint * round(ymin_data/yint,0)
ymax = yint * (round(ymax_data / yint,0) + 1)
results = list(ymin = ymin,
ymax = ymax,
yint = yint)
}
#' @param ymin y axis minimum
#' @param ymax y axis maximum
#' @param yint y axis tick interval
#' @param cexval label size
#' @param cexaxisval axis size
#' @param lwdval line widths
#' @param lineval axis offset
#' @param lasval axis orientation
#'
#' @return adds axes to plots
AddAxesAndTickLabelsToPlot <- function(xmin, xmax, xint, ymin, ymax, yint, cexval, cexaxisval, lwdval, lineval, lasval) {
if (is.na(xmin)) xmin=0
if (is.na(ymin)) ymin=0
if (is.na(cexval)) cexval=1
if (is.na(cexaxisval)) cexaxisval=1
if (is.na(lwdval)) lwdval=1
if (is.na(lasval)) lasval=1
if (is.na(lineval)) lineval=0
axis(1, at = seq(xmin, xmax, xint), line = lineval, labels = F)
axis(2, at = seq(ymin, ymax, yint), line = lineval, labels = F)
axis(1, at = seq(xmin, xmax, xint), lwd=lwdval, labels=T, line=lineval, cex=cexval, cex.axis=cexaxisval, las=lasval)
axis(2, at = seq(ymin, ymax, yint), lwd=lwdval, labels=T, line=lineval, cex=cexval, cex.axis=cexaxisval, las=lasval)
}
# generate data for individual fish (age classes and mid points of length classes)
if (is.vector(ObsRetCatchFreqAtLen)) {
SampleSize = sum(ObsRetCatchFreqAtLen)
ObsAge = rep(NA, SampleSize)
ObsLenClRetCatchMidPt = rep(NA, SampleSize)
} else {
SampleSize_F = sum(ObsRetCatchFreqAtLen[1,])
SampleSize_M = sum(ObsRetCatchFreqAtLen[2,])
ObsAge_F = rep(NA, SampleSize_F)
ObsAge_M = rep(NA, SampleSize_M)
ObsLenClRetCatchMidPt_F = rep(NA, SampleSize_F)
ObsLenClRetCatchMidPt_M = rep(NA, SampleSize_M)
}
strt=1; fnsh=0; strtF=1; fnshF=0; strtM=1; fnshM=0
nLenCl = length(midpt)
MinAge = floor(TimeStep)
nAgeCl = length(MinAge:MaxAge)
DecAges = seq(TimeStep,MaxAge,TimeStep)
nTimeSteps = length(DecAges)
for (i in 1:nTimeSteps) {
for (j in 1:nLenCl) {
if (is.vector(ObsRetCatchFreqAtLen)) { # single sex
x=ObsRetCatchFreqAtLengthAndAge[i,j] # number of fish in current length and age class
if(x>0) {
fnsh=strt+x-1
ObsAge[strt:fnsh]=i*TimeStep
ObsLenClRetCatchMidPt[strt:fnsh]=midpt[j]
strt=strt+x
}
} else {
# females
x=ObsRetCatchFreqAtLengthAndAge[i,j,1] # number of females in current length and age class
if(x>0) {
fnshF=strtF+x-1
ObsAge_F[strtF:fnshF]=i*TimeStep
ObsLenClRetCatchMidPt_F[strtF:fnshF]=midpt[j]
strtF=strtF+x
}
# males
x=ObsRetCatchFreqAtLengthAndAge[i,j,2] # number of males in current length and age class
if(x>0) {
fnshM=strtM+x-1
ObsAge_M[strtM:fnshM]=i*TimeStep
ObsLenClRetCatchMidPt_M[strtM:fnshM]=midpt[j]
strtM=strtM+x
}
}
}
}
ObsAge_M
ObsAge
ObsLenClRetCatchMidPt
ObsRetCatchFreqAtLengthAndAge
ObsLenClRetCatchMidPt
ObsAge
library(L3Assess)
library(L3Assess)
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
# if installing from github
# library(devtools)
# devtools::install_github("SAlexHesp/WAFishBiologyRPackage", build_vignettes=TRUE, force=TRUE)
# devtools::install_github("SAlexHesp/L3AssessRPackage", build_vignettes=TRUE, force=TRUE)
rm(list=ls())
library(L3Assess)
# library(WAFishBiology)
# Simulate data
set.seed(123)
SampleSize=1000
MaxAge = 26
TimeStep = 1 # model timestep (e.g. 1 = annual, 1/12 = monthly)
MinAge = floor(TimeStep)
nAgeCl = length(MinAge:MaxAge)
nTimeSteps = length(seq(TimeStep,MaxAge,TimeStep))
NatMort = 4.22/MaxAge
FishMort = 0.2
MaxLen = 1200
LenInc = 20
MLL=NA # (minimum legal length) # retention set to 1 for all lengths if MLL set to NA and retention parameters not specified is knife-edged at MLL
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logist sel curve, 3=separate logist sel params, common growth
SelectivityAtLen = NA # selectivity vector
SelParams = c(300, 50) # L50, L95-L50 for gear selectivity
RetenParams = c(NA, NA) # L50, L95-L50 for retention
DiscMort = 0
# # single sex, von Bertalanffy
# GrowthCurveType = 1 # 1 = von Bertalanffy
# Linf = 800
# vbK = 0.2
# CVSizeAtAge = 0.05
# RefnceAges = NA
# GrowthParams = c(Linf, vbK, CVSizeAtAge)
# Res=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
#                          SelParams, RetenParams, SelectivityAtLen, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
# 2 sexes, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy
Linf = c(700,850)
vbK = c(0.25,0.2)
CVSizeAtAge = c(0.05,0.05)
RefnceAges = NA
GrowthParams = data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge)
Res=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
SelParams, RetenParams, SelectivityAtLen, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
lbnd=Res$lbnd
midpt=Res$midpt
ubnd=Res$ubnd
# get data - 1 sex (or combined sexes)
ObsRetCatchFreqAtLen = as.vector(Res$ObsRetCatchFreqAtLen) # 1 sex
ObsRetCatchFreqAtLengthAndAge = as.matrix(Res$ObsRetCatchFreqAtLengthAndDecAge) # 1 sex
# get data - 2 sexes
ObsRetCatchFreqAtLen <- data.frame(matrix(nrow = 2, ncol = length(midpt))) # 2 sex
colnames(ObsRetCatchFreqAtLen) <- midpt
ObsRetCatchFreqAtLen[1,] = Res$ObsRetCatchFreqAtLen_Fem
ObsRetCatchFreqAtLen[2,] = Res$ObsRetCatchFreqAtLen_Mal
ObsRetCatchFreqAtLengthAndAge = array(c(unlist(Res$ObsRetCatchFreqAtLengthAndDecAge_Fem), unlist(Res$ObsRetCatchFreqAtLengthAndDecAge_Mal)),
c(nTimeSteps, length(midpt), 2), dimnames=list(rownames(Res$ObsRetCatchFreqAtLengthAndDecAge_Fem),
colnames(Res$ObsRetCatchFreqAtLengthAndDecAge_Fem)))
sum(ObsRetCatchFreqAtLengthAndAge)
# # get params - 1 sex
# InitFishMort = 0.3 # specify starting parameters
# InitL50 = 320
# InitDelta = 50 # L95-L50
# InitLinf = 800
# InitvbK = 0.2
# InitCVSizeAtAge = 0.05
# InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform (so F is always between 0 and 1)
# params = c(InitFishMort_logit, log(c(InitL50, InitDelta, InitLinf, InitvbK, InitCVSizeAtAge)))
# get params - 2 sexes
InitFishMort = 0.3 # specify starting parameters
InitL50 = 320
InitDelta = 50 # L95-L50
InitLinf = c(800,800)
InitvbK = c(0.25,0.25)
InitCVSizeAtAge = 0.05
InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform (so F is always between 0 and 1)
params = c(InitFishMort_logit, log(c(InitL50, InitDelta, InitLinf, InitvbK, InitCVSizeAtAge)))
FittedRes=GetAgeAndLengthBasedCatchCurveResults(params, RefnceAges, MLL, GrowthCurveType, SelectivityType, ObsRetCatchFreqAtLen, ObsRetCatchFreqAtLengthAndAge,
lbnd, ubnd, midpt, SelectivityAtLen, DiscMort, MaxAge, NatMort, TimeStep)
#
# # Example with specified selectivity vector
# # Simulate data
# SelectivityType=1 # 1=selectivity inputted as vector, 2=asymptotic logist sel curve, 3=separate logist sel params, common growth
# SelectivityAtLen = 1 / (1 + exp(-log(19)*(midpt-400)/(500-400)))
# SelParams = c(NA, NA) # L50, L95-L50 for gear selectivity
# RetenParams = c(NA, NA) # L50, L95-L50 for retention
# DiscMort = 0
# # single sex, von Bertalanffy
# GrowthCurveType = 1 # 1 = von Bertalanffy
# Linf = 800
# vbK = 0.2
# CVSizeAtAge = 0.05
# GrowthParams = c(Linf, vbK, CVSizeAtAge)
# RefnceAges = NA
# Res=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
#                          SelParams, RetenParams, SelectivityAtLen, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
# lbnd=Res$lbnd
# midpt=Res$midpt
# ubnd=Res$ubnd
# # get data - 1 sex (or combined sexes)
# ObsRetCatchFreqAtLen = as.vector(Res$ObsRetCatchFreqAtLen) # 1 sex
# ObsRetCatchFreqAtLengthAndAge = as.matrix(Res$ObsRetCatchFreqAtLengthAndDecAge) # 1 sex
# # get params - 1 sex
# InitFishMort = 0.3 # specify starting parameters
# InitLinf = 800
# InitvbK = 0.2
# InitCVSizeAtAge = 0.05
# InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform (so F is always between 0 and 1)
# params = c(InitFishMort_logit, log(c(InitLinf, InitvbK, InitCVSizeAtAge)))
# FittedRes=GetAgeAndLengthBasedCatchCurveResults(params, RefnceAges, MLL, GrowthCurveType, SelectivityType, ObsRetCatchFreqAtLen, ObsRetCatchFreqAtLengthAndAge,
#                                                 lbnd, ubnd, midpt, SelectivityAtLen, DiscMort, MaxAge, NatMort, TimeStep)
PlotAgeLengthCatchCurve_Growth(params, RefnceAges, MLL, GrowthCurveType, SelectivityType, ObsRetCatchFreqAtLen, ObsRetCatchFreqAtLengthAndAge,
lbnd, ubnd, midpt, SelectivityAtLen, DiscMort, MaxAge, NatMort, TimeStep, MainLabel="Females",
xaxis_lab=NA, yaxis_lab=NA, xmax=40, xint=10,
ymax=1000, yint=200, PlotCLs=TRUE, FittedRes, nReps=200, ShowLegend=TRUE)
#' Get maximum and minimum x values and x interval
#'
#' Used for setting plot defaults
#'
#' @keywords internal
#'
#' @param x_data x axis data for plot
#'
#' @return list object with minimum and maximum x axis values and x axis interval
Get_xaxis_scale <- function(x_data) {
# modified from code provided by
# https://peltiertech.com/calculate-nice-axis-scales-in-excel-vba/
xmax_data = max(x_data)
xmin_data = min(x_data)
xpow = log10(xmax_data-xmin_data)
xint = 10 ^ (xpow-round(xpow,0))
if (xint>=0 & xint<2.5) xint = 0.2
if (xint>=2.5 & xint<5) xint = 0.5
if (xint>=5 & xint<7.5) xint = 1
if (xint>=7.5) xint = 2
xint = xint * 10^round(xpow,0) # major ticks
xmin = xint * round(xmin_data/xint,0)
xmax = xint * (round(xmax_data / xint,0) + 1)
results = list(xmin = xmin,
xmax = xmax,
xint = xint)
}
#' Get maximum and minimum y values and y interval
#'
#' Used for setting plot defaults
#'
#' @keywords internal
#'
#' @param y_data y axis data for plot
#'
#' @return list object with minimum and maximum y axis values and y axis interval
Get_yaxis_scale <- function(y_data) {
# modified from code provided by
# https://peltiertech.com/calculate-nice-axis-scales-in-excel-vba/
ymax_data = max(1.1 * y_data)
ymin_data = min(y_data)
ypow = log10(ymax_data-ymin_data)
yint = 10 ^ (ypow-round(ypow,0))
if (yint>=0 & yint<2.5) yint = 0.2
if (yint>=2.5 & yint<5) yint = 0.5
if (yint>=5 & yint<7.5) yint = 1
if (yint>=7.5) yint = 2
yint = yint * 10^round(ypow,0) # major ticks
ymin = yint * round(ymin_data/yint,0)
ymax = yint * (round(ymax_data / yint,0) + 1)
results = list(ymin = ymin,
ymax = ymax,
yint = yint)
}
#' @param ymin y axis minimum
#' @param ymax y axis maximum
#' @param yint y axis tick interval
#' @param cexval label size
#' @param cexaxisval axis size
#' @param lwdval line widths
#' @param lineval axis offset
#' @param lasval axis orientation
#'
#' @return adds axes to plots
AddAxesAndTickLabelsToPlot <- function(xmin, xmax, xint, ymin, ymax, yint, cexval, cexaxisval, lwdval, lineval, lasval) {
if (is.na(xmin)) xmin=0
if (is.na(ymin)) ymin=0
if (is.na(cexval)) cexval=1
if (is.na(cexaxisval)) cexaxisval=1
if (is.na(lwdval)) lwdval=1
if (is.na(lasval)) lasval=1
if (is.na(lineval)) lineval=0
axis(1, at = seq(xmin, xmax, xint), line = lineval, labels = F)
axis(2, at = seq(ymin, ymax, yint), line = lineval, labels = F)
axis(1, at = seq(xmin, xmax, xint), lwd=lwdval, labels=T, line=lineval, cex=cexval, cex.axis=cexaxisval, las=lasval)
axis(2, at = seq(ymin, ymax, yint), lwd=lwdval, labels=T, line=lineval, cex=cexval, cex.axis=cexaxisval, las=lasval)
}
