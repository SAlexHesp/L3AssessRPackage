FittedRes$EstEquilRelFemSpBiom
FittedRes$Low95EquilRelFemSpBiom
FittedRes$Upp95EquilRelFemSpBiom
FittedRes$EstMalSPR
PREst = GetPerRecruitResults_AB(MaxModelAge, TimeStep, Linf, vbK, tzero, EstLenAtAge,
lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type, EstWtAtAge, ReprodScale,
ReprodPattern, InitRatioFem, FinalSex_Pmax, FinalSex_A50, FinalSex_A95,
mat_A50, mat_A95, EstMatAtAge, sel_A50, sel_A95, EstSelAtAge,
ret_Pmax, ret_A50, ret_A95, EstRetenAtAge, DiscMort, Steepness,
SRrel_Type, NatMort, Current_F)
PREst$Mal_SPR
PREst$CombSex_SPR
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
rm(list=ls())
# library(WAFishBiology)
library(L3Assess)
# Simulate data
SampleSize=5000 # sample size for retained catches (and same number for released fish, if an MLL is specified)
set.seed(123)
MaxAge = 30
TimeStep = 0.5 # model timestep (e.g. 1 = annual, 1/12 = monthly)
NatMort = 4.22/MaxAge
FishMort = 0.2
MaxLen = 1500
LenInc = 20
MLL=NA # (minimum legal length) # retention set to 1 for all lengths if MLL set to NA and retention parameters not specified
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
SelectivityVec = NA # selectivity vector
SelParams = c(400, 20) # L50, L95-L50 for gear selectivity
RetenParams = c(NA, NA) # L50, L95-L50 for retention
DiscMort = 0 # proportion of fish that die due to natural mortality
# single sex, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf = 800
vbK = 0.2
CVSizeAtAge = 0.05
GrowthParams = c(Linf, vbK, CVSizeAtAge)
RefnceAges = NA
# 2 sexes, von Bertalanffy
# GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
# Linf = c(700,850)
# vbK = c(0.3,0.2)
# CVSizeAtAge = c(0.08,0.08)
# GrowthParams = data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge)
# RefnceAges = NA
# 1 sex, Schnute
# GrowthCurveType = 2 # 1 = von Bertalanffy, 2 = Schnute
# t1 = 1 # growth - Schnute
# t2 = 10 # growth - Schnute
# y1 = 400 # growth - Schnute
# y2 = 1000 # growth - Schnute
# a = 0.1 # growth - Schnute
# b = 2.0 # growth - Schnute
# GrowthParams = c(y1, y2, a, b)
# RefnceAges = c(t1,t2)
# CVSizeAtAge = 0.08
# # 2 sexes, Schnute
# GrowthCurveType = 2 # 1 = von Bertalanffy, 2 = Schnute
# t1 = c(1,1) # growth - Schnute
# t2 = c(10,10) # growth - Schnute
# y1 = c(435.3,400.3) # growth - Schnute
# y2 = c(1089.1,1034.5) # growth - Schnute
# a = c(0.044,0.136) # growth - Schnute
# b = c(2.748,1.971) # growth - Schnute
# CVSizeAtAge = c(0.08, 0.08)
# GrowthParams = data.frame(y1=y1, y2=y2, a=a, b=b)
# RefnceAges = data.frame(t1=t1,t2=t2)
Res=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
SelParams, RetenParams, SelectivityVec, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
ObsRetCatchFreqAtLen = Res$ObsRetCatchFreqAtLen
ObsDiscCatchFreqAtLen = NA # (or set to Res$ObsRetCatchFreqAtLen)
PropReleased = NA # proportion of fish released, vector including mean and sd (option probably now obselete)
midpt=Res$midpt
lbnd=Res$lbnd
ubnd=Res$ubnd
InitFishMort = 0.25 # specify starting parameters
InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform
InitL50 = 500
InitDelta = 100
params = c(InitFishMort_logit, log(InitL50), log(InitDelta))
Res=GetLengthBasedCatchCurveResults(params, GrowthCurveType, GrowthParams, RefnceAges, MLL, SelectivityType, ObsRetCatchFreqAtLen,
lbnd, ubnd, midpt, SelectivityVec, PropReleased, ObsDiscCatchFreqAtLen, DiscMort, CVSizeAtAge, MaxAge, NatMort, TimeStep)
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
rm(list=ls())
# library(WAFishBiology)
library(L3Assess)
# read in and check data
# dat = read.csv("mackereldataAGELBCC.csv") ## ALL DATA
dat = read.csv("mackereldataAGELBCC-Pilbara.csv") ## Pilbara only
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
rm(list=ls())
library(WAFishBiology)
library(L3Assess)
t1=0; t2=15
y1=0; y2=1200; a=0.1; b=3
Ages = seq(0,22,1)
EstFemLenAtAge = rep(0,22)
k=0
for (i in Ages) {
k=k+1
Age = i
EstFemLenAtAge[k] = SchnuteGrowthfunction(Age, t1, t2, y1, y2, a, b)
}
plot(Ages,EstFemLenAtAge)
# read in and check data
# dat = read.csv("mackereldataAGELBCC.csv") ## ALL DATA
dat = read.csv("mackereldataAGELBCC-Pilbara.csv") ## Pilbara only
#'
#' @keywords internal
#' @param params estimated model parameters (varies, depending on growth curve type, selectivity type and catch curve type)
#' @param GrowthParams c(Linf, vbK, CVSizeAtAge) single sex von Bertalanffy, or data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge),
#' both sexes von Bertalanffy, or c(y1, y2, a, b) single sex Schnute, or data.frame(y1=y1, y2=y2, a=a, b=b), both sexes Schnute
#' @param RefnceAges reference ages for Schnute function (set to NA if growth based on another function)
#' @param CatchCurveType 1=length based, 2=age and length based
#' @param SelectivityType 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
#'
#' @return values of growth parameters given specified catch curve, growth and selectivity model option
GetSelectParams_AgeAndLengthBasedCatchCurvesCalcs <- function(params, GrowthParams, RefnceAges, CatchCurveType, SelectivityType) {
# get selectivity parameters for length based catch curve model
L50 = NA
L95 = NA
L50_ret = NA
L95_ret = NA
if (SelectivityType == 2) { # logistic selectivity
L50 = exp(params[2])
L95 = L50 + exp(params[3])
if (CatchCurveType==1) { # length-based catch curve
if (length(params)==5) { # estimating logistic selectiviy and logistic retention (using discard and retained catch data)
L50_ret = exp(params[4])
L95_ret = L50_ret + exp(params[5])
}
}
}
result = list(L50 = L50,
L95 = L95,
L50_ret = L50_ret,
L95_ret = L95_ret)
return(result)
}
# get parameters for specified growth curve and catch curve type
res = GetSelectParams_AgeAndLengthBasedCatchCurvesCalcs(params, GrowthParams, RefnceAges, CatchCurveType, SelectivityType)
SelectivityType
SelectivityType = 1
# get parameters for specified growth curve and catch curve type
res = GetSelectParams_AgeAndLengthBasedCatchCurvesCalcs(params, GrowthParams, RefnceAges, CatchCurveType, SelectivityType)
res
#'
#' Get growth parameter values for age and length based catch curve given specified catch curve, growth and selectivity model options
#'
#' @keywords internal
#' @param params estimated model parameters (varies, depending on growth curve type, selectivity type and catch curve type)
#' @param GrowthCurveType 1=von Bertalanffy, 2=Schnute
#' @param SelectivityType 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
#'
#' @return GrowthParams c(Linf, vbK, CVSizeAtAge) single sex von Bertalanffy, or data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge),
#' both sexes von Bertalanffy, or c(y1, y2, a, b) single sex Schnute, or data.frame(y1=y1, y2=y2, a=a, b=b), both sexes Schnute
GetGrowthParams_AgeAndLengthBasedCatchCurvesCalcs <- function(params, GrowthCurveType, SelectivityType) {
#'
#' Get growth parameter values for age and length based catch curve given specified catch curve, growth and selectivity model options
#'
#' @keywords internal
#' @param params estimated model parameters (varies, depending on growth curve type, selectivity type and catch curve type)
#' @param GrowthCurveType 1=von Bertalanffy, 2=Schnute
#' @param SelectivityType 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
#'
#' @return GrowthParams c(Linf, vbK, CVSizeAtAge) single sex von Bertalanffy, or data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge),
#' both sexes von Bertalanffy, or c(y1, y2, a, b) single sex Schnute, or data.frame(y1=y1, y2=y2, a=a, b=b), both sexes Schnute
GetGrowthParams_AgeAndLengthBasedCatchCurvesCalcs <- function(params, GrowthCurveType, SelectivityType) {
GetGrowthParams_AgeAndLengthBasedCatchCurvesCalcs <- function(params, GrowthCurveType, SelectivityType) {
# get selectivity parameters for length based catch curve model
# Determine model type, depending on growth curve type and number of sexes
if (GrowthCurveType == 1) { # von Bertalanffy
if (SelectivityType==1) {
if (length(params==4) { # single sex, selectivity vector
#'
#' Get growth parameter values for age and length based catch curve given specified catch curve, growth and selectivity model options
#'
#' @keywords internal
#' @param params estimated model parameters (varies, depending on growth curve type, selectivity type and catch curve type)
#' @param GrowthCurveType 1=von Bertalanffy, 2=Schnute
#' @param SelectivityType 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
#'
#' @return GrowthParams c(Linf, vbK, CVSizeAtAge) single sex von Bertalanffy, or data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge),
#' both sexes von Bertalanffy, or c(y1, y2, a, b) single sex Schnute, or data.frame(y1=y1, y2=y2, a=a, b=b), both sexes Schnute
GetGrowthParams_AgeAndLengthBasedCatchCurvesCalcs <- function(params, GrowthCurveType, SelectivityType) {
# Determine model type, depending on growth curve type and number of sexes
if (SelectivityType==1) {
Linf = exp(params[2])
vbK = exp(params[3])
GrowthParams = c(Linf,vbK)
GrowthModelType = 1
}
Linf = exp(params[2:3])
vbK = exp(params[4:5])
params
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
rm(list=ls())
library(WAFishBiology)
library(L3Assess)
t1=0; t2=15
y1=0; y2=1200; a=0.1; b=3
Ages = seq(0,22,1)
EstFemLenAtAge = rep(0,22)
k=0
for (i in Ages) {
k=k+1
Age = i
EstFemLenAtAge[k] = SchnuteGrowthfunction(Age, t1, t2, y1, y2, a, b)
}
plot(Ages,EstFemLenAtAge)
# read in and check data
# dat = read.csv("mackereldataAGELBCC.csv") ## ALL DATA
dat = read.csv("mackereldataAGELBCC-Pilbara.csv") ## Pilbara only
InitLinf = 1200
InitvbK = 0.2
InitCVSizeAtAge = 0.05
params = c(InitFishMort_logit, log(c(InitLinf, InitvbK, InitCVSizeAtAge)))
InitFishMort = 0.2 # specify starting parameters
InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform (so F is always between 0 and 1)
# Ref_ages = c(0.5,15)
# Growth_params = c(100,400,0.02,3)
InitLinf = 1200
InitvbK = 0.2
InitCVSizeAtAge = 0.05
params = c(InitFishMort_logit, log(c(InitLinf, InitvbK, InitCVSizeAtAge)))
t1=0; t2=15
y1=0; y2=1200; a=0.1; b=3
params = c(InitFishMort_logit, log(c(y2, a, b, InitCVSizeAtAge)))
RefnceAges = c(0,15)
SelectivityType = 1
# get selectivity parameters for length based catch curve model
# Determine model type, depending on growth curve type and number of sexes
if (GrowthCurveType == 1) { # von Bertalanffy
if (length(params==4) { # single sex, selectivity vector
vbK = exp(params[3])
SelectivityType
# Determine model type, depending on growth curve type and number of sexes
if (GrowthCurveType == 1) { # von Bertalanffy
if (SelectivityType == 1) {
if (length(params==4)) { # single sex, selectivity vector
Linf = exp(params[2])
vbK = exp(params[3])
GrowthParams = c(Linf,vbK)
GrowthModelType = 1
}
if (length(params==6)) { # 2 sexes, selectivity vector
Linf = exp(params[2:3])
vbK = exp(params[4:5])
GrowthParams = data.frame(Linf=Linf,vbK=vbK)
GrowthModelType = 2
}
}
if (SelectivityType==2) {
if (length(params==6)) { # single sex, logistic selectivity
Linf = exp(params[4])
vbK = exp(params[5])
GrowthParams = c(Linf,vbK)
GrowthModelType = 1
}
if (length(params==8)) { # 2 sexes, logistic selectivity
Linf = exp(params[4:5])
vbK = exp(params[6:7])
GrowthParams = data.frame(Linf=Linf,vbK=vbK)
GrowthModelType = 2
}
}
} # von Bertalanffy
if (GrowthCurveType == 2) { # Schnute
y1 = 0
if (SelectivityType==1) {
if (length(params==5)) { # single sex, selectivity vector
y2 = exp(params[2])
a = exp(params[3])
b = exp(params[4])
GrowthParams = c(y1,y2,a,b)
GrowthModelType = 3
}
if (length(params==8)) { # 2 sexes, selectivity vector
y2 = exp(params[2:3])
a = exp(params[4:5])
b = exp(params[6:7])
GrowthParams = data.frame(y1=y1,y2=y2,a=a,b=b)
GrowthModelType = 4
}
}
if (SelectivityType==2) {
if (length(params==7)) { # single sex, logistic selectivity
y2 = exp(params[4])
a = exp(params[5])
b = exp(params[6])
GrowthParams = c(y1,y2,a,b)
GrowthModelType = 3
}
if (length(params==9)) { # single sex, logistic selectivity
y2 = exp(params[4:5])
a = exp(params[6:7])
b = exp(params[8:9])
GrowthParams = data.frame(y1=y1,y2=y2,a=a,b=b)
GrowthModelType = 4
}
}
} # Schnute
GrowthCurveType=1
#'
#' Get growth parameter values for age and length based catch curve given specified catch curve, growth and selectivity model options
#'
#' @keywords internal
#' @param params estimated model parameters (varies, depending on growth curve type, selectivity type and catch curve type)
#' @param GrowthCurveType 1=von Bertalanffy, 2=Schnute
#' @param SelectivityType 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
#'
#' @return GrowthParams c(Linf, vbK, CVSizeAtAge) single sex von Bertalanffy, or data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge),
#' both sexes von Bertalanffy, or c(y1, y2, a, b) single sex Schnute, or data.frame(y1=y1, y2=y2, a=a, b=b), both sexes Schnute
GetGrowthParams_AgeAndLengthBasedCatchCurvesCalcs <- function(params, GrowthCurveType, SelectivityType) {
# get selectivity parameters for length based catch curve model
# Determine model type, depending on growth curve type and number of sexes
if (GrowthCurveType == 1) { # von Bertalanffy
if (SelectivityType == 1) {
if (length(params==4)) { # single sex, selectivity vector
Linf = exp(params[2])
vbK = exp(params[3])
GrowthParams = c(Linf,vbK)
GrowthModelType = 1
}
if (length(params==6)) { # 2 sexes, selectivity vector
Linf = exp(params[2:3])
vbK = exp(params[4:5])
GrowthParams = data.frame(Linf=Linf,vbK=vbK)
GrowthModelType = 2
}
}
if (SelectivityType==2) {
if (length(params==6)) { # single sex, logistic selectivity
Linf = exp(params[4])
vbK = exp(params[5])
GrowthParams = c(Linf,vbK)
GrowthModelType = 1
}
if (length(params==8)) { # 2 sexes, logistic selectivity
Linf = exp(params[4:5])
vbK = exp(params[6:7])
GrowthParams = data.frame(Linf=Linf,vbK=vbK)
GrowthModelType = 2
}
}
} # von Bertalanffy
if (GrowthCurveType == 2) { # Schnute
y1 = 0
if (SelectivityType==1) {
if (length(params==5)) { # single sex, selectivity vector
y2 = exp(params[2])
a = exp(params[3])
b = exp(params[4])
GrowthParams = c(y1,y2,a,b)
GrowthModelType = 3
}
if (length(params==8)) { # 2 sexes, selectivity vector
y2 = exp(params[2:3])
a = exp(params[4:5])
b = exp(params[6:7])
GrowthParams = data.frame(y1=y1,y2=y2,a=a,b=b)
GrowthModelType = 4
}
}
if (SelectivityType==2) {
if (length(params==7)) { # single sex, logistic selectivity
y2 = exp(params[4])
a = exp(params[5])
b = exp(params[6])
GrowthParams = c(y1,y2,a,b)
GrowthModelType = 3
}
if (length(params==9)) { # single sex, logistic selectivity
y2 = exp(params[4:5])
a = exp(params[6:7])
b = exp(params[8:9])
GrowthParams = data.frame(y1=y1,y2=y2,a=a,b=b)
GrowthModelType = 4
}
}
} # Schnute
result = list(GrowthParams = GrowthParams,
GrowthModelType = GrowthModelType)
return(result)
}
# get growth parameters, given specified type of growth curve, selectivity type, and number of sexes
Res=GetGrowthParams_AgeAndLengthBasedCatchCurvesCalcs(params, GrowthCurveType, SelectivityType)
Res
GrowthParams = Res$GrowthParams
GrowthModelType = Res$GrowthModelType
# get key inputs for length transition matrices
nLenCl = length(midpt)
Res = GetGrowthInputsForLengthTransitionMatrices(MaxAge, TimeStep, nLenCl, midpt, GrowthCurveType, GrowthParams, RefnceAges, SelectivityType)
MaxAge = 14
NatMort = 0.19
MaxLen = 1500
LenInc = 50
lbnd = seq(0,MaxLen - LenInc, LenInc)
ubnd = lbnd + LenInc
midpt = lbnd + (LenInc/2)
#' @param TimeStep model timestep (e.g. 1 = annual, 1/12 = monthly)
#' @param nLenCl number of length classes
#' @param midpt mid points of length classes
#' @param GrowthCurveType 1=von Bertalanffy, 2=Schnute
#' @param GrowthParams growth parameters (used for GrowthModelType 2 or 4)
#' @param RefnceAges Schnute reference ages (used for GrowthModelType 4)
#' @param SelectivityType 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
#'
#' @return mean size at age from growth curve (MeanSizeAtAge), estimated length after one year for each length class
#' mid point, given growth curve (MeanEndingLength) and associated change in length after one year of growth (TimestepGrowthSizeInc)
GetGrowthInputsForLengthTransitionMatrices <- function(MaxAge, TimeStep, nLenCl, midpt, GrowthCurveType, GrowthParams, RefnceAges, SelectivityType) {
# growth calcs for single sex catch curve (or using combined growth curve for both sexes)
Ages = seq(TimeStep,MaxAge,TimeStep)
t1=NA; t2=NA; y1=NA; y2=NA; a=NA; b=NA
if (GrowthModelType == 1) { # von Bertalanffy, single sex
Linf = GrowthParams[1]
vbK = GrowthParams[2]
MeanSizeAtAge = Linf * (1 - exp (-vbK * Ages))
MeanEndingLength = midpt + (Linf - midpt) * (1 - exp(-vbK*TimeStep))
TimestepGrowthSizeInc = MeanEndingLength-midpt # amount of annual growth with respect to initial length
}
if (GrowthModelType == 2) { # von Bertalanffy, separate sex
Linf = GrowthParams[,1]
vbK = GrowthParams[,2]
MeanSizeAtAge <- data.frame(matrix(nrow = 2, ncol = length(Ages)))
colnames(MeanSizeAtAge) <- Ages
MeanEndingLength <- data.frame(matrix(nrow = 2, ncol = nLenCl))
colnames(MeanEndingLength) <- midpt
TimestepGrowthSizeInc = MeanEndingLength
RecLenDist = MeanEndingLength
for (i in 1:2) {
MeanSizeAtAge[i,] = Linf[i] * (1 - exp (-vbK[i] * Ages))
MeanEndingLength[i,] = midpt + (Linf[i] - midpt) * (1 - exp(-vbK[i]*TimeStep))
TimestepGrowthSizeInc[i,] = MeanEndingLength[i,] - midpt # amount of annual growth with respect to initial length
}
}
if (GrowthModelType == 3) { # Schnute, single sex
MeanSizeAtAge = rep(0,length(Ages))
k = 0
for (t in Ages) {
k = k + 1
t1 = RefnceAges[1]
t2 = RefnceAges[2]
y1 = GrowthParams[1]
y2 = GrowthParams[2]
a = GrowthParams[3]
b = GrowthParams[4]
MeanSizeAtAge[k] = SchnuteGrowthfunction(t, t1, t2, y1, y2, a, b)
}
RefnceAgesForSex = RefnceAges
GrowthParamsForSex = GrowthParams
MeanEndingLength = CalcLengthAfterGrowthForTimetep(GrowthCurveType=2, TimeStep, GrowthParamsForSex, RefnceAgesForSex, midpt, MaxAge)
TimestepGrowthSizeInc = MeanEndingLength-midpt # amount of annual growth with respect to initial length
}
if (GrowthModelType == 4) { # Schnute, separate sex
MeanSizeAtAge <- data.frame(matrix(nrow = 2, ncol = length(Ages)))
colnames(MeanSizeAtAge) <- Ages
MeanEndingLength <- data.frame(matrix(nrow = 2, ncol = nLenCl))
colnames(MeanEndingLength) <- midpt
TimestepGrowthSizeInc = MeanEndingLength
RecLenDist = MeanEndingLength
for (i in 1:2) {
t1=RefnceAges[i,1]
t2=RefnceAges[i,2]
y1=GrowthParams[i,1]
y2=GrowthParams[i,2]
a=GrowthParams[i,3]
b=GrowthParams[i,4]
k = 0
for (t in Ages) {
k = k + 1
MeanSizeAtAge[i,k] =  SchnuteGrowthfunction(t, t1, t2, y1, y2, a, b)
}
GrowthParamsForSex = c(y1, y2, a, b)
RefnceAgesForSex = c(t1, t2)
MeanEndingLength[i,] = CalcLengthAfterGrowthForTimetep(GrowthCurveType=2, TimeStep, GrowthParamsForSex, RefnceAgesForSex, midpt, MaxAge)
TimestepGrowthSizeInc[i,] = MeanEndingLength[i,] - midpt
}
}
result = list(GrowthModelType = GrowthModelType,
Ages = Ages,
MeanSizeAtAge = MeanSizeAtAge,
MeanEndingLength = MeanEndingLength,
TimestepGrowthSizeInc = TimestepGrowthSizeInc,
t1=t1,
t2=t2,
y1=y1,
y2=y2,
a=a,
b=b)
return(result)
}
# get key inputs for length transition matrices
nLenCl = length(midpt)
Res = GetGrowthInputsForLengthTransitionMatrices(MaxAge, TimeStep, nLenCl, midpt, GrowthCurveType, GrowthParams, RefnceAges, SelectivityType)
SelectivityVec=rep(0,length(midpt))
SelectivityVec[which(midpt>900)]=1
CatchCurveType=2 # age and length based
GrowthCurveType=1
SelectivityType=1 # 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
MLL = NA
DiscMort = 0.5
TimeStep= 1
# get key inputs for length transition matrices
nLenCl = length(midpt)
Res = GetGrowthInputsForLengthTransitionMatrices(MaxAge, TimeStep, nLenCl, midpt, GrowthCurveType, GrowthParams, RefnceAges, SelectivityType)
GrowthModelType = Res$GrowthModelType
Res
