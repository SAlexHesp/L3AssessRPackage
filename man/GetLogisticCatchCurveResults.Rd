% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/L3Analyses.R
\name{GetLogisticCatchCurveResults}
\alias{GetLogisticCatchCurveResults}
\title{Get statistical outputs from a fitted catch curve with age-based, logistic selectivity}
\usage{
GetLogisticCatchCurveResults(params, NatMort, Ages, ObsAgeFreq)
}
\arguments{
\item{params}{model parameters log(c(FMort, SelA50, SelDelta) for multinomial NLL or
log(c(FMort, SelA50, SelDelta, theta) for Dirichlet multinomial NLL}

\item{NatMort}{natural mortality}

\item{Ages}{ages in observed data}

\item{ObsAgeFreq}{observed age frequency data}
}
\value{
negative log-likelihood (nll), nlminb convergence diagnostic (convergence)
sample size (SampleSize), parameter estimates with lower and upper 95 percent
confidence limits (ParamEst), point estimates for parameters estimated in log space (Estlnparams),
variance-covariance matrix for estimated parameters (vcov.Params), parameter correlation matrix (cor.Params),
standard errors for estimated parameters (lnEstFMort_se, lnEstSelA50_se, lnEstFSelA95_se), selectivity at age (SelAtAge), fishing
mortality at age (FAtAge), estimated frequencies at age with associated 95 percent confidence limits
(EstFreq, EstFreq_Zlow, EstFreq_Zup), random values of parameters in log space from parametric resampling,
using rmultinom function (lnparams.sims), and associated median and lower 2.5 and upper 97.5 percentiles
of estimates for frequency at age (EstFreq.sim), selectivity parameters in normal space (SelA50.sim, SelA95.sim),
fishing mortality (FMort.sim) and total mortality (EstZMort.sim), estimated parameters from saved par
object (Estparams), Dirichlet multinomial effective sample size estimate (EffSampSize), if using this
objective function
}
\description{
This function fits a catch curve with an asymptotic, age-based logistic selectivity curve,
to a sample of fish age frequency data, by minimising either a multinomial or Dirichlet
multinomial the negative log-likelihood associated with the parameters and data, using nlminb.
It provides various statistical outputs including convergence statistics, parameter estimates
and associated 95 percent confidence limits and associated variance-covariance matrix, calculated
using the MASS package
}
\examples{
# simulate data
set.seed(123)
MinAge = 1
MaxAge = 40
Ages = MinAge:MaxAge
NatMort <- exp(1.46 - (1.01 * (log(MaxAge)))) # i.e. Hoenig's (1983) eqn for fish
FMort = 0.1
ZMort = FMort + NatMort
SelA50 = 6
SelA95 = 8
SampleSize = 1000 # required sample size. For 2 sex model, same sample size generated for each sex.
Res=SimAgeFreqData(SampleSize, MinAge, MaxAge, SelA50, SelA95, NatMort, FMort)
ObsAgeFreq = Res$CatchSample
# fit model
Init_FMort = 0.2
Init_SelA50 = 3
Init_SelDelta = 2
params = log(c(Init_FMort, Init_SelA50, Init_SelDelta))
res=GetLogisticCatchCurveResults(params, NatMort, Ages, ObsAgeFreq)
# fit logistic catch curve model using Dirichlet multinomial likelihood
# get expected catch proportions at age, for simulating data
MinAge = 1
MaxAge = 40
Ages = MinAge:MaxAge
NatMort <- exp(1.46 - (1.01 * (log(MaxAge)))) # i.e. Hoenig's (1983) eqn for fish
FMort = 0.1
SelA50 = 5
SelA95 = 7
SelAtAge = rep(0, length(Ages))
N = rep(0, length(Ages))
SelAtAge = 1/(1 + exp(-log(19) * (Ages - SelA50)/(SelA95 - SelA50)))
FAtAge = SelAtAge * FMort
ZAtAge = NatMort + FAtAge
k = 1
N[1] = 1
for (i in seq(MinAge + 1, MaxAge, 1)) {
  k = k + 1
  if (i < MaxAge) {
    N[k] = N[k-1] * exp(-ZAtAge[k-1])
  }
  else {
    N[k] = N[k-1] * exp(-ZAtAge[k-1])/(1 - exp(-ZAtAge[k]))
  }
}
CatchAtAge = N * (FAtAge/ZAtAge) * (1 - exp(-ZAtAge))
PropAtAge = CatchAtAge/sum(CatchAtAge)
library(dirmult)
# Simulate data from a Dirichlet multinomial distribution
# J = number of fish sampling events
# K = number of age classes
# n = number of fish sampled from each sampling event
# pi = expected proportion at age
# theta = amount of autocorrelation between ages of fish within sampling events
set.seed(123)
theta_val = 0.3
simDat = simPop(J=50, K=nAges, n=10, pi=PropAtAge, theta=theta_val)
simAges = data.frame(simDat$data)
colnames(simAges)=Ages
simAgeFreq = colSums(simAges)
ObsAgeFreq = as.vector(simAgeFreq)
# fit catch curve
Init_FMort = 0.2
Init_SelA50 = 3
Init_SelDelta = 2
Init_theta = 0.5
Init_theta_logit = log(Init_theta/(1-Init_theta)) # logit transform (so theta is always between 0 and 1)
params = c(log(Init_FMort), log(Init_SelA50), log(Init_SelDelta), Init_theta_logit)
res=GetLogisticCatchCurveResults(params, NatMort, Ages, ObsAgeFreq)
}
