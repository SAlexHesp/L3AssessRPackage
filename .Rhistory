library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
MaxModelAge <- 30 # maximum age considered by model, years
TimeStep <- 1 # Model time step (y) (for shorter-lived species, might be appropriate to use a smaller time step)
MaxLen = 800
LenInc = 20
lbnd = seq(0,MaxLen - LenInc, LenInc)
ubnd = lbnd + LenInc
midpt = lbnd + (LenInc/2)
nLenCl = length(midpt)
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf <- c(550, 500) # mm - von Bertalanffy growth model parameters - Females, males
vbK <- c(0.2, 0.2) # year-1 - von Bertalanffy growth model parameters - Females, males
tzero <- c(0, 0) # years - von Bertalanffy growth model parameters - Females, males
GrowthParams = data.frame(Linf=Linf, vbK=vbK, tzero=tzero)
RefnceAges = NA
# GrowthParams c(Linf, vbK, tzero) single sex von Bertalanffy, or data.frame(Linf=Linf, vbK=vbK, tzero=tzero),
#' both sexes von Bertalanffy, or c(y1, y2, a, b) single sex Schnute, or data.frame(y1=y1, y2=y2, a=a, b=b), both sexes Schnute
CVSizeAtAge = c(0.05, 0.05)
lenwt_a <- 0.000005 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
ln_lenwt_a <- NA # for log-log relationship
lenwt_b <- 3 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
WLrel_Type <- 1 # 1=power, 2=log-log relationship
EstWtAtLen <- data.frame(EstFemWtAtLen=NA,
EstMalWtAtLen=NA) # weight at age (from age 0), inputted as values in data frame
ReprodScale <- 1 # 1=default (standard calculations for spawning biomass), 2=hyperallometric reproductive scaling with female mass (i.e. BOFFF effects)
ReprodPattern <- 1 # 1 = gonochoristic (separate sexes), 2 = protogynous (female to male sex change), 3 = protandrous (male to female sex change)
InitRatioFem <- 0.5 # Ratio of females to males at age zero
FinalSex_Pmax <- NA # Logistic sex change relationship parameters (max probability of final sex)
FinalSex_L50 <- NA # Logistic sex change relationship parameters (inflection point)
FinalSex_L95 <- NA # Logistic sex change relationship parameters (95% of max probability)
mat_L50 <- c(250, 250) # females, males - Logistic length (mm) at maturity relationship parameters
mat_L95 <- c(300, 300) # females, males - Logistic length (mm) at maturity relationship parameters
EstMatAtLen <- data.frame(EstFemMatAtLen=NA,
EstMalMatAtLen=NA) # maturity at age (from age 0), inputted as values in data frame
sel_L50 <- c(250, 250) # females, males - Logistic age selectivity relationship parameters
sel_L95 <- c(300, 300) # females, males - Logistic age selectivity relationship parameters
ret_Pmax <- c(1.0, 1.0) # maximum retention, values lower than 1 imply discarding of fish above MLL
ret_L50 <- c(250, 250) # females, males - Logistic age fish retention at age parameters
ret_L95 <- c(300, 300) # females, males - Logistic age fish retention at age parameters
DiscMort <- 0.25 # discard mortality (e.g. 50% released fish die = 0.5)
Steepness <- 0.75 # steepness parameter of the Beverton and Holt stock-recruitment relationship
SRrel_Type <- 1 # 1 = Beverton-Holt, 2=Ricker
NatMort = 0.2
RefPointPlotOpt <- 1 # 0=don't plot, 1=plot defaults, 2=plot BMSY ref points
Current_F = 0.2
PlotPerRecruit_Biom_no_err_LB(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type,
EstWtAtLen, ReprodScale, ReprodPattern, InitRatioFem, FinalSex_Pmax, FinalSex_L50,
FinalSex_L95, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, ret_Pmax,
ret_L50, ret_L95, DiscMort, Steepness, SRrel_Type, NatMort, RefPointPlotOpt, Current_F)
Steepness <- 0.75 # steepness parameter of the Beverton and Holt stock-recruitment relationship
Steepness_sd <- 0.025
NatMort <- 0.2 # natural mortality  (year-1)
NatMort_sd <- 0.025
Current_F <- 0.1 # estimate of fishing mortality, e.g. from catch curve analysis
Current_F_sd <- 0.005
RefPointPlotOpt <- 1 # 0=don't plot, 1=plot defaults, 2=plot BMSY ref points
nReps = 10 # number of resampling trials. Set to low number to test, then much higher for final analysis.
FittedRes=GetPerRecruitResults_LB_with_err(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type,
EstWtAtLen, ReprodScale, ReprodPattern, InitRatioFem, FinalSex_Pmax, FinalSex_L50,
FinalSex_L95, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, ret_Pmax,
ret_L50, ret_L95, DiscMort, Steepness, Steepness_sd, SRrel_Type, NatMort, NatMort_sd,
Current_F, Current_F_sd, nReps)
# Plot. Note, can skip above step and set FittedRes=NA (plot function will be slower
PlotPerRecruit_Biom_with_err_LB(MaxModelAge, TimeStep, Linf, vbK, tzero, EstLenAtAge,
lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type, EstWtAtAge, ReprodScale, ReprodPattern,
InitRatioFem, FinalSex_Pmax, FinalSex_A50, FinalSex_A95, mat_A50, mat_A95,
EstMatAtAge, sel_A50, sel_A95, EstSelAtAge, ret_Pmax, ret_A50, ret_A95,
EstRetenAtAge, DiscMort, Steepness, Steepness_sd, SRrel_Type, NatMort, NatMort_sd,
Current_F, Current_F_sd, RefPointPlotOpt, FittedRes, nReps, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, xmax=1, xint=NA, ymax=NA, yint=NA)
library(L3Assess)
MaxModelAge <- 30 # maximum age considered by model, years
TimeStep <- 1 # Model time step (y) (for shorter-lived species, might be appropriate to use a smaller time step)
MaxLen = 800
LenInc = 20
lbnd = seq(0,MaxLen - LenInc, LenInc)
ubnd = lbnd + LenInc
midpt = lbnd + (LenInc/2)
nLenCl = length(midpt)
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf <- c(550, 500) # mm - von Bertalanffy growth model parameters - Females, males
vbK <- c(0.2, 0.2) # year-1 - von Bertalanffy growth model parameters - Females, males
tzero <- c(0, 0) # years - von Bertalanffy growth model parameters - Females, males
GrowthParams = data.frame(Linf=Linf, vbK=vbK, tzero=tzero)
RefnceAges = NA
# GrowthParams c(Linf, vbK, tzero) single sex von Bertalanffy, or data.frame(Linf=Linf, vbK=vbK, tzero=tzero),
#' both sexes von Bertalanffy, or c(y1, y2, a, b) single sex Schnute, or data.frame(y1=y1, y2=y2, a=a, b=b), both sexes Schnute
CVSizeAtAge = c(0.05, 0.05)
lenwt_a <- 0.000005 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
ln_lenwt_a <- NA # for log-log relationship
lenwt_b <- 3 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
WLrel_Type <- 1 # 1=power, 2=log-log relationship
EstWtAtLen <- data.frame(EstFemWtAtLen=NA,
EstMalWtAtLen=NA) # weight at age (from age 0), inputted as values in data frame
ReprodScale <- 1 # 1=default (standard calculations for spawning biomass), 2=hyperallometric reproductive scaling with female mass (i.e. BOFFF effects)
ReprodPattern <- 1 # 1 = gonochoristic (separate sexes), 2 = protogynous (female to male sex change), 3 = protandrous (male to female sex change)
InitRatioFem <- 0.5 # Ratio of females to males at age zero
FinalSex_Pmax <- NA # Logistic sex change relationship parameters (max probability of final sex)
FinalSex_L50 <- NA # Logistic sex change relationship parameters (inflection point)
FinalSex_L95 <- NA # Logistic sex change relationship parameters (95% of max probability)
mat_L50 <- c(250, 250) # females, males - Logistic length (mm) at maturity relationship parameters
mat_L95 <- c(300, 300) # females, males - Logistic length (mm) at maturity relationship parameters
EstMatAtLen <- data.frame(EstFemMatAtLen=NA,
EstMalMatAtLen=NA) # maturity at age (from age 0), inputted as values in data frame
sel_L50 <- c(250, 250) # females, males - Logistic age selectivity relationship parameters
sel_L95 <- c(300, 300) # females, males - Logistic age selectivity relationship parameters
ret_Pmax <- c(1.0, 1.0) # maximum retention, values lower than 1 imply discarding of fish above MLL
ret_L50 <- c(250, 250) # females, males - Logistic age fish retention at age parameters
ret_L95 <- c(300, 300) # females, males - Logistic age fish retention at age parameters
DiscMort <- 0.25 # discard mortality (e.g. 50% released fish die = 0.5)
Steepness <- 0.75 # steepness parameter of the Beverton and Holt stock-recruitment relationship
SRrel_Type <- 1 # 1 = Beverton-Holt, 2=Ricker
NatMort = 0.2
RefPointPlotOpt <- 1 # 0=don't plot, 1=plot defaults, 2=plot BMSY ref points
Current_F = 0.2
PlotPerRecruit_Biom_no_err_LB(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type,
EstWtAtLen, ReprodScale, ReprodPattern, InitRatioFem, FinalSex_Pmax, FinalSex_L50,
FinalSex_L95, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, ret_Pmax,
ret_L50, ret_L95, DiscMort, Steepness, SRrel_Type, NatMort, RefPointPlotOpt, Current_F)
Steepness <- 0.75 # steepness parameter of the Beverton and Holt stock-recruitment relationship
Steepness_sd <- 0.025
NatMort <- 0.2 # natural mortality  (year-1)
NatMort_sd <- 0.025
Current_F <- 0.1 # estimate of fishing mortality, e.g. from catch curve analysis
Current_F_sd <- 0.005
RefPointPlotOpt <- 1 # 0=don't plot, 1=plot defaults, 2=plot BMSY ref points
nReps = 10 # number of resampling trials. Set to low number to test, then much higher for final analysis.
FittedRes=GetPerRecruitResults_LB_with_err(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type,
EstWtAtLen, ReprodScale, ReprodPattern, InitRatioFem, FinalSex_Pmax, FinalSex_L50,
FinalSex_L95, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, ret_Pmax,
ret_L50, ret_L95, DiscMort, Steepness, Steepness_sd, SRrel_Type, NatMort, NatMort_sd,
Current_F, Current_F_sd, nReps)
# Plot. Note, can skip above step and set FittedRes=NA (plot function will be slower
PlotPerRecruit_Biom_with_err_LB(MaxModelAge, TimeStep, Linf, vbK, tzero, EstLenAtAge,
lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type, EstWtAtAge, ReprodScale, ReprodPattern,
InitRatioFem, FinalSex_Pmax, FinalSex_A50, FinalSex_A95, mat_A50, mat_A95,
EstMatAtAge, sel_A50, sel_A95, EstSelAtAge, ret_Pmax, ret_A50, ret_A95,
EstRetenAtAge, DiscMort, Steepness, Steepness_sd, SRrel_Type, NatMort, NatMort_sd,
Current_F, Current_F_sd, RefPointPlotOpt, FittedRes, nReps, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, xmax=1, xint=NA, ymax=NA, yint=NA)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
#
# We wanted to test four scenarios  -
#   * FIT WITHOUT MLL AND DISC INFO
# * FIT LBSPR (Hordyk)
# * FIT WITH MLL and NO DISC INFO
# * FIT WITH MLL AND DISC INFO
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
rm(list=ls())
library(L3Assess)
MaxAge = 25 # setting a bit higher than max age
TimeStep = 1/2 # model timestep (e.g. 1 = annual, 1/12 = monthly)
NatMort = 4.22/19 # 0.2221053
MaxLen = 1000
LenInc = 20
MLL = NA # 300
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
SelectivityVec = NA
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf = c(561,588)
vbK = c(0.14,0.17)
CVSizeAtAge = c(0.05,0.05)
GrowthParams = data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge)
RefnceAges = NA
SelParams = c(200, 300) # L50, L95 for gear selectivity
# SelParams = c(300, 450) # L50, L95 for gear selectivity
RetenParams = c(290, 310) # L50, L95 for retention
L95 = 450
FishMort = NatMort
DiscMort = 0.5
SampleSize = c(10000,2000) # retained, discarded fish
Res=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
SelParams, RetenParams, SelectivityVec, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
Res$RetAtLength
Res$DiscCatchAtLen
ObsRetCatchFreqAtLen = Res$ObsRetCatchFreqAtLen
ObsDiscCatchFreqAtLen = Res$ObsDiscCatchFreqAtLen
lbnd = Res$lbnd
midpt = Res$midpt
ubnd = Res$ubnd
sum(ObsRetCatchFreqAtLen)
sum(ObsDiscCatchFreqAtLen)
plot(midpt,ObsRetCatchFreqAtLen,"o", ylim=c(0,2500))
points(midpt,ObsDiscCatchFreqAtLen,"o", col=2)
points(midpt,ObsDiscCatchFreqAtLen+ObsRetCatchFreqAtLen,"o", col=3)
InitFishMort = 0.5 # specify starting parameters
InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform
InitL50 = 200
InitDelta = 20
InitFishMort = 0.5 # specify starting parameters
InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform
InitL50_sel = 200
InitDelta_sel = 20
InitL50_ret = 400
InitDelta_ret = 20
PropReleased = NA
params = c(InitFishMort_logit, log(InitL50_sel), log(InitDelta_sel), log(InitL50_ret), log(PropReleased))
FittedRes=GetLengthBasedCatchCurveResults(params, GrowthCurveType, GrowthParams, RefnceAges, MLL, SelectivityType, ObsRetCatchFreqAtLen,
lbnd, ubnd, midpt, SelectivityVec, PropReleased, ObsDiscCatchFreqAtLen, DiscMort, CVSizeAtAge, MaxAge, NatMort, TimeStep)
params = c(InitFishMort_logit, log(InitL50_sel), log(InitDelta_sel))
FittedRes=GetLengthBasedCatchCurveResults(params, GrowthCurveType, GrowthParams, RefnceAges, MLL, SelectivityType, ObsRetCatchFreqAtLen,
lbnd, ubnd, midpt, SelectivityVec, PropReleased, ObsDiscCatchFreqAtLen, DiscMort, CVSizeAtAge, MaxAge, NatMort, TimeStep)
params
#'
#' @keywords internal
#' @param params estimated model parameters (varies, depending on growth curve type, selectivity type and catch curve type)
#' @param GrowthParams c(Linf, vbK, CVSizeAtAge) single sex von Bertalanffy, or data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge),
#' both sexes von Bertalanffy, or c(y1, y2, a, b) single sex Schnute, or data.frame(y1=y1, y2=y2, a=a, b=b), both sexes Schnute
#' @param RefnceAges reference ages for Schnute function (set to NA if growth based on another function)
#' @param CatchCurveType 1=length based, 2=age and length based
#' @param SelectivityType 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
#'
#' @return values of growth parameters given specified catch curve, growth and selectivity model option
GetGrowthAndSelectivityParams <- function(params, GrowthParams, RefnceAges, CatchCurveType, SelectivityType) {
L50 = NA
L95 = NA
L50_ret = NA
L95_ret = NA
Linf = NA
vbK = NA
t1 = NA
t2 = NA
y1 = NA
y2 = NA
a = NA
b = NA
CVSizeAtAge = NA
GrowthModelType = NA
# get growth and selectivity parameters for length based catch curve model
if (CatchCurveType == 1) { # length based catch curve
if (SelectivityType == 2) { # logistic selectivity
L50 = exp(params[2])
L95 = exp(params[3]) + exp(params[2])
if (length(params)==5) { #
L50_ret = exp(params[4])
L95_ret = exp(params[4]) + exp(params[5])
}
}
if (GrowthCurveType == 1) { # von Bertalanffy
if(is.vector(GrowthParams)) { # single or combined sex
Linf = GrowthParams[1]
vbK = GrowthParams[2]
GrowthModelType = 1
} else { #  separate sexes
Linf = GrowthParams[,1]
vbK = GrowthParams[,2]
GrowthModelType = 2
}
} else { # Schnute
if(is.vector(GrowthParams)) { # single or combined sex
t1 = c(RefnceAges[1],RefnceAges[1])
t2 = c(RefnceAges[2],RefnceAges[2])
y1 = c(GrowthParams[1],GrowthParams[1])
y2 = c(GrowthParams[2],GrowthParams[2])
a = c(GrowthParams[3],GrowthParams[3])
b = c(GrowthParams[4],GrowthParams[4])
GrowthModelType = 3
} else { #  separate sexes
t1=RefnceAges[,1]; t2=RefnceAges[,2]
y1=GrowthParams[,1]; y2=GrowthParams[,2]
a=GrowthParams[,3]; b=GrowthParams[,4]
GrowthModelType = 4
}
}
}
# get growth and selectivity parameters for length and age based catch curve model
if (CatchCurveType == 2) { # age and length based catch curve
if (GrowthCurveType == 1) { # von Bertalanffy
if (SelectivityType == 1 & length(params)==4) { # selectivity vector input, single sex input
Linf = exp(params[2])
vbK = exp(params[3])
CVSizeAtAge = exp(params[4])
GrowthModelType = 1
}
if (SelectivityType == 2 & length(params)==6) { # logistic selectivity, single sex input
L50 = exp(params[2])
L95 = exp(params[3]) + exp(params[2])
Linf = exp(params[4])
vbK = exp(params[5])
CVSizeAtAge = exp(params[6])
GrowthModelType = 1
}
if (SelectivityType == 1 & length(params)==6) { # selectivity vector input, separate sex input
Linf = exp(c(params[2],params[3]))
vbK = exp(c(params[4],params[5]))
CVSizeAtAge = exp(params[6])
GrowthModelType = 2
}
if (SelectivityType == 2 & length(params)==8) { # logistic selectivity, separate sex input
L50 = exp(params[2])
L95 = exp(params[3]) + exp(params[2])
Linf = exp(c(params[4],params[5]))
vbK = exp(c(params[6],params[7]))
CVSizeAtAge = exp(params[8])
GrowthModelType = 2
}
} # von Bertalanffy
if (GrowthCurveType == 2) { # Schnute
# not yet implemeted!!!
GrowthModelType = 3
# GrowthModelType = 4
}
} # age and length based catch curve
# calc Linf for Schnute growth curve, for penalty function
if (GrowthModelType == 3) { # Schnute
Linf = ((exp(a*t2)*y2^b-exp(a*t1)*y1^b)/(exp(a*t2)-exp(a*t1)))^(1/b)
}
if (GrowthModelType == 4) { # Schnute
Linf1 = ((exp(a[1]*t2[1])*y2[1]^b[1]-exp(a[1]*t1[1])*y1[1]^b[1])/(exp(a[1]*t2[1])-exp(a[1]*t1[1])))^(1/b[1])
Linf2 = ((exp(a[2]*t2[2])*y2[2]^b[2]-exp(a[2]*t1[2])*y1[2]^b[2])/(exp(a[2]*t2[2])-exp(a[2]*t1[2])))^(1/b[2])
Linf = max(Linf1,Linf2)
}
result = list(L50 = L50,
L95 = L95,
L50_ret = L50_ret,
L95_ret = L95_ret,
Linf = Linf,
vbK = vbK,
t1 = t1,
t2 = t2,
y1 = y1,
y2 = y2,
a = a,
b = b,
CVSizeAtAge = CVSizeAtAge,
GrowthModelType = GrowthModelType)
return(result)
}
# get parameters for specified growth curve and catch curve type
res = GetGrowthAndSelectivityParams(params, GrowthParams, RefnceAges, CatchCurveType, SelectivityType)
# params = c(InitFishMort_logit, log(InitL50_sel), log(InitDelta_sel), log(InitL50_ret), log(PropReleased))
CatchCurveType=1
# get parameters for specified growth curve and catch curve type
res = GetGrowthAndSelectivityParams(params, GrowthParams, RefnceAges, CatchCurveType, SelectivityType)
L50 = res$L50; L95 = res$L95
L50_ret = res$L50_ret; L95_ret = res$L95_ret
Linf = res$Linf; vbK = res$vbK
t1 = res$t1; t2 = res$t2; y1 = res$y1; y2 = res$y2; a = res$a; b = res$b
GrowthModelType = res$GrowthModelType # 1 = single sex von Bertalanffy, 2 = 2 sex von Bertalanffy,
# selectivity
if (SelectivityType == 1) { # inputted as vector
SelAtLength = SelectivityVec
}
if (SelectivityType == 2) { # logistic gear selectivity
SelAtLength = CalcLogisticSelOrReten(L50, L95, nLenCl, midpt)
}
#' Calculate logistic length-based selectivity or retention (asymptotic curve)
#'
#' @keywords internal
#'
#' @param L50 length at which 50 percent of fish are selected into the fishery
#' @param L95 length at which 95 percent of fish are selected into the fishery
#' @param nLenCl number of length classes
#' @param midpt mid points of length classes
#'
#' @return Selectivity at length (SelAtLength)
CalcLogisticSelOrReten <- function(L50, L95, nLenCl, midpt) {
SelAtLength = rep(0,nLenCl)
SelAtLength = 1 / (1 + exp(-log(19) * (midpt - L50) / (L95-L50)))
return(SelAtLength)
}
# selectivity
if (SelectivityType == 1) { # inputted as vector
SelAtLength = SelectivityVec
}
if (SelectivityType == 2) { # logistic gear selectivity
SelAtLength = CalcLogisticSelOrReten(L50, L95, nLenCl, midpt)
}
nLenCl
ubnd
midpt
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
