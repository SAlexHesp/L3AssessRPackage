# Simulate data
SampleSize=5000 # sample size for retained catches (and same number for released fish, if an MLL is specified)
set.seed(123)
MaxAge = 30
TimeStep = 1 # model timestep (e.g. 1 = annual, 1/12 = monthly)
NatMort = 4.22/MaxAge
FishMort = 0.2
MaxLen = 1200
LenInc = 20
MLL=NA # (minimum legal length) # retention set to 1 for all lengths if MLL set to NA and retention parameters not specified
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
SelectivityVec = NA # selectivity vector
SelParams = c(200, 50) # L50, L95-L50 for gear selectivity
RetenParams = NA # c(400, 50) # L50, L95-L50 for retention
DiscMort = 0 # proportion of fish that die due to natural mortality
# single sex, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf = 800
vbK = 0.2
CVSizeAtAge = 0.08
GrowthParams = c(Linf, vbK)
RefnceAges = NA
Res=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
SelParams, RetenParams, SelectivityVec, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
ObsRetCatchFreqAtLen = Res$ObsRetCatchFreqAtLen
ObsDiscCatchFreqAtLen = Res$ObsDiscCatchFreqAtLen # NA # (or set to Res$ObsRetCatchFreqAtLen)
ObsDiscCatchFreqAtLen
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
# library(devtools)
# devtools::install_github("SAlexHesp/L3AssessRPackage", build_vignettes=TRUE, force=TRUE)
rm(list=ls())
library(L3Assess)
# Simulate data
set.seed(123)
SampleSize=5000 # sample size for retained catches (and same number for released fish, if an MLL is specified)
set.seed(123)
MaxAge = 40
TimeStep = 1 # model timestep (e.g. 1 = annual, 1/12 = monthly)
NatMort = 4.22/MaxAge
FishMort = 0.1
MaxLen = 1400
LenInc = 20
MLL=NA # (minimum legal length) # retention set to 1 for all lengths if MLL set to NA and retention parameters not specified
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
SelectivityVec = NA # selectivity vector
SelParams = c(300, 20) # L50, L95-L50 for gear selectivity
RetenParams = c(500, 10) # L50, L95-L50 for retention
DiscMort = 0.5 # proportion of fish that die due to natural mortality
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf = c(900,1100)
vbK = c(0.1,0.1)
CVSizeAtAge = c(0.08,0.08)
GrowthParams = data.frame(Linf=Linf, vbK=vbK)
# Linf = 1100
# vbK = 0.1
# CVSizeAtAge = 0.08
# GrowthParams = c(Linf, vbK)
RefnceAges = NA
SimRes=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
SelParams, RetenParams, SelectivityVec, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
# plot data
PlotOpt=0 # 0=all plots, 1=retained lengths at age, 2=retained plus discarded lengths at age, 3=length frequency, 4=age frequency
PlotSimLenAndAgeFreqData(MaxAge, MaxLen, SimRes, PlotOpt)
#' Get maximum and minimum x values and x interval
#'
#' Used for setting plot defaults
#'
#' @keywords internal
#'
#' @param x_data x axis data for plot
#'
#' @return list object with minimum and maximum x axis values and x axis interval
Get_xaxis_scale <- function(x_data) {
# modified from code provided by
# https://peltiertech.com/calculate-nice-axis-scales-in-excel-vba/
xmax_data = max(x_data)
xmin_data = min(x_data)
xpow = log10(xmax_data-xmin_data)
xint = 10 ^ (xpow-round(xpow,0))
if (xint>=0 & xint<2.5) {
xint = 0.2
}
if (xint>=2.5 & xint<5) {
xint = 0.5
}
if (xint>=5 & xint<7.5) {
xint = 1
}
if (xint>=7.5) {
xint = 2
}
xint = xint * 10^round(xpow,0) # major ticks
xmin = xint * round(xmin_data/xint,0)
xmax = xint * (round(xmax_data / xint,0) + 1)
results = list(xmin = xmin,
xmax = xmax,
xint = xint)
}
#' Get maximum and minimum y values and y interval
#'
#' Used for setting plot defaults
#'
#' @keywords internal
#'
#' @param y_data y axis data for plot
#'
#' @return list object with minimum and maximum y axis values and y axis interval
Get_yaxis_scale <- function(y_data) {
# modified from code provided by
# https://peltiertech.com/calculate-nice-axis-scales-in-excel-vba/
ymax_data = max(1.1 * y_data)
ymin_data = min(y_data)
ypow = log10(ymax_data-ymin_data)
yint = 10 ^ (ypow-round(ypow,0))
if (yint>=0 & yint<2.5) {
yint = 0.2
}
if (yint>=2.5 & yint<5) {
yint = 0.5
}
if (yint>=5 & yint<7.5) {
yint = 1
}
if (yint>=7.5) {
yint = 2
}
yint = yint * 10^round(ypow,0) # major ticks
ymin = yint * round(ymin_data/yint,0)
ymax = yint * (round(ymax_data / yint,0) + 1)
results = list(ymin = ymin,
ymax = ymax,
yint = yint)
}
.pardefault <- par(no.readonly = TRUE) # store current par settings
# combined sexes
if (PlotOpt==0) {
par(mfrow=c(2,2), mar=c(5,4,1,1))
}
if (PlotOpt!=0) {
par(mfrow=c(1,1), mar=c(5,4,2,2))
}
# plot lengths and ages of retained fish
if (PlotOpt==0 | PlotOpt == 1) {
xaxis_lab = "Age (y)"
yaxis_lab = "Length (mm)"
xlims = Get_xaxis_scale(c(0,MaxAge))
xmax = xlims$xmax
xint = xlims$xint
ylims = Get_yaxis_scale(c(0,MaxLen))
ymax = ylims$ymax
yint = ylims$yint
plot(SimRes$ObsDecAgeRetCatch, SimRes$ObsRandLenRetCatch, "p", main=NA, cex.main=1.2, pch=16, cex=0.6, xaxt = "n", yaxt = "n",
xlab=list(xaxis_lab,cex=1.2),ylab=list(yaxis_lab,cex=1.2), frame=F, xlim=c(0,xmax), ylim=c(0,ymax))
axis(1, at = seq(0, xmax, xint), line = 0.2, labels = F)
axis(2, at = seq(0, ymax, yint), line = 0.2, labels = F)
axis(1, at = seq(0, xmax, xint), lwd = 0, labels = T, line = 0, cex.axis = 1, las = 1)
axis(2, at = seq(0, ymax, yint), lwd = 0, labels = T, line = 0, cex.axis = 1, las = 1)
legend("bottomright", legend="Ret. fish", inset=c(0.13,0),
lty=1, cex = 0.8, bty="n", seg.len = 0, pch=c(16), col="black")
if (is.vector(SimRes$ModelDiag$MeanSizeAtAge)) {
sm1 = spline(SimRes$ModelDiag$DecAges, SimRes$ModelDiag$MeanSizeAtAge, n=100, method="natural")
lines(sm1$x, sm1$y, col="black")
legend("topleft", legend=c("Growth - comb. sexes"), inset=c(0.13,0),
lty=1, cex = 0.8, bty="n", seg.len = 2, pch=-16, col="black")
} else {
sm1 = spline(SimRes$ModelDiag$DecAges, SimRes$ModelDiag$MeanSizeAtAge[1,], n=100, method="natural")
lines(sm1$x, sm1$y, col="red")
sm1 = spline(SimRes$ModelDiag$DecAges, SimRes$ModelDiag$MeanSizeAtAge[2,], n=100, method="natural")
lines(sm1$x, sm1$y, col="blue")
legend("topleft", legend=c("Growth - females","Growth - males"), inset=c(0.13,0),
lty=1, cex = 0.8, bty="n", seg.len = 2, pch=-16, col=c("red","blue"))
}
}
# plot lengths and ages of retained and discarded fish
if (PlotOpt==0 | PlotOpt == 2) {
xaxis_lab = "Age (y)"
yaxis_lab = "Length (mm)"
xlims = Get_xaxis_scale(c(0,MaxAge))
xmax = xlims$xmax
xint = xlims$xint
ylims = Get_yaxis_scale(c(0,MaxLen))
ymax = ylims$ymax
yint = ylims$yint
plot(SimRes$ObsDecAgeRetCatch, SimRes$ObsRandLenRetCatch, "p", main=NA, cex.main=1.2, pch=16, cex=0.6, xaxt = "n", yaxt = "n",
xlab=list(xaxis_lab,cex=1.2),ylab=list(yaxis_lab,cex=1.2), frame=F, xlim=c(0,xmax), ylim=c(0,ymax))
points(SimRes$ObsDecAgeDiscCatch, SimRes$ObsRandLenDiscCatch, col='grey', pch=16, cex=0.6, )
axis(1, at = seq(0, xmax, xint), line = 0.2, labels = F)
axis(2, at = seq(0, ymax, yint), line = 0.2, labels = F)
axis(1, at = seq(0, xmax, xint), lwd = 0, labels = T, line = 0, cex.axis = 1, las = 1)
axis(2, at = seq(0, ymax, yint), lwd = 0, labels = T, line = 0, cex.axis = 1, las = 1)
legend("bottomright", legend=c("Ret. fish","Disc. fish"), inset=c(0.13,0),
lty=1, cex = 0.8, bty="n", seg.len = 0, pch=16, col=c("black","grey"))
if (is.vector(SimRes$ModelDiag$MeanSizeAtAge)) {
sm1 = spline(SimRes$ModelDiag$DecAges, SimRes$ModelDiag$MeanSizeAtAge, n=100, method="natural")
lines(sm1$x, sm1$y, col="black")
legend("topleft", legend=c("Growth - comb. sexes"), inset=c(0.13,0),
lty=1, cex = 0.8, bty="n", seg.len = 2, pch=-16, col="black")
} else {
sm1 = spline(SimRes$ModelDiag$DecAges, SimRes$ModelDiag$MeanSizeAtAge[1,], n=100, method="natural")
lines(sm1$x, sm1$y, col="red")
sm1 = spline(SimRes$ModelDiag$DecAges, SimRes$ModelDiag$MeanSizeAtAge[2,], n=100, method="natural")
lines(sm1$x, sm1$y, col="blue")
legend("topleft", legend=c("Growth - females","Growth - males"), inset=c(0.13,0),
lty=1, cex = 0.8, bty="n", seg.len = 2, pch=-16, col=c("red","blue"))
}
}
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
# library(devtools)
# devtools::install_github("SAlexHesp/L3AssessRPackage", build_vignettes=TRUE, force=TRUE)
rm(list=ls())
library(L3Assess)
# Simulate data
set.seed(123)
SampleSize=5000 # sample size for retained catches (and same number for released fish, if an MLL is specified)
set.seed(123)
MaxAge = 40
TimeStep = 1 # model timestep (e.g. 1 = annual, 1/12 = monthly)
NatMort = 4.22/MaxAge
FishMort = 0.1
MaxLen = 1400
LenInc = 20
MLL=NA # (minimum legal length) # retention set to 1 for all lengths if MLL set to NA and retention parameters not specified
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
SelectivityVec = NA # selectivity vector
SelParams = c(300, 20) # L50, L95-L50 for gear selectivity
RetenParams = c(500, 10) # L50, L95-L50 for retention
DiscMort = 0.5 # proportion of fish that die due to natural mortality
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf = c(900,1100)
vbK = c(0.1,0.1)
CVSizeAtAge = c(0.08,0.08)
GrowthParams = data.frame(Linf=Linf, vbK=vbK)
# Linf = 1100
# vbK = 0.1
# CVSizeAtAge = 0.08
# GrowthParams = c(Linf, vbK)
RefnceAges = NA
SimRes=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
SelParams, RetenParams, SelectivityVec, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
# plot data
PlotOpt=0 # 0=all plots, 1=retained lengths at age, 2=retained plus discarded lengths at age, 3=length frequency, 4=age frequency
PlotSimLenAndAgeFreqData(MaxAge, MaxLen, SimRes, PlotOpt)
SimRes$ModelDiag$MeanSizeAtAge
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
