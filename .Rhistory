ObsAgeFreq
CatchCurveModel = 2
par(mfrow=c(2,2))
PlotAgeBasedCatchCurveResults_LogSpace(RecAssump, MinFreq, MinAge, MaxAge, NatMort,
ObsAgeFreq, CatchCurveModel, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, ymin=NA, xmax=NA, xint=NA,
ymax=NA, yint=NA, PlotCLs=T)
# Now, get Chapman and Robson mortality estimate
res=GetChapmanRobsonMortalityResults(RecAssump, MinAge, MaxAge, ObsAgeFreq)
res$ZMort
CatchCurveModel = 1 # Chapman Robson
RecAssump = 0 # Chapman Robson
MinFreq = NA # Chapman Robson
PlotAgeBasedCatchCurveResults_LogSpace(RecAssump, MinFreq, MinAge, MaxAge, NatMort,
ObsAgeFreq, CatchCurveModel, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, ymin=NA, xmax=NA, xint=NA,
ymax=NA, yint=NA, PlotCLs=T)
# Now, get estimate from Catch curve with age-based selectivity
CatchCurveModel = 3 # Logistic selectivity
RecAssump = NA # Logistic selectivity
MinFreq = NA # # Logistic selectivity
FMort = 0.5
SelA50 = 1.5
SelA95 = 2.5
NatMort = 0.35 #4.22 / 12 # Max age recorded for species
ln_params = log(c(FMort, SelA50, SelA95))
res=GetLogisticCatchCurveResults(ln_params, NatMort, Ages, ObsAgeFreq)
res$ParamEst
res$EstZMort
PlotAgeBasedCatchCurveResults_LogSpace(RecAssump, MinFreq, MinAge, MaxAge, NatMort,
ObsAgeFreq, CatchCurveModel, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, ymin=NA, xmax=NA, xint=NA,
ymax=NA, yint=NA, PlotCLs=T)
NatMort
# [1] 0.35
# Appears that FMort is around NatMort level (using this analysis, or a bit less, using previous catch curves)
# Z is a bit higher than other 2 methods. Note, these data are quite minimal, with relatively
# few age classes. In this case, perhaps Chapman and Robson may be best method to use.
# Could do some simulations, using this package, to assess if ability of this method to
# estimate all parameters, with such few age classes.
PlotAgeBasedCatchCurveResults_LogSpace(RecAssump, MinFreq, MinAge, MaxAge, NatMort,
ObsAgeFreq, CatchCurveModel, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, ymin=NA, xmax=NA, xint=NA,
ymax=NA, yint=NA, PlotCLs=T)
# Chapman & Robson method, with peak +1 selectivity assumption
CatchCurveModel = 1 # Chapman Robson
RecAssump = 1 # Chapman Robson
MinFreq = NA # Chapman Robson
PlotAgeBasedCatchCurveResults_LogSpace(RecAssump, MinFreq, MinAge, MaxAge, NatMort,
ObsAgeFreq, CatchCurveModel, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, ymin=NA, xmax=NA, xint=NA,
ymax=NA, yint=NA, PlotCLs=T)
# now more similar to method with logistic selectivity curve!
# *********************
# Length-based analyses
# *********************
# Simulate data
SampleSize=5000
set.seed(123)
MaxAge = 30
NatMort = 4.22/MaxAge
FishMort = 0.2
MaxLen = 1500
LenInc = 20
MLL = NA
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
L50 = 600 # selectivity
L95 = 700 # selectivity
SelectivityVec = NA
DiscMort = 0
# single sex, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf = 800
vbK = 0.2
CVSizeAtAge = 0.08
GrowthParams = c(Linf, vbK)
RefnceAges = NA
# # 2 sexes, von Bertalanffy
# GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
# Linf = c(700,850)
# vbK = c(0.3,0.2)
# CVSizeAtAge = c(0.08,0.08)
# GrowthParams = data.frame(Linf=Linf, vbK=vbK)
# RefnceAges = NA
# # 1 sex, Schnute
# GrowthCurveType = 2 # 1 = von Bertalanffy, 2 = Schnute
# t1 = 1 # growth - Schnute
# t2 = 10 # growth - Schnute
# y1 = 400 # growth - Schnute
# y2 = 1000 # growth - Schnute
# a = 0.1 # growth - Schnute
# b = 2.0 # growth - Schnute#' # GrowthParams = c(y1, y2, a, b)
# RefnceAges = c(t1,t2)
# CVSizeAtAge = 0.08
# # 2 sexes, Schnute
# GrowthCurveType = 2 # 1 = von Bertalanffy, 2 = Schnute
# t1 = c(1,1) # growth - Schnute
# t2 = c(10,10) # growth - Schnute
# y1 = c(435.3,400.3) # growth - Schnute
# y2 = c(1089.1,1034.5) # growth - Schnute
# a = c(0.044,0.136) # growth - Schnute
# b = c(2.748,1.971) # growth - Schnute
# CVSizeAtAge = c(0.08, 0.08)
# GrowthParams = data.frame(y1=y1, y2=y2, a=a, b=b)
# RefnceAges = data.frame(t1=t1,t2=t2)
Res=SimLenAndAgeFreqData(SampleSize, MaxAge, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
L50, L95, SelectivityVec, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
ObsCatchFreqAtLen = Res$ObsCatchFreqAtLen
midpt=Res$midpt
lbnd=Res$lbnd
ubnd=Res$ubnd
InitFishMort = 0.25 # specify starting parameters
InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform
InitL50 = 600
InitL95 = 700
params = c(InitFishMort_logit, log(InitL50), log(InitL95))
FittedRes=GetLengthBasedCatchCurveResults(params, GrowthCurveType, GrowthParams, RefnceAges, MLL, SelectivityType, ObsCatchFreqAtLen,
lbnd, ubnd, midpt, SelectivityVec, DiscMort, CVSizeAtAge, MaxAge, NatMort)
# Plot. Note, can skip above step and set FittedRes=NA (plot function will be slower)
par(mfrow=c(1,1))
PlotLengthBasedCatchCurveResults(params, MLL, SelectivityType, ObsCatchFreqAtLen, lbnd, ubnd, midpt,
SelectivityVec, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, MaxAge, NatMort, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, xmax=NA, xint=NA,
ymax=0.2, yint=0.05, PlotCLs=TRUE, FittedRes, nReps=200)
library(L3Assess)
library(L3Assess)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
use_git()
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(L3Assess)
# library(WAFishBiology)
# Simulate data
SampleSize=1000
set.seed(123)
MaxAge = 30
NatMort = 4.22/MaxAge
FishMort = 0.2
MaxLen = 1500
LenInc = 50
MLL = NA
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
L50 = 300 # selectivity
L95 = 400 # selectivity
SelectivityVec = NA
DiscMort = 0
# # von Bertalanffy
# GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
# Linf = 800
# vbK = 0.2
# CVSizeAtAge = 0.08
# GrowthParams = c(Linf, vbK)
# RefnceAges = NA
# Schnute
GrowthCurveType = 2 # 1 = von Bertalanffy, 2 = Schnute
t1 = 1 # growth - Schnute
t2 = 10 # growth - Schnute
y1 = 400 # growth - Schnute
y2 = 1000 # growth - Schnute
a = 0.1 # growth - Schnute
b = 2.0 # growth - Schnute
CVSizeAtAge = 0.08
GrowthParams = c(y1, y2, a, b)
RefnceAges = c(t1,t2)
Res=SimLenAndAgeFreqData(SampleSize, MaxAge, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
L50, L95, SelectivityVec, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
ObsCatchFreqAtLen = as.vector(Res$ObsCatchFreqAtLen)
MinFreq = 20 # set minimum frequency for larger lengths for analysis
# note, this needs to be high enough so that data for ln(n/dt) vs relative age for essentially straight
# line - if not, Z will be biased!!!
midpt=Res$midpt
lbnd=Res$lbnd
ubnd=Res$ubnd
ModelType = 2 # 1 = von Bertalanffy growth curve (Pauly), 2 = length-converted catch curve - Schnute growth curve)
res=GetLenConvCatchCurveResults(ModelType, GrowthParams, RefnceAges, ObsCatchFreqAtLen,
MinFreq, lbnd, midpt, ubnd)
PlotLenConvCatchCurveResults(MaxAge, ModelType, GrowthParams, RefnceAges, ObsCatchFreqAtLen, MinFreq,
lbnd, midpt, ubnd)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
TimeStep
TimeStep
ExpLen = midpt + (Linf - midpt) * (1 - exp(-vbK*TimeStep))
ExpLen
vbK
lbnd = seq(0,MaxLen - LenInc, LenInc)
lbnd = seq(0,MaxLen - LenInc, LenInc)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
MaxModelAge <- 30 # maximum age considered by model, years
TimeStep <- 1 # Model time step (y) (for shorter-lived species, might be appropriate to use a smaller time step)
MaxLen = 800
LenInc = 20
lbnd = seq(0,MaxLen - LenInc, LenInc)
ubnd = lbnd + LenInc
midpt = lbnd + (LenInc/2)
nLenCl = length(midpt)
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf <- c(550, 500) # mm - von Bertalanffy growth model parameters - Females, males
vbK <- c(0.2, 0.2) # year-1 - von Bertalanffy growth model parameters - Females, males
tzero <- c(0, 0) # years - von Bertalanffy growth model parameters - Females, males
GrowthParams = data.frame(Linf=Linf, vbK=vbK, tzero=tzero)
RefnceAges = NA
# GrowthParams c(Linf, vbK, tzero) single sex von Bertalanffy, or data.frame(Linf=Linf, vbK=vbK, tzero=tzero),
#' both sexes von Bertalanffy, or c(y1, y2, a, b) single sex Schnute, or data.frame(y1=y1, y2=y2, a=a, b=b), both sexes Schnute
CVSizeAtAge = c(0.05, 0.05)
lenwt_a <- 0.000005 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
ln_lenwt_a <- NA # for log-log relationship
lenwt_b <- 3 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
WLrel_Type <- 1 # 1=power, 2=log-log relationship
EstWtAtLen <- data.frame(EstFemWtAtLen=NA,
EstMalWtAtLen=NA) # weight at age (from age 0), inputted as values in data frame
ReprodScale <- 1 # 1=default (standard calculations for spawning biomass), 2=hyperallometric reproductive scaling with female mass (i.e. BOFFF effects)
ReprodPattern <- 1 # 1 = gonochoristic (separate sexes), 2 = protogynous (female to male sex change), 3 = protandrous (male to female sex change)
InitRatioFem <- 0.5 # Ratio of females to males at age zero
FinalSex_Pmax <- NA # Logistic sex change relationship parameters (max probability of final sex)
FinalSex_L50 <- NA # Logistic sex change relationship parameters (inflection point)
FinalSex_L95 <- NA # Logistic sex change relationship parameters (95% of max probability)
mat_L50 <- c(250, 250) # females, males - Logistic length (mm) at maturity relationship parameters
mat_L95 <- c(300, 300) # females, males - Logistic length (mm) at maturity relationship parameters
EstMatAtLen <- data.frame(EstFemMatAtLen=NA,
EstMalMatAtLen=NA) # maturity at age (from age 0), inputted as values in data frame
sel_L50 <- c(250, 250) # females, males - Logistic age selectivity relationship parameters
sel_L95 <- c(300, 300) # females, males - Logistic age selectivity relationship parameters
ret_Pmax <- c(1.0, 1.0) # maximum retention, values lower than 1 imply discarding of fish above MLL
ret_L50 <- c(250, 250) # females, males - Logistic age fish retention at age parameters
ret_L95 <- c(300, 300) # females, males - Logistic age fish retention at age parameters
DiscMort <- 0.25 # discard mortality (e.g. 50% released fish die = 0.5)
Steepness <- 0.75 # steepness parameter of the Beverton and Holt stock-recruitment relationship
SRrel_Type <- 1 # 1 = Beverton-Holt, 2=Ricker
NatMort = 0.2
RefPointPlotOpt <- 1 # 0=don't plot, 1=plot defaults, 2=plot BMSY ref points
Current_F = 0.2
PlotPerRecruit_Biom_no_err_LB(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type,
EstWtAtLen, ReprodScale, ReprodPattern, InitRatioFem, FinalSex_Pmax, FinalSex_L50,
FinalSex_L95, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, ret_Pmax,
ret_L50, ret_L95, DiscMort, Steepness, SRrel_Type, NatMort, RefPointPlotOpt, Current_F)
Steepness <- 0.75 # steepness parameter of the Beverton and Holt stock-recruitment relationship
Steepness_sd <- 0.025
NatMort <- 0.2 # natural mortality  (year-1)
NatMort_sd <- 0.025
Current_F <- 0.1 # estimate of fishing mortality, e.g. from catch curve analysis
Current_F_sd <- 0.005
RefPointPlotOpt <- 1 # 0=don't plot, 1=plot defaults, 2=plot BMSY ref points
nReps = 10 # number of resampling trials. Set to low number to test, then much higher for final analysis.
FittedRes=GetPerRecruitResults_LB_with_err(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type,
EstWtAtLen, ReprodScale, ReprodPattern, InitRatioFem, FinalSex_Pmax, FinalSex_L50,
FinalSex_L95, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, ret_Pmax,
ret_L50, ret_L95, DiscMort, Steepness, Steepness_sd, SRrel_Type, NatMort, NatMort_sd,
Current_F, Current_F_sd, nReps)
# Plot. Note, can skip above step and set FittedRes=NA (plot function will be slower
PlotPerRecruit_Biom_with_err_LB(MaxModelAge, TimeStep, Linf, vbK, tzero, EstLenAtAge,
lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type, EstWtAtAge, ReprodScale, ReprodPattern,
InitRatioFem, FinalSex_Pmax, FinalSex_A50, FinalSex_A95, mat_A50, mat_A95,
EstMatAtAge, sel_A50, sel_A95, EstSelAtAge, ret_Pmax, ret_A50, ret_A95,
EstRetenAtAge, DiscMort, Steepness, Steepness_sd, SRrel_Type, NatMort, NatMort_sd,
Current_F, Current_F_sd, RefPointPlotOpt, FittedRes, nReps, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, xmax=1, xint=NA, ymax=NA, yint=NA)
library(L3Assess)
MaxModelAge <- 30 # maximum age considered by model, years
TimeStep <- 1 # Model time step (y) (for shorter-lived species, might be appropriate to use a smaller time step)
MaxLen = 800
LenInc = 20
lbnd = seq(0,MaxLen - LenInc, LenInc)
ubnd = lbnd + LenInc
midpt = lbnd + (LenInc/2)
nLenCl = length(midpt)
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf <- c(550, 500) # mm - von Bertalanffy growth model parameters - Females, males
vbK <- c(0.2, 0.2) # year-1 - von Bertalanffy growth model parameters - Females, males
tzero <- c(0, 0) # years - von Bertalanffy growth model parameters - Females, males
GrowthParams = data.frame(Linf=Linf, vbK=vbK, tzero=tzero)
RefnceAges = NA
# GrowthParams c(Linf, vbK, tzero) single sex von Bertalanffy, or data.frame(Linf=Linf, vbK=vbK, tzero=tzero),
#' both sexes von Bertalanffy, or c(y1, y2, a, b) single sex Schnute, or data.frame(y1=y1, y2=y2, a=a, b=b), both sexes Schnute
CVSizeAtAge = c(0.05, 0.05)
lenwt_a <- 0.000005 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
ln_lenwt_a <- NA # for log-log relationship
lenwt_b <- 3 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
WLrel_Type <- 1 # 1=power, 2=log-log relationship
EstWtAtLen <- data.frame(EstFemWtAtLen=NA,
EstMalWtAtLen=NA) # weight at age (from age 0), inputted as values in data frame
ReprodScale <- 1 # 1=default (standard calculations for spawning biomass), 2=hyperallometric reproductive scaling with female mass (i.e. BOFFF effects)
ReprodPattern <- 1 # 1 = gonochoristic (separate sexes), 2 = protogynous (female to male sex change), 3 = protandrous (male to female sex change)
InitRatioFem <- 0.5 # Ratio of females to males at age zero
FinalSex_Pmax <- NA # Logistic sex change relationship parameters (max probability of final sex)
FinalSex_L50 <- NA # Logistic sex change relationship parameters (inflection point)
FinalSex_L95 <- NA # Logistic sex change relationship parameters (95% of max probability)
mat_L50 <- c(250, 250) # females, males - Logistic length (mm) at maturity relationship parameters
mat_L95 <- c(300, 300) # females, males - Logistic length (mm) at maturity relationship parameters
EstMatAtLen <- data.frame(EstFemMatAtLen=NA,
EstMalMatAtLen=NA) # maturity at age (from age 0), inputted as values in data frame
sel_L50 <- c(250, 250) # females, males - Logistic age selectivity relationship parameters
sel_L95 <- c(300, 300) # females, males - Logistic age selectivity relationship parameters
ret_Pmax <- c(1.0, 1.0) # maximum retention, values lower than 1 imply discarding of fish above MLL
ret_L50 <- c(250, 250) # females, males - Logistic age fish retention at age parameters
ret_L95 <- c(300, 300) # females, males - Logistic age fish retention at age parameters
DiscMort <- 0.25 # discard mortality (e.g. 50% released fish die = 0.5)
Steepness <- 0.75 # steepness parameter of the Beverton and Holt stock-recruitment relationship
SRrel_Type <- 1 # 1 = Beverton-Holt, 2=Ricker
NatMort = 0.2
RefPointPlotOpt <- 1 # 0=don't plot, 1=plot defaults, 2=plot BMSY ref points
Current_F = 0.2
PlotPerRecruit_Biom_no_err_LB(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type,
EstWtAtLen, ReprodScale, ReprodPattern, InitRatioFem, FinalSex_Pmax, FinalSex_L50,
FinalSex_L95, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, ret_Pmax,
ret_L50, ret_L95, DiscMort, Steepness, SRrel_Type, NatMort, RefPointPlotOpt, Current_F)
Steepness <- 0.75 # steepness parameter of the Beverton and Holt stock-recruitment relationship
Steepness_sd <- 0.025
NatMort <- 0.2 # natural mortality  (year-1)
NatMort_sd <- 0.025
Current_F <- 0.1 # estimate of fishing mortality, e.g. from catch curve analysis
Current_F_sd <- 0.005
RefPointPlotOpt <- 1 # 0=don't plot, 1=plot defaults, 2=plot BMSY ref points
nReps = 10 # number of resampling trials. Set to low number to test, then much higher for final analysis.
FittedRes=GetPerRecruitResults_LB_with_err(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type,
EstWtAtLen, ReprodScale, ReprodPattern, InitRatioFem, FinalSex_Pmax, FinalSex_L50,
FinalSex_L95, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, ret_Pmax,
ret_L50, ret_L95, DiscMort, Steepness, Steepness_sd, SRrel_Type, NatMort, NatMort_sd,
Current_F, Current_F_sd, nReps)
# Plot. Note, can skip above step and set FittedRes=NA (plot function will be slower
PlotPerRecruit_Biom_with_err_LB(MaxModelAge, TimeStep, Linf, vbK, tzero, EstLenAtAge,
lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type, EstWtAtAge, ReprodScale, ReprodPattern,
InitRatioFem, FinalSex_Pmax, FinalSex_A50, FinalSex_A95, mat_A50, mat_A95,
EstMatAtAge, sel_A50, sel_A95, EstSelAtAge, ret_Pmax, ret_A50, ret_A95,
EstRetenAtAge, DiscMort, Steepness, Steepness_sd, SRrel_Type, NatMort, NatMort_sd,
Current_F, Current_F_sd, RefPointPlotOpt, FittedRes, nReps, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, xmax=1, xint=NA, ymax=NA, yint=NA)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
