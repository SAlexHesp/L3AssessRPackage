# selectivity of landings
SelAtAge <- rep(1,nAges)
SelAtAge[seq(0,AgeAtFullRecruit,1)] <- 0.0001
SelAtAge <- AD(SelAtAge)
# Mortality at age
FAtAge <- FMort * SelAtAge
ZAtAge <- FAtAge + NatMort
FAtAge <- AD(FAtAge); ZAtAge <- AD(ZAtAge)
# Get number of fish N_a,t of year class y=y-a, of age 0 at the beginning of the first
# year of sample collection
t1 <- FirstSampYr # first sample year
t1_yrcl = t1-Ages
RecruitYrs <- seq(t1_yrcl[1] + nSampYrs-1, t1_yrcl[nAges], -1)
Recruit = rep(1,length(RecruitYrs))
EstRecDevYrs = LastRecDevYr:FirstRecDevYr
x=which(RecruitYrs <= LastRecDevYr & RecruitYrs >= FirstRecDevYr)
Recruit[x] = RecDevs - (0.5 * SigmaR * SigmaR)
Recruit <- AD(Recruit)
# calculate numbers at age for the first year
# age < 0 < A
NumAtAge = matrix(nrow=nAges, ncol=nSampYrs)
NumAtAge = AD(NumAtAge)
RecYrCheck = rep(0,nAges)
NumAtAge[1,1] = Recruit[nSampYrs]
#RecYrCheck[1] = RecruitYrs[nSampYrs]
for (a in seq(2,nAges-1,1)) {
tempSurv <- rep(0,a)
j = a+nSampYrs-1
#RecYrCheck[a] = RecruitYrs[j]
tempSurv[1] = Recruit[j]
for (j in 2:a) {
tempSurv[j] = tempSurv[j-1] * exp(-ZAtAge[j-1])
} # j
NumAtAge[a,1] = tempSurv[j]
} # a
# age = A
#RecYrCheck[nAges] = RecruitYrs[nAges+nSampYrs-1]
tempSurv[1] <- 1.0  # average recruitment across all years
for (a in nAges:nAges) {
tempSurv[a] = (tempSurv[a-1] * exp(-ZAtAge[a-1])) / (1 - exp(-ZAtAge[a]))
NumAtAge[a,1] = tempSurv[a]
}
# calculate numbers at age for sample year 2
# age < 0 < A
#RecYrCheck2 = rep(0,nSampYrs-1)
for (t in 2:nSampYrs) {
tempSurv2 <- rep(0,nAges)
for (a in 1:nAges) {
if (a==1) {
j = nSampYrs-t+1
#RecYrCheck2[t-1] = RecruitYrs[j]
tempSurv2[a] = Recruit[j]
} else if (a < nAges) {
tempSurv2[a] = NumAtAge[a-1,t-1] * exp(-ZAtAge[a-1])
} else {
tempSurv2[a] = (NumAtAge[a-1,t-1] + NumAtAge[a,1]) * exp(-ZAtAge[a])
}
NumAtAge[a,t] = as.numeric(tempSurv2[a])
} # a
}
# calculate expected catches at age (note, for RTMB, don't use as.matrix)
CatchAtAge <- matrix(nrow=nAges, ncol=nSampYrs)
CatchAtAge <- AD(CatchAtAge)
sumCatch = rep(0,nSampYrs)
for (t in 1:nSampYrs) {
for (a in 1:nAges) {
CatchAtAge[a,t] = FAtAge[a] / ZAtAge[a]  * (1 - exp(-ZAtAge[a])) * NumAtAge[a,t]
sumCatch[t] = sumCatch[t] + as.numeric(CatchAtAge[a,t])
}
}
# calculate expected catch proportions at age
ExpCatchPropAtAge <- matrix(nrow=nAges, ncol=nSampYrs)
ExpCatchPropAtAge <- AD(ExpCatchPropAtAge)
for (t in 1:nSampYrs) {
for (a in 1:nAges) {
ExpCatchPropAtAge[a,t] = CatchAtAge[a,t] / sumCatch[t]
}
}
# calculate multinomial negative log-likelihood
NLL1 = 0
for (t in 1:nSampYrs) {
for (a in 1:nAges) {
NLL1 = NLL1 - ObsFreqAtAge[a,t] * log(ExpCatchPropAtAge[a,t]+0.0001)
}
}
# variance penalty for recruitment deviations
NLL2 = (1 / (2 * pi * SigmaR^2)) * sum(lnRecDevs^2)
# sum to zero penalty for estimated recruitment deviations
sumlnRecDevs = sum(lnRecDevs)
NLL3 = -sum(dnorm(sumlnRecDevs, 0, sd=1, log=TRUE))
NLL = NLL1 + NLL2 + NLL3 # overall objective function
# need to do some simulation testing to see if rec devs need more
# constraints to prevent confounding with F (e.g. sum to zero, slope equals zero)
# cat("exp(params)",exp(params),'\n')
cat("NLL","NLL","NLL1",NLL1,"NLL2",NLL2,"NLL3",NLL3,'\n')
# RTMB
REPORT(FAtAge)
REPORT(ZAtAge)
REPORT(Recruit)
REPORT(FMort)
REPORT(FirstSampYr)
REPORT(t1_yrcl)
REPORT(RecruitYrs)
REPORT(EstRecDevYrs)
REPORT(RecDevs)
REPORT(ExpCatchPropAtAge)
REPORT(ObsFreqAtAge)
ADREPORT(FMort)
ADREPORT(RecDevs)
## Return
return(NLL)
}
GetVarRecCatchCurveRes <- function(dat, params) {
# set up for RTMB
obj <- MakeADFun(VarRecCC_ObjFunc, params)
# optimising, using nlminb
nlmb <- nlminb(obj$par, obj$fn, obj$gr)
# get results
Res = obj$report()
RTMBReport <- list(ExpCatchPropAtAge=Res$ExpCatchPropAtAge,
EstRecDevYrs=Res$EstRecDevYrs,
RecruitYrs=Res$RecruitYrs,
FirstSampYr=Res$FirstSampYr,
t1_yrcl=Res$t1_yrcl,
RecDevs=Res$RecDevs)
# get estimates from ADreport
sdr <- sdreport(obj)
param_est = as.list(sdr, "Est", report=TRUE)
params_sd = as.list(sdr, "Std", report=TRUE)
EstFMort = c(param_est$FMort, param_est$FMort - 1.96 * params_sd$FMort,
param_est$FMort + 1.96 * params_sd$FMort)
EstRecDevs = data.frame(param_est$RecDevs, param_est$RecDevs - 1.96 * params_sd$RecDevs,
param_est$RecDevs + 1.96 * params_sd$RecDevs)
colnames(EstRecDevs) = c("Estimate","lw_95%CL","up_95%CL")
SummaryRes <- list(nlmb$par,
convergence=nlmb$convergence,
NLL=nlmb$objective,
sdr=sdr,
param_est=param_est,
params_sd=params_sd,
EstFMort=EstFMort,
EstRecDevs=EstRecDevs)
Results = list(SummaryRes=SummaryRes,
RTMBReport=RTMBReport)
return(Results)
}
# specify input to catch curve model
nSampYrs = 2
ObsFreqAtAge <- t(res$RandObsCatchAgeFreq_CombSex[seq(nYears-nSampYrs+1,nYears,1),])
FirstSampYr = Years[nYears] - nSampYrs + 1
MaxModelAge = 50
Ages = 0:MaxModelAge
nAges = length(Ages)
AgeAtFullRecruit = 6 # knife edge selectivity (for now)
NatMort = 4.22/40
FirstRecDevYr = 1993
LastSampYr = FirstSampYr + nSampYrs - 1
LastRecDevYr = LastSampYr - AgeAtFullRecruit - (nSampYrs - 2) # assuming 2 years to reliably estimate a rec dev
nRecDevs = LastRecDevYr - FirstRecDevYr + 1
SigmaR = 0.6
Ages = 0:MaxModelAge
nAges = length(Ages)
LastSampYr = FirstSampYr + nSampYrs - 1
LastRecDevYr = LastSampYr - AgeAtFullRecruit - (nSampYrs - 2) # assuming 2 years to reliably estimate a rec dev
nRecDevs = LastRecDevYr - FirstRecDevYr + 1
dat <- list(nSampYrs=nSampYrs,
FirstSampYr=FirstSampYr,
ObsFreqAtAge=ObsFreqAtAge,
AgeAtFullRecruit=AgeAtFullRecruit,
MaxModelAge=MaxModelAge,
Ages=Ages,
nAges=nAges,
NatMort=NatMort,
FirstRecDevYr=FirstRecDevYr,
LastRecDevYr=LastRecDevYr,
nRecDevs=nRecDevs,
SigmaR=SigmaR)
params <- list(lnFMort=log(0.1),
lnRecDevs=rep(0,nRecDevs))
# fit model
FittedRes=GetVarRecCatchCurveRes(dat, params)
# Alex Hesp 27 Jan 2025
# Preliminary implementation of catch curve model with variable recruitment
# similar to model in ADMB implemented by Norm, but with some slightly different
# assumptions, to be implemented in L3Assess package. First use of model intended
# for black bream (for Charlotte's assessment analyses)
# Some possible extensions
# Use RTMB (ensure optimisation is robust)
# Allow alternative selectivity functions (as may be needed by Charlotte for
# black bream analyses, e.g. dome-shape selectivity input for research fishing,
# but perhaps with asymptotic selectivity for fishery/calculation of population
# dynamics)
# install.packages("RTMB")
# install.packages("rstudioapi")
# if installing from .gz file (for Alex)
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# if installing from github
# library(devtools)
# devtools::install_github("SAlexHesp/L3AssessRPackage", build_vignettes=TRUE, force=TRUE)
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # as Ainslie would do, so why not!
# # Simulate Age data with specified F and recruitment variation, from a dynamic
# # age-based model (using the function SimExploitationHistory_DynMod from L3Assess package)
library(RTMB)
library(L3Assess)
InitRecruit <- 1 # Initial recruitment
MaxModelAge <- 50 # maximum age considered by model, years
TimeStep <- 1 # Model time step (y) (for shorter-lived species, might be approprriate to use a smaller time step)
Linf <- c(1000, 1000) # mm - von Bertalanffy growth model parameters - Females, males
vbK <- c(0.1, 0.1) # year-1 - von Bertalanffy growth model parameters - Females, males
tzero <- c(0, 0) # years - von Bertalanffy growth model parameters - Females, males
EstLenAtAge <- data.frame(EstFemLenAtAge=NA, EstMalLenAtAge=NA) # length at age (from age 0), inputted as values in data frame
lenwt_a <- 0.000005 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
ln_lenwt_a <- NA # for log-log relationship
lenwt_b <- 3 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
WLrel_Type <- 1 # 1=power, 2=log-log relationship
EstWtAtAge <- data.frame(EstFemWtAtAge=NA, EstMalWtAtAge=NA) # weight at age (from age 0), inputted as values in data frame
ReprodScale <- 1 # 1=default (standard calculations for spawning biomass), 2=hyperallometric reproductive scaling with female mass (i.e. BOFFF effects)
ReprodPattern <- 1 # 1 = gonochoristic (separate sexes), 2 = protogynous (female to male sex change), 3 = protandrous (male to female sex change)
InitRatioFem <- 0.5 # Ratio of females to males at age zero
FinalSex_A50 <- NA # Logistic sex change relationship parameters (inflection point)
FinalSex_A95 <- NA # Logistic sex change relationship parameters (95% of max probability)
EstSexRatioAtAge <- NA  # sex ratio at age (from age 0) inputted as vector
EggFertParam <- NA # (NA or from ~0.2-1) NA = no effect, ~0.2 = direct effect of popn. sex ratio changes on egg fertilisation rates, 1 = no effects
mat_A50 <- c(2.5, 2.5) # females, males - Logistic length (mm) at maturity relationship parameters
mat_A95 <- c(3.5, 3.5) # females, males - Logistic length (mm) at maturity relationship parameters
EstMatAtAge <- data.frame(EstFemMatAtAge=NA, EstMalMatAtAge=NA) # maturity at age (from age 0), inputted as values in data frame
Gear_sel_A50 <- NA # females, males - Logistic age selectivity relationship parameters
Gear_sel_A95 <- NA # females, males - Logistic age selectivity relationship parameters
EstGearSelAtAge <- data.frame(FemGearSelAtAge=NA, MalGearSelAtAge=NA) # gear selectivity at age (from age 0), inputted as values in data frame
Land_sel_A50 <- NA # females, males - Logistic age selectivity relationship parameters
Land_sel_A95 <- NA # females, males - Logistic age selectivity relationship parameters
# assuming knife edge selectivity (to simplify)
FemSelLandAtAge <- rep(1,MaxModelAge+1)
FemSelLandAtAge[1:6] = 0
MalSelLandAtAge <- FemSelLandAtAge
EstLandSelAtAge <- data.frame(FemSelLandAtAge=FemSelLandAtAge, MalSelLandAtAge=MalSelLandAtAge) # gear selectivity at age (from age 0), inputted as values in data frame
ret_Pmax <- NA  # maximum retention, values lower than 1 imply discarding of fish above MLL
ret_A50 <- NA  # females, males - Logistic age fish retention at age parameters
ret_A95 <- NA  # females, males - Logistic age fish retention at age parameters
EstRetenAtAge <- data.frame(FemRetProbAtAge=NA, MalRetProbAtAge=NA) # fish retention at age (from age 0), inputted as values in data frame
DiscMort <- 0.0 # discard mortality (e.g. 50% released fish die = 0.5)
Steepness <- 0.75 # steepness parameter of the Beverton and Holt stock-recruitment relationship
SRrel_Type <- 1 # 1 = Beverton-Holt, 2=Ricker
NatMort = 4.22/40 # natural mortality  (year-1)
# get exploitation history - initial in increase F, reduction in F then stable F period
nPeriods <- 3 # number of periods of mortality trends
InitYr <- 1950 # first year of mortality
PeriodEndYr <- c(1995,2000,2020) # periods when mortality changes
# turn off variation in mortality (to simplify for now)
InitYr_FMort <- 0.67*NatMort # initial mortality, at beginning of first period
PeriodEndYr_FMort <- c(0.67*NatMort,0.67*NatMort,0.67*NatMort)
#InitYr_FMort <- 1.5*NatMort # initial mortality, at beginning of first period
#PeriodEndYr_FMort <- c(1.5*NatMort,1.5*NatMort,1.5*NatMort)
autocorr <- 0
randerr_sd <- 0
set.seed(1975) # SimAgeDat2.csv
res=SimExploitationHistory_DynMod(nPeriods, InitYr, PeriodEndYr, InitYr_FMort,
PeriodEndYr_FMort, autocorr, randerr_sd)
par(mfrow=c(1,1))
Years = res$Years
plot(Years, res$rand_FMort, ylim=c(0,0.5))
# Generate random age data
nYears <- res$nYears
FMortByYear <- res$rand_FMort
SimAnnSampSize <- 1000
lnSigmaR <- 0.6
autocorr <- 0
InitRec <- 1000
# Simulate age data from a dynamic age-based population model
res=SimAgeFreqData_DynMod_AB(SimAnnSampSize, nYears, lnSigmaR, autocorr, InitRec, MaxModelAge, TimeStep, Linf, vbK, tzero, EstLenAtAge,
lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type, EstWtAtAge, ReprodScale,
ReprodPattern, InitRatioFem, FinalSex_A50, FinalSex_A95, EstSexRatioAtAge,
EggFertParam, mat_A50, mat_A95, EstMatAtAge, Gear_sel_A50, Gear_sel_A95,
EstGearSelAtAge, Land_sel_A50, Land_sel_A95, EstLandSelAtAge, ret_Pmax,
ret_A50, ret_A95, EstRetenAtAge, DiscMort, Steepness, SRrel_Type, NatMort, FMortByYear)
# Save frequency data to csv file
# (females - retained catch)
# SaveData = TRUE
# if (SaveData) {
#   df = data.frame(matrix(nrow=nAges, ncol=4))
#   df[,2:4] <- t(res$RandObsCatchAgeFreq_CombSex[seq(nYears-2, nYears, 1),])
#   df[,1] <- Ages
#   colnames(df) = c("Ages",Years[nYears-2],Years[nYears-1],Years[nYears])
#   head(df)
#   write.csv(df, "SimAgeDat2.csv", row.names = FALSE)
# }
# *******************************
# variable recruitment catch curve
# *******************************
#
# # objective function
# VarRecCC_ObjFunc <- function(params) {
#
#   # RTMB
#   getAll(dat, params, warn=FALSE)
#   FMort <- exp(lnFMort)
#   RecDevs <- exp(lnRecDevs)
#
#   # selectivity of landings
#   SelAtAge <- rep(1,nAges)
#   SelAtAge[seq(0,AgeAtFullRecruit,1)] <- 0.0001
#   SelAtAge <- AD(SelAtAge)
#
#   # Mortality at age
#   FAtAge <- FMort * SelAtAge
#   ZAtAge <- FAtAge + NatMort
#   FAtAge <- AD(FAtAge); ZAtAge <- AD(ZAtAge)
#
#   # Get number of fish N_a,t of year class y=y-a, of age 0 at the beginning of the first
#   # year of sample collection
#   t1 <- FirstSampYr # first sample year
#   t1_yrcl = t1-Ages
#   RecruitYrs <- seq(t1_yrcl[1] + nSampYrs-1, t1_yrcl[nAges], -1)
#   Recruit = rep(1,length(RecruitYrs))
#   EstRecDevYrs = LastRecDevYr:FirstRecDevYr
#   x=which(RecruitYrs <= LastRecDevYr & RecruitYrs >= FirstRecDevYr)
#   Recruit[x] = RecDevs - (0.5 * SigmaR * SigmaR)
#   Recruit <- AD(Recruit)
#
#   # calculate numbers at age for the first year
#   # age < 0 < A
#   NumAtAge = matrix(nrow=nAges, ncol=nSampYrs)
#   NumAtAge = AD(NumAtAge)
#   RecYrCheck = rep(0,nAges)
#   NumAtAge[1,1] = Recruit[nSampYrs]
#   #RecYrCheck[1] = RecruitYrs[nSampYrs]
#
#   for (a in seq(2,nAges-1,1)) {
#     tempSurv <- rep(0,a)
#     j = a+nSampYrs-1
#     #RecYrCheck[a] = RecruitYrs[j]
#     tempSurv[1] = Recruit[j]
#     for (j in 2:a) {
#       tempSurv[j] = tempSurv[j-1] * exp(-ZAtAge[j-1])
#     } # j
#     NumAtAge[a,1] = tempSurv[j]
#   } # a
#
#   # age = A
#   #RecYrCheck[nAges] = RecruitYrs[nAges+nSampYrs-1]
#   tempSurv[1] <- 1.0  # average recruitment across all years
#   for (a in nAges:nAges) {
#     tempSurv[a] = (tempSurv[a-1] * exp(-ZAtAge[a-1])) / (1 - exp(-ZAtAge[a]))
#     NumAtAge[a,1] = tempSurv[a]
#   }
#
#   # calculate numbers at age for sample year 2
#   # age < 0 < A
#   #RecYrCheck2 = rep(0,nSampYrs-1)
#   for (t in 2:nSampYrs) {
#   tempSurv2 <- rep(0,nAges)
#     for (a in 1:nAges) {
#       if (a==1) {
#         j = nSampYrs-t+1
#         #RecYrCheck2[t-1] = RecruitYrs[j]
#         tempSurv2[a] = Recruit[j]
#       } else if (a < nAges) {
#          tempSurv2[a] = NumAtAge[a-1,t-1] * exp(-ZAtAge[a-1])
#        } else {
#          tempSurv2[a] = (NumAtAge[a-1,t-1] + NumAtAge[a,1]) * exp(-ZAtAge[a])
#        }
#       NumAtAge[a,t] = as.numeric(tempSurv2[a])
#     } # a
#   }
#
#   # calculate expected catches at age (note, for RTMB, don't use as.matrix)
#   CatchAtAge <- matrix(nrow=nAges, ncol=nSampYrs)
#   CatchAtAge <- AD(CatchAtAge)
#   sumCatch = rep(0,nSampYrs)
#   for (t in 1:nSampYrs) {
#     for (a in 1:nAges) {
#         CatchAtAge[a,t] = FAtAge[a] / ZAtAge[a]  * (1 - exp(-ZAtAge[a])) * NumAtAge[a,t]
#         sumCatch[t] = sumCatch[t] + as.numeric(CatchAtAge[a,t])
#     }
#   }
#
#   # calculate expected catch proportions at age
#   ExpCatchPropAtAge <- matrix(nrow=nAges, ncol=nSampYrs)
#   ExpCatchPropAtAge <- AD(ExpCatchPropAtAge)
#   for (t in 1:nSampYrs) {
#     for (a in 1:nAges) {
#       ExpCatchPropAtAge[a,t] = CatchAtAge[a,t] / sumCatch[t]
#     }
#   }
#
#   # calculate multinomial negative log-likelihood
#   NLL1 = 0
#   for (t in 1:nSampYrs) {
#     for (a in 1:nAges) {
#         NLL1 = NLL1 - ObsFreqAtAge[a,t] * log(ExpCatchPropAtAge[a,t]+0.0001)
#     }
#   }
#
#   # variance penalty for recruitment deviations
#   NLL2 = (1 / (2 * pi * SigmaR^2)) * sum(lnRecDevs^2)
#
#   # sum to zero penalty for estimated recruitment deviations
#   sumlnRecDevs = sum(lnRecDevs)
#   NLL3 = -sum(dnorm(sumlnRecDevs, 0, sd=1, log=TRUE))
#
#   NLL = NLL1 + NLL2 + NLL3 # overall objective function
#
#   # need to do some simulation testing to see if rec devs need more
#   # constraints to prevent confounding with F (e.g. sum to zero, slope equals zero)
#
#   # cat("exp(params)",exp(params),'\n')
#   cat("NLL","NLL","NLL1",NLL1,"NLL2",NLL2,"NLL3",NLL3,'\n')
#
#   # RTMB
#   REPORT(FAtAge)
#   REPORT(ZAtAge)
#   REPORT(Recruit)
#   REPORT(FMort)
#   REPORT(FirstSampYr)
#   REPORT(t1_yrcl)
#   REPORT(RecruitYrs)
#   REPORT(EstRecDevYrs)
#   REPORT(RecDevs)
#   REPORT(ExpCatchPropAtAge)
#   REPORT(ObsFreqAtAge)
#
#   ADREPORT(FMort)
#   ADREPORT(RecDevs)
#
#   ## Return
#   return(NLL)
# }
#
#
#
# GetVarRecCatchCurveRes <- function(dat, params) {
#
#   # set up for RTMB
#   obj <- MakeADFun(VarRecCC_ObjFunc, params)
#   # optimising, using nlminb
#   nlmb <- nlminb(obj$par, obj$fn, obj$gr)
#   # get results
#   Res = obj$report()
#   RTMBReport <- list(ExpCatchPropAtAge=Res$ExpCatchPropAtAge,
#                      EstRecDevYrs=Res$EstRecDevYrs,
#                      RecruitYrs=Res$RecruitYrs,
#                      FirstSampYr=Res$FirstSampYr,
#                      t1_yrcl=Res$t1_yrcl,
#                      RecDevs=Res$RecDevs)
#
#   # get estimates from ADreport
#   sdr <- sdreport(obj)
#   param_est = as.list(sdr, "Est", report=TRUE)
#   params_sd = as.list(sdr, "Std", report=TRUE)
#
#   EstFMort = c(param_est$FMort, param_est$FMort - 1.96 * params_sd$FMort,
#                param_est$FMort + 1.96 * params_sd$FMort)
#   EstRecDevs = data.frame(param_est$RecDevs, param_est$RecDevs - 1.96 * params_sd$RecDevs,
#                  param_est$RecDevs + 1.96 * params_sd$RecDevs)
#   colnames(EstRecDevs) = c("Estimate","lw_95%CL","up_95%CL")
#
#   SummaryRes <- list(nlmb$par,
#                      convergence=nlmb$convergence,
#                      NLL=nlmb$objective,
#                      sdr=sdr,
#                      param_est=param_est,
#                      params_sd=params_sd,
#                      EstFMort=EstFMort,
#                      EstRecDevs=EstRecDevs)
#
#   Results = list(SummaryRes=SummaryRes,
#                  RTMBReport=RTMBReport)
#
#   return(Results)
#
# }
# specify input to catch curve model
nSampYrs = 2
ObsFreqAtAge <- t(res$RandObsCatchAgeFreq_CombSex[seq(nYears-nSampYrs+1,nYears,1),])
FirstSampYr = Years[nYears] - nSampYrs + 1
MaxModelAge = 50
Ages = 0:MaxModelAge
nAges = length(Ages)
AgeAtFullRecruit = 6 # knife edge selectivity (for now)
NatMort = 4.22/40
FirstRecDevYr = 1993
LastSampYr = FirstSampYr + nSampYrs - 1
LastRecDevYr = LastSampYr - AgeAtFullRecruit - (nSampYrs - 2) # assuming 2 years to reliably estimate a rec dev
nRecDevs = LastRecDevYr - FirstRecDevYr + 1
SigmaR = 0.6
Ages = 0:MaxModelAge
nAges = length(Ages)
LastSampYr = FirstSampYr + nSampYrs - 1
LastRecDevYr = LastSampYr - AgeAtFullRecruit - (nSampYrs - 2) # assuming 2 years to reliably estimate a rec dev
nRecDevs = LastRecDevYr - FirstRecDevYr + 1
dat <- list(nSampYrs=nSampYrs,
FirstSampYr=FirstSampYr,
ObsFreqAtAge=ObsFreqAtAge,
AgeAtFullRecruit=AgeAtFullRecruit,
MaxModelAge=MaxModelAge,
Ages=Ages,
nAges=nAges,
NatMort=NatMort,
FirstRecDevYr=FirstRecDevYr,
LastRecDevYr=LastRecDevYr,
nRecDevs=nRecDevs,
SigmaR=SigmaR)
params <- list(lnFMort=log(0.1),
lnRecDevs=rep(0,nRecDevs))
# fit model
FittedRes=GetVarRecCatchCurveRes(dat, params)
# set up for RTMB
print("here1")
print("here2")
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
