#                                                            3), ZMort_low = round(ZMort_low, 3), ZMort_up = round(ZMort_up,
#                                                                                                                  3), ZMort_resamp = round(ZMort_resamp, 3), ZMort_lowresamp = round(ZMort_lowresamp,
#                                                                                                                                                                                     3), ZMort_upresamp = round(ZMort_upresamp, 3), EstFreq = EstFreq,
#                  Ages = Ages, EstFreq = EstFreq, EstFreq_Zup = EstFreq_Zup,
#                  EstFreq_Zlow = EstFreq_Zlow, RecAge = RecAge, MaxAgeInSample = MaxAgeInSample,
#                  CRAges = CRAges, n = n, CR_T = CR_T)
#   return(results)
# }
# <bytecode: 0x000001e6d2765228>
#   <environment: namespace:L3Assess>
# More on viewing code within the package...
# Look at the function - GetLogisticCatchCurveResults
GetLogisticCatchCurveResults
# function (ln_params, NatMort, Ages, ObsAgeFreq)
# {
#   nlmb = nlminb(ln_params, Calculate_NLL_LogisticCatchCurve)
#   nlmb$objective
#   nlmb$convergence
#   nlmb$par
#   (hess.out = optimHess(nlmb$par, Calculate_NLL_LogisticCatchCurve))
#   (vcov.Params = solve(hess.out))
#   (ses = sqrt(diag(vcov.Params)))
#   EstFMort = c(exp(nlmb$par[1]), exp(nlmb$par[1] + c(-1.96,
#                                                      1.96) * ses[1]))
#   EstSelA50 = c(exp(nlmb$par[2]), exp(nlmb$par[2] + c(-1.96,
#                                                       1.96) * ses[2]))
#   EstSelA95 = c(exp(nlmb$par[3]), exp(nlmb$par[3] + c(-1.96,
#                                                       1.96) * ses[3]))
#   SelAtAge = rep(0, length(Ages))
#   SelAtAge = 1/(1 + exp(-log(19) * (Ages - EstSelA50[1])/(EstSelA95[1] -
#                                                             EstSelA50[1])))
#   FAtAge = SelAtAge * EstFMort[1]
#   ZAtAge = NatMort + FAtAge
#   ParamEst = t(data.frame(FMort = round(EstFMort, 3), SelA50 = round(EstSelA50,
#                                                                      3), SelA95 = round(EstSelA95, 3)))
#   colnames(ParamEst) = c("Estimate", "lw_95%CL",
#                          "up_95%CL")
#   SampleSize = sum(ObsAgeFreq)
#   nll = nlmb$objective
#   convergence = nlmb$convergence
#   set.seed(123)
#   params = nlmb$par
#   vcov.params = vcov.Params
#   sims = data.frame(MASS::mvrnorm(n = 500, params, vcov.params))
#   EstFreq.sim = data.frame(matrix(nrow = 500, ncol = length(Ages)))
#   colnames(EstFreq.sim) <- Ages
#   SelA50.sim = rep(0, 500)
#   SelA95.sim = rep(0, 500)
#   FMort.sim = rep(0, 500)
#   EstZMort.sim = rep(0, 500)
#   for (j in 1:500) {
#     FMort.sim[j] = exp(sims[j, 1])
#     SelA50.sim[j] = exp(sims[j, 2])
#     SelA95.sim[j] = exp(sims[j, 3])
#     SelAtAge.sim = rep(0, length(Ages))
#     SelAtAge.sim = 1/(1 + exp(-log(19) * (Ages - SelA50.sim[j])/(SelA95.sim[j] -
#                                                                    SelA50.sim[j])))
#     FAtAge.sim = SelAtAge.sim * FMort.sim[j]
#     ZAtAge.sim = NatMort + FAtAge.sim
#     N.sim = numeric(length(Ages))
#     MinAge = min(Ages)
#     MaxAge = max(Ages)
#     N.sim[1] = 1
#     k = 1
#     for (i in seq(MinAge + 1, MaxAge, 1)) {
#       k = k + 1
#       if (i < MaxAge) {
#         N.sim[k] = N.sim[k - 1] * exp(-ZAtAge.sim[k -
#                                                     1])
#       }
#       else {
#         N.sim[k] = N.sim[k - 1] * exp(-ZAtAge.sim[k -
#                                                     1])/(1 - exp(-ZAtAge.sim[k]))
#       }
#     }
#     CatchAtAge.sim = N.sim * (FAtAge.sim/ZAtAge.sim) * (1 -
#                                                           exp(-ZAtAge.sim))
#     ExpPropAtAge.sim = CatchAtAge.sim/sum(CatchAtAge.sim)
#     EstFreq.sim[j, ] = SampleSize * ExpPropAtAge.sim
#     EstZMort.sim[j] = FMort.sim[j] + NatMort
#   }
#   EstFreq = apply(EstFreq.sim, 2, median)
#   EstFreq_Zlow = apply(EstFreq.sim, 2, quantile, probs = 0.025)
#   EstFreq_Zup = apply(EstFreq.sim, 2, quantile, probs = 0.975)
#   results = list(nll = nll, convergence = convergence, SampleSize = SampleSize,
#                  ParamEst = ParamEst, Estlnparams = nlmb$par, vcov.Params = vcov.Params,
#                  lnEstFMort_se = ses[1], lnEstSelA50_se = ses[2], lnEstFSelA95_se = ses[3],
#                  SelAtAge = SelAtAge, FAtAge = FAtAge, EstFreq = EstFreq,
#                  EstFreq_Zlow = EstFreq_Zlow, EstFreq_Zup = EstFreq_Zup,
#                  lnparams.sims = sims, EstFreq.sim = EstFreq.sim, SelA50.sim = SelA50.sim,
#                  SelA95.sim = SelA95.sim, FMort.sim = FMort.sim, EstZMort.sim = EstZMort.sim)
#   return(results)
# }
# <bytecode: 0x000001e6df8656f8>
#   <environment: namespace:L3Assess>
# notice that this function, GetLogisticCatchCurveResults, calls another function, required when
# running the nlminb optimiser to fit the model, called Calculate_NLL_LogisticCatchCurve, i.e.
# for calculated the negative-log likelihood.
# Let's try looking at this function
Calculate_NLL_LogisticCatchCurve
# this returns the error message below.
# Error: object 'Calculate_NLL_LogisticCatchCurve' not found
# Can't see it as I have designated this as an "internal" function (as
# I didn't want too many functions visible in the help file, as I thought this
# might make the package more difficult to use, and by themselves, the internal functions
# don't return much useful information to the user, that isn't returned elsewhere).
# If you wish to view the code in any internal functions in the package, use the 'getAnywhere' function
getAnywhere(Calculate_NLL_LogisticCatchCurve)
# A single object matching 'Calculate_NLL_LogisticCatchCurve' was found
# It was found in the following places
# namespace:L3Assess
# with value
#
# function (ln_params)
# {
#   FMort = exp(ln_params[1])
#   SelA50 = exp(ln_params[2])
#   SelA95 = exp(ln_params[3])
#   SelAtAge = rep(0, length(Ages))
#   SelAtAge = 1/(1 + exp(-log(19) * (Ages - SelA50)/(SelA95 -
#                                                       SelA50)))
#   FAtAge = SelAtAge * FMort
#   ZAtAge = NatMort + FAtAge
#   N = numeric(length(Ages))
#   N[1] = 1
#   k = 1
#   MinAge = min(Ages)
#   MaxAge = max(Ages)
#   for (i in seq(MinAge + 1, MaxAge, 1)) {
#     k = k + 1
#     if (i < MaxAge) {
#       N[k] = N[k - 1] * exp(-ZAtAge[k])
#     }
#     else {
#       N[k] = N[k - 1] * exp(-ZAtAge[k - 1])/(1 - exp(-ZAtAge[k]))
#     }
#   }
#   CatchAtAge = N * (FAtAge/ZAtAge) * (1 - exp(-ZAtAge))
#   ExpPropAtAge = CatchAtAge/sum(CatchAtAge)
#   F_Pen = 0
#   if (FMort > 2) {
#     F_Pen = 1000 * (FMort - 2)^2
#   }
#   NLL = -sum((ObsAgeFreq * log(ExpPropAtAge + 1e-04))) + F_Pen
#   return(NLL)
# }
# <bytecode: 0x000001e6dc93e0b0>
#   <environment: namespace:L3Assess>
# So, all visible!
# not quite. A few of the package functions have been implemented in rCPP (i.e. c++ using R),
# to increase program speed (functions to estimte growth from tag-recapture). Unfortunately, these are not visible
# without access to source code.
# *******************************
# OK, let's run some catch curves
# *******************************
# First, let's run example code for linear catch curve
set.seed(123)
MinAge = 1
MaxAge = 40
Ages = MinAge:MaxAge
NatMort <- exp(1.46 - (1.01 * (log(MaxAge)))) # i.e. Hoenig's (1983) eqn for fish
FMort = 0.1
ZMort = FMort + NatMort
SelA50 = 6
SelA95 = 8
SampleSize = 1000 # required number of fish for age sample
Res=SimAgeFreqData(SampleSize, MinAge, MaxAge, SelA50, SelA95, NatMort, FMort)
ObsAgeFreq = unlist(as.vector(Res$CatchSample))
res=GetLinearCatchCurveResults(RecAssump=0, MinFreq=1, Ages, ObsAgeFreq)
res$ZMort # true ZMort used to generate data is [1] 0.2037503
CatchCurveModel = 2 # Linear
RecAssump = 0 # Linear
MinFreq = 1 # Linear
# now plot
PlotAgeBasedCatchCurveResults_LogSpace(RecAssump, MinFreq, MinAge, MaxAge, NatMort,
ObsAgeFreq, CatchCurveModel, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, ymin=NA, xmax=NA, xint=NA,
ymax=NA, yint=NA, PlotCLs=T)
# could also use the FSA package (fishR)
library(FSA)
SimDat = data.frame(Ages=Ages, ObsAgeFreq=ObsAgeFreq)
plot(Ages, ObsAgeFreq)
linear_cc1 <- catchCurve(ObsAgeFreq~Ages,data=SimDat,ages2use=8:25) # matching ages used in my analysis
summary(linear_cc1) # same point estimate!
confint(linear_cc1) # similar 95% CLs but not the same. Difference relates to slightly different
# error calculation assumptions (normal vs t distribution). Compare confint vs confint.default
# Estimate Std. Error  t value     Pr(>|t|)
# Z  0.2171179 0.01572508 13.80711 2.629666e-10
# A 19.5164928         NA       NA           NA
# > confint(linear_cc1) # not quite the same 95% CLs
# 95% LCI    95% UCI
# Z  0.1837822  0.2504536
# A 16.7883004 22.1552382
# The inputs to the my function are:
# RecAssump=0
# MinFreq=1
# Ages
# ObsAgeFreq
# Let's run example code for Chapman & Robson method
# OK, let's now try the Chapman & Robson model
set.seed(123)
MinAge = 1
MaxAge = 40
NatMort <- exp(1.46 - (1.01 * (log(MaxAge)))) # i.e. Hoenig's (1983) eqn for fish
FMort = 0.1
ZMort = FMort + NatMort
SelA50 = 6
SelA95 = 8
SampleSize = 1000 # required number of fish for age sample
Res=SimAgeFreqData(SampleSize, MinAge, MaxAge, SelA50, SelA95, NatMort, FMort)
ObsAgeFreq = unlist(as.vector(Res$CatchSample))
res=GetChapmanRobsonMortalityResults(RecAssump=0, MinAge, MaxAge, ObsAgeFreq)
res$ZMort # true ZMort used to generate data is [1] 0.2037503
res$ZMort_low
res$ZMort_up
res$RecAge
res$MaxAgeInSample
# ********************************************************************
# could also try the FSA package (Fisheries Stock Assessment)
# http://derekogle.com/fishR/examples/oldFishRVignettes/CatchCurve.pdf
SimDat = data.frame(Ages=Ages, ObsAgeFreq=ObsAgeFreq)
plot(Ages, ObsAgeFreq)
chap_rob_cc1 <- chapmanRobson(ObsAgeFreq~Ages,data=SimDat,ages2use=8:40) # matching ages used in my analysis
summary(chap_rob_cc1) # same point estimate!
confint(chap_rob_cc1) # slightly larger 95% CLs (don't like this - exploration below!).
# Could also try the package 'fishmethods', TropFishR, with similar functions, although I had issues with this,
# and wasn't a fan of needing to use the 'identify' function.
# exploration of FishR Chapman-Robson function
# using data example in fishR document
bkt <- data.frame(age=0:6,ct=c(39,93,112,45,58,12,8))
# my function
res=GetChapmanRobsonMortalityResults(RecAssump=0, MinAge=2, MaxAge=max(bkt$age), bkt$ct[3:7])
# res$n
# res$CR_T
res$ZMort_se
res$ZMort # true ZMort used to generate data is [1] 0.2037503
res$ZMort_low
res$ZMort_up
# this matches example calculation after eqn. 15
# "An approximate 95% condence interval for Z is 0:7018 +/- 1:96(0:0467) or (0.6102,0.7934)"
# now applying function in FishR, as instructed
chap_rob_cc1 <- chapmanRobson(ct~age,data=bkt,ages2use=2:6) # matching ages used in my analysis
summary(chap_rob_cc1) # same point estimate!
# Estimate Std. Error
# S 49.4600432  2.3260749
# Z  0.7018264  0.1153428
confint(chap_rob_cc1) # slightly larger 95% CLs.
# 95% LCI    95% UCI
# S 44.9010202 54.0190662
# Z  0.4757586  0.9278941
# not matching.
# According to documentation, should have got (see section 3.2 - convenience function),
# which would match my result
# Estimates with Standard Errors
# Estimate Std. Err.
# S 49.4600 2.32607
# Z 0.7018 0.04673
# > confint(thcr)
# 95% LCI 95% UCI
# S 44.9010 54.0191
# Z 0.6102 0.7934
# In conclusion, there may be an error in FishR code, for this function.
# ********************************************************************************
# And now for a catch curve with logistic selectivity
set.seed(123)
MinAge = 1
MaxAge = 40
Ages = MinAge:MaxAge
NatMort <- exp(1.46 - (1.01 * (log(MaxAge)))) # i.e. Hoenig's (1983) eqn for fish
FMort = 0.1
ZMort = FMort + NatMort
SelA50 = 6
SelA95 = 8
SampleSize = 1000 # required number of fish for age sample
Res=SimAgeFreqData(SampleSize, MinAge, MaxAge, SelA50, SelA95, NatMort, FMort)
ObsAgeFreq = unlist(as.vector(Res$CatchSample))
Init_FMort = 0.2
Init_SelA50 = 5
Init_SelA95 = 7
ln_params = log(c(FMort, SelA50, SelA95))
res=GetLogisticCatchCurveResults(ln_params, NatMort, Ages, ObsAgeFreq)
res$ParamEst
# **********************************************************************
# Let's fit some age-based catch curves to some real data (whiting data)
# **********************************************************************
rm(list=ls()) # removing memory and re-setting
# library(WAAssessL3)
library(L3Assess)
# set working directory
setwd("C:/Users/ash/OneDrive - Department of Primary Industries and Regional Development/Desktop/Catch curve workshop")
# read in data
dat=read.csv("Whiting_data.csv", header=T)
head(dat)
table(dat$Year)
table(dat$Month)
table(dat$Method)
# check for NAs - age
which(is.na(dat$Age))
# [1] 233 284 297 375
dat = dat[which(!is.na(dat$Age)),] # remove NAs
# check for NAs - fishlen
which(is.na(dat$FishLen))
# integer(0)
table(dat$FishLen)
# Convert decimal ages to ages in years.
dat$age_yr = trunc(dat$Age / 1) * 1
dat[1:50,]
# First, let's take a look at the data!
# what is the range of ages in the dataset?
x=range(dat$age_yr)
MinAge = x[1]
MaxAge = x[2]
# Let's calculate the age frequency distribution, also required iput for the catch curve function (ObsAgeFreq)
# Let's start by keeping it simple, fitting to combined data for sexes, across years.
# Many ways to do this!
# Let's set the ages, as also required input for the catch curve function (Ages)
Ages = MinAge:MaxAge
ObsAgeFreq = rep(0,length(Ages))
ObsFemAgeFreq = rep(0,length(Ages)) # look at females
ObsMalAgeFreq = rep(0,length(Ages)) # look at males
k=0
for (i in MinAge:MaxAge) {
k=k+1 # note, vectors in R start at 1, but the first age here is zero
ObsAgeFreq[k] = length(which(dat$age_yr == i))
ObsFemAgeFreq[k] = length(which(dat$age_yr == i & dat$Sex == "f"))
ObsMalAgeFreq[k] = length(which(dat$age_yr == i & dat$Sex == "m"))
}
ObsAgeFreq # is one of the required inputs for the linear catch curve function!
# [1]   7 256 190  50  43  14  15   8   4   3   1
ObsFemAgeFreq
# [1]   2 133 101  25  34  11  11   6   4   1   1
ObsMalAgeFreq
# [1]   5 123  89  25   9   3   4   2   0   2   0
# plot proportions at age
plot(Ages,ObsAgeFreq/sum(ObsAgeFreq),"o")
lines(Ages, ObsFemAgeFreq/sum(ObsFemAgeFreq), col="red")
lines(Ages, ObsMalAgeFreq/sum(ObsMalAgeFreq), col="blue")
# a few more older females than males in samples - maybe lower female mortality?
# for now, do analyses for sexes combined.
# double check for sexes combined
table(dat$age_yr)
# 0   1   2   3   4   5   6   7   8   9  10
# 7 256 190  50  43  14  15   8   4   3   1
# matching, so OK.
# need to set
# RecAssump
# MinFreq
# Looking at plot of the data, can see the frequency distribution peaks at 2 yrs.
# Looking at help page, under Arguments, can see that RecAssump should be set to
# 0 (peak age) or 1 (peak age + 1). As short-lived species, not that much data,
# probably better to set to peak age.
RecAssump = 0
# Need to set minimum frequency. Can see from description that is must be greater than
# zero. Setting to 1 is typical for linear catch curve analysis.
MinFreq = 1
# fit the catch curve, get results
res=GetLinearCatchCurveResults(RecAssump, MinFreq, Ages, ObsAgeFreq)
# get estimate of total mortality (with 95% CLs)
res$ZMort
# check recruitment age and last age in analysis
res$RecAge
res$LastAgeForLinearCC
# ok
# if we wished, we could use outputs to construct a catch curve plot.
# Alternatively there is a function for this.
# PlotAgeBasedCatchCurveResults(RecAssump, MinFreq, MaxAge, ObsAgeFreq, CatchCurveModel)
# we have the inputs required except for CatchCurveModel. Looking at help page,
# under Arguments, can see that there are 3 possibilities, and we need to specify
# 2, for linear catch curve model
RecAssump
MinFreq
MaxAge
ObsAgeFreq
CatchCurveModel = 2
par(mfrow=c(2,2))
PlotAgeBasedCatchCurveResults_LogSpace(RecAssump, MinFreq, MinAge, MaxAge, NatMort,
ObsAgeFreq, CatchCurveModel, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, ymin=NA, xmax=NA, xint=NA,
ymax=NA, yint=NA, PlotCLs=T)
# Now, get Chapman and Robson mortality estimate
res=GetChapmanRobsonMortalityResults(RecAssump, MinAge, MaxAge, ObsAgeFreq)
res$ZMort
CatchCurveModel = 1 # Chapman Robson
RecAssump = 0 # Chapman Robson
MinFreq = NA # Chapman Robson
PlotAgeBasedCatchCurveResults_LogSpace(RecAssump, MinFreq, MinAge, MaxAge, NatMort,
ObsAgeFreq, CatchCurveModel, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, ymin=NA, xmax=NA, xint=NA,
ymax=NA, yint=NA, PlotCLs=T)
# Now, get estimate from Catch curve with age-based selectivity
CatchCurveModel = 3 # Logistic selectivity
RecAssump = NA # Logistic selectivity
MinFreq = NA # # Logistic selectivity
FMort = 0.5
SelA50 = 1.5
SelA95 = 2.5
NatMort = 0.35 #4.22 / 12 # Max age recorded for species
ln_params = log(c(FMort, SelA50, SelA95))
res=GetLogisticCatchCurveResults(ln_params, NatMort, Ages, ObsAgeFreq)
res$ParamEst
res$EstZMort
PlotAgeBasedCatchCurveResults_LogSpace(RecAssump, MinFreq, MinAge, MaxAge, NatMort,
ObsAgeFreq, CatchCurveModel, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, ymin=NA, xmax=NA, xint=NA,
ymax=NA, yint=NA, PlotCLs=T)
NatMort
# [1] 0.35
# Appears that FMort is around NatMort level (using this analysis, or a bit less, using previous catch curves)
# Z is a bit higher than other 2 methods. Note, these data are quite minimal, with relatively
# few age classes. In this case, perhaps Chapman and Robson may be best method to use.
# Could do some simulations, using this package, to assess if ability of this method to
# estimate all parameters, with such few age classes.
PlotAgeBasedCatchCurveResults_LogSpace(RecAssump, MinFreq, MinAge, MaxAge, NatMort,
ObsAgeFreq, CatchCurveModel, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, ymin=NA, xmax=NA, xint=NA,
ymax=NA, yint=NA, PlotCLs=T)
# Chapman & Robson method, with peak +1 selectivity assumption
CatchCurveModel = 1 # Chapman Robson
RecAssump = 1 # Chapman Robson
MinFreq = NA # Chapman Robson
PlotAgeBasedCatchCurveResults_LogSpace(RecAssump, MinFreq, MinAge, MaxAge, NatMort,
ObsAgeFreq, CatchCurveModel, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, ymin=NA, xmax=NA, xint=NA,
ymax=NA, yint=NA, PlotCLs=T)
# now more similar to method with logistic selectivity curve!
# *********************
# Length-based analyses
# *********************
# Simulate data
SampleSize=5000
set.seed(123)
MaxAge = 30
NatMort = 4.22/MaxAge
FishMort = 0.2
MaxLen = 1500
LenInc = 20
MLL = NA
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
L50 = 600 # selectivity
L95 = 700 # selectivity
SelectivityVec = NA
DiscMort = 0
# single sex, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf = 800
vbK = 0.2
CVSizeAtAge = 0.08
GrowthParams = c(Linf, vbK)
RefnceAges = NA
# # 2 sexes, von Bertalanffy
# GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
# Linf = c(700,850)
# vbK = c(0.3,0.2)
# CVSizeAtAge = c(0.08,0.08)
# GrowthParams = data.frame(Linf=Linf, vbK=vbK)
# RefnceAges = NA
# # 1 sex, Schnute
# GrowthCurveType = 2 # 1 = von Bertalanffy, 2 = Schnute
# t1 = 1 # growth - Schnute
# t2 = 10 # growth - Schnute
# y1 = 400 # growth - Schnute
# y2 = 1000 # growth - Schnute
# a = 0.1 # growth - Schnute
# b = 2.0 # growth - Schnute#' # GrowthParams = c(y1, y2, a, b)
# RefnceAges = c(t1,t2)
# CVSizeAtAge = 0.08
# # 2 sexes, Schnute
# GrowthCurveType = 2 # 1 = von Bertalanffy, 2 = Schnute
# t1 = c(1,1) # growth - Schnute
# t2 = c(10,10) # growth - Schnute
# y1 = c(435.3,400.3) # growth - Schnute
# y2 = c(1089.1,1034.5) # growth - Schnute
# a = c(0.044,0.136) # growth - Schnute
# b = c(2.748,1.971) # growth - Schnute
# CVSizeAtAge = c(0.08, 0.08)
# GrowthParams = data.frame(y1=y1, y2=y2, a=a, b=b)
# RefnceAges = data.frame(t1=t1,t2=t2)
Res=SimLenAndAgeFreqData(SampleSize, MaxAge, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
L50, L95, SelectivityVec, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
ObsCatchFreqAtLen = Res$ObsCatchFreqAtLen
midpt=Res$midpt
lbnd=Res$lbnd
ubnd=Res$ubnd
InitFishMort = 0.25 # specify starting parameters
InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform
InitL50 = 600
InitL95 = 700
params = c(InitFishMort_logit, log(InitL50), log(InitL95))
FittedRes=GetLengthBasedCatchCurveResults(params, GrowthCurveType, GrowthParams, RefnceAges, MLL, SelectivityType, ObsCatchFreqAtLen,
lbnd, ubnd, midpt, SelectivityVec, DiscMort, CVSizeAtAge, MaxAge, NatMort)
# Plot. Note, can skip above step and set FittedRes=NA (plot function will be slower)
par(mfrow=c(1,1))
PlotLengthBasedCatchCurveResults(params, MLL, SelectivityType, ObsCatchFreqAtLen, lbnd, ubnd, midpt,
SelectivityVec, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, MaxAge, NatMort, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, xmax=NA, xint=NA,
ymax=0.2, yint=0.05, PlotCLs=TRUE, FittedRes, nReps=200)
library(L3Assess)
library(L3Assess)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
library(L3Assess)
use_git()
