#   # Get number of fish N_a,t of year class y=y-a, of age 0 at the beginning of the first
#   # year of sample collection
#   t1 <- FirstSampYr # first sample year
#   t1_yrcl = t1-Ages
#   RecruitYrs <- seq(t1_yrcl[1] + nSampYrs-1, t1_yrcl[nAges], -1)
#   Recruit = rep(1,length(RecruitYrs))
#   EstRecDevYrs = LastRecDevYr:FirstRecDevYr
#   x=which(RecruitYrs <= LastRecDevYr & RecruitYrs >= FirstRecDevYr)
#   Recruit[x] = RecDevs - (0.5 * SigmaR * SigmaR)
#   Recruit <- AD(Recruit)
#
#   # calculate numbers at age for the first year
#   # age < 0 < A
#   NumAtAge = matrix(nrow=nAges, ncol=nSampYrs)
#   NumAtAge = AD(NumAtAge)
#   RecYrCheck = rep(0,nAges)
#   NumAtAge[1,1] = Recruit[nSampYrs]
#   #RecYrCheck[1] = RecruitYrs[nSampYrs]
#
#   for (a in seq(2,nAges-1,1)) {
#     tempSurv <- rep(0,a)
#     j = a+nSampYrs-1
#     #RecYrCheck[a] = RecruitYrs[j]
#     tempSurv[1] = Recruit[j]
#     for (j in 2:a) {
#       tempSurv[j] = tempSurv[j-1] * exp(-ZAtAge[j-1])
#     } # j
#     NumAtAge[a,1] = tempSurv[j]
#   } # a
#
#   # age = A
#   #RecYrCheck[nAges] = RecruitYrs[nAges+nSampYrs-1]
#   tempSurv[1] <- 1.0  # average recruitment across all years
#   for (a in nAges:nAges) {
#     tempSurv[a] = (tempSurv[a-1] * exp(-ZAtAge[a-1])) / (1 - exp(-ZAtAge[a]))
#     NumAtAge[a,1] = tempSurv[a]
#   }
#
#   # calculate numbers at age for sample year 2
#   # age < 0 < A
#   #RecYrCheck2 = rep(0,nSampYrs-1)
#   for (t in 2:nSampYrs) {
#   tempSurv2 <- rep(0,nAges)
#     for (a in 1:nAges) {
#       if (a==1) {
#         j = nSampYrs-t+1
#         #RecYrCheck2[t-1] = RecruitYrs[j]
#         tempSurv2[a] = Recruit[j]
#       } else if (a < nAges) {
#          tempSurv2[a] = NumAtAge[a-1,t-1] * exp(-ZAtAge[a-1])
#        } else {
#          tempSurv2[a] = (NumAtAge[a-1,t-1] + NumAtAge[a,1]) * exp(-ZAtAge[a])
#        }
#       NumAtAge[a,t] = as.numeric(tempSurv2[a])
#     } # a
#   }
#
#   # calculate expected catches at age (note, for RTMB, don't use as.matrix)
#   CatchAtAge <- matrix(nrow=nAges, ncol=nSampYrs)
#   CatchAtAge <- AD(CatchAtAge)
#   sumCatch = rep(0,nSampYrs)
#   for (t in 1:nSampYrs) {
#     for (a in 1:nAges) {
#         CatchAtAge[a,t] = FAtAge[a] / ZAtAge[a]  * (1 - exp(-ZAtAge[a])) * NumAtAge[a,t]
#         sumCatch[t] = sumCatch[t] + as.numeric(CatchAtAge[a,t])
#     }
#   }
#
#   # calculate expected catch proportions at age
#   ExpCatchPropAtAge <- matrix(nrow=nAges, ncol=nSampYrs)
#   ExpCatchPropAtAge <- AD(ExpCatchPropAtAge)
#   for (t in 1:nSampYrs) {
#     for (a in 1:nAges) {
#       ExpCatchPropAtAge[a,t] = CatchAtAge[a,t] / sumCatch[t]
#     }
#   }
#
#   # calculate multinomial negative log-likelihood
#   NLL1 = 0
#   for (t in 1:nSampYrs) {
#     for (a in 1:nAges) {
#         NLL1 = NLL1 - ObsFreqAtAge[a,t] * log(ExpCatchPropAtAge[a,t]+0.0001)
#     }
#   }
#
#   # variance penalty for recruitment deviations
#   NLL2 = (1 / (2 * pi * SigmaR^2)) * sum(lnRecDevs^2)
#
#   # sum to zero penalty for estimated recruitment deviations
#   sumlnRecDevs = sum(lnRecDevs)
#   NLL3 = -sum(dnorm(sumlnRecDevs, 0, sd=1, log=TRUE))
#
#   NLL = NLL1 + NLL2 + NLL3 # overall objective function
#
#   # need to do some simulation testing to see if rec devs need more
#   # constraints to prevent confounding with F (e.g. sum to zero, slope equals zero)
#
#   # cat("exp(params)",exp(params),'\n')
#   cat("NLL","NLL","NLL1",NLL1,"NLL2",NLL2,"NLL3",NLL3,'\n')
#
#   # RTMB
#   REPORT(FAtAge)
#   REPORT(ZAtAge)
#   REPORT(Recruit)
#   REPORT(FMort)
#   REPORT(FirstSampYr)
#   REPORT(t1_yrcl)
#   REPORT(RecruitYrs)
#   REPORT(EstRecDevYrs)
#   REPORT(RecDevs)
#   REPORT(ExpCatchPropAtAge)
#   REPORT(ObsFreqAtAge)
#
#   ADREPORT(FMort)
#   ADREPORT(RecDevs)
#
#   ## Return
#   return(NLL)
# }
#
#
#
# GetVarRecCatchCurveRes <- function(dat, params) {
#
#   # set up for RTMB
#   obj <- MakeADFun(VarRecCC_ObjFunc, params)
#   # optimising, using nlminb
#   nlmb <- nlminb(obj$par, obj$fn, obj$gr)
#   # get results
#   Res = obj$report()
#   RTMBReport <- list(ExpCatchPropAtAge=Res$ExpCatchPropAtAge,
#                      EstRecDevYrs=Res$EstRecDevYrs,
#                      RecruitYrs=Res$RecruitYrs,
#                      FirstSampYr=Res$FirstSampYr,
#                      t1_yrcl=Res$t1_yrcl,
#                      RecDevs=Res$RecDevs)
#
#   # get estimates from ADreport
#   sdr <- sdreport(obj)
#   param_est = as.list(sdr, "Est", report=TRUE)
#   params_sd = as.list(sdr, "Std", report=TRUE)
#
#   EstFMort = c(param_est$FMort, param_est$FMort - 1.96 * params_sd$FMort,
#                param_est$FMort + 1.96 * params_sd$FMort)
#   EstRecDevs = data.frame(param_est$RecDevs, param_est$RecDevs - 1.96 * params_sd$RecDevs,
#                  param_est$RecDevs + 1.96 * params_sd$RecDevs)
#   colnames(EstRecDevs) = c("Estimate","lw_95%CL","up_95%CL")
#
#   SummaryRes <- list(nlmb$par,
#                      convergence=nlmb$convergence,
#                      NLL=nlmb$objective,
#                      sdr=sdr,
#                      param_est=param_est,
#                      params_sd=params_sd,
#                      EstFMort=EstFMort,
#                      EstRecDevs=EstRecDevs)
#
#   Results = list(SummaryRes=SummaryRes,
#                  RTMBReport=RTMBReport)
#
#   return(Results)
#
# }
# specify input to catch curve model
nSampYrs = 2
ObsFreqAtAge <- t(res$RandObsCatchAgeFreq_CombSex[seq(nYears-nSampYrs+1,nYears,1),])
FirstSampYr = Years[nYears] - nSampYrs + 1
MaxModelAge = 50
Ages = 0:MaxModelAge
nAges = length(Ages)
AgeAtFullRecruit = 6 # knife edge selectivity (for now)
NatMort = 4.22/40
FirstRecDevYr = 1993
LastSampYr = FirstSampYr + nSampYrs - 1
LastRecDevYr = LastSampYr - AgeAtFullRecruit - (nSampYrs - 2) # assuming 2 years to reliably estimate a rec dev
nRecDevs = LastRecDevYr - FirstRecDevYr + 1
SigmaR = 0.6
Ages = 0:MaxModelAge
nAges = length(Ages)
LastSampYr = FirstSampYr + nSampYrs - 1
LastRecDevYr = LastSampYr - AgeAtFullRecruit - (nSampYrs - 2) # assuming 2 years to reliably estimate a rec dev
nRecDevs = LastRecDevYr - FirstRecDevYr + 1
dat <- list(nSampYrs=nSampYrs,
FirstSampYr=FirstSampYr,
ObsFreqAtAge=ObsFreqAtAge,
AgeAtFullRecruit=AgeAtFullRecruit,
MaxModelAge=MaxModelAge,
Ages=Ages,
nAges=nAges,
NatMort=NatMort,
FirstRecDevYr=FirstRecDevYr,
LastRecDevYr=LastRecDevYr,
nRecDevs=nRecDevs,
SigmaR=SigmaR)
params <- list(lnFMort=log(0.1),
lnRecDevs=rep(0,nRecDevs))
# fit model
FittedRes=GetVarRecCatchCurveRes(dat, params)
# set up for RTMB
print("here1")
print("here2")
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
rm(list=ls())
library(WAFishBiology)
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install package from github
# library(devtools)
# devtools::install_github("SAlexHesp/L3AssessRPackage", build_vignettes=TRUE, force=TRUE)
# devtools::install_github("SAlexHesp/WAFishBiologyRPackage", build_vignettes=TRUE, force=TRUE)
library(L3Assess)
# library("Rcpp")
# sourceCpp("L3Analyses.cpp")
# library(RTMB)
# Simulate data
set.seed(123)
SampleSize=5000
MaxAge = 40
TimeStep = 1 # model timestep (e.g. 1 = annual, 1/12 = monthly)
MinAge = floor(TimeStep)
nAgeCl = length(MinAge:MaxAge)
nTimeSteps = length(seq(TimeStep,MaxAge,TimeStep))
NatMort = 4.22/MaxAge
FishMort = 0.1
MaxLen = 1400
LenInc = 20
MLL=NA # (minimum legal length) # retention set to 1 for all lengths if MLL set to NA and retention parameters not specified is knife-edged at MLL
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logist sel curve, 3=separate logist sel params, common growth
SelectivityAtLen = NA # selectivity vector
SelParams = c(350, 50) # L50, L95-L50 for gear selectivity
RetenParams = c(350, 50) # L50, L95-L50 for retention
DiscMort = 0
# single sex, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy
Linf = 900
vbK = 0.12
CVSizeAtAge = 0.05
RefnceAges = NA
GrowthParams = c(Linf, vbK, CVSizeAtAge)
Res=SimLenAndAgeFreqData_EqMod(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
SelParams, RetenParams, SelectivityAtLen, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
# 2 sexes, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy
Linf = c(900,900)
vbK = c(0.12,0.12)
CVSizeAtAge = c(0.05,0.05)
RefnceAges = NA
GrowthParams = data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge)
Res2=SimLenAndAgeFreqData_EqMod(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
SelParams, RetenParams, SelectivityAtLen, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
lbnd=Res$lbnd
midpt=Res$midpt
ubnd=Res$ubnd
par(mfrow=c(3,2))
# selectivity
plot(midpt, Res$ModelDiag$SelAtLength)
lines(midpt, Res2$ModelDiag$SelAtLength, col="blue")
# growth
plot(1:MaxAge, Res$ModelDiag$MeanSizeAtAge)
lines(1:MaxAge, Res2$ModelDiag$MeanSizeAtAge[1,], col="red")
lines(1:MaxAge, Res2$ModelDiag$MeanSizeAtAge[2,], col="blue")
# length comparison
ObsRetCatchFreqAtLen = as.vector(Res$ObsRetCatchFreqAtLen) # 1 sex
ObsRetCatchFreqAtLen2 = as.matrix(Res2$ObsRetCatchFreqAtLen) # 1 sex
plot(midpt, ObsRetCatchFreqAtLen/sum(ObsRetCatchFreqAtLen), "l")
lines(midpt, ObsRetCatchFreqAtLen2/sum(ObsRetCatchFreqAtLen2), col="blue")
# rec len distns
plot(midpt, Res$ModelDiag$RecLenDist, "l")
lines(midpt, Res$ModelDiag$RecLenDist, col="blue")
# age comparison
ObsRetCatchFreqAtLengthAndAge = as.matrix(Res$ObsRetCatchFreqAtLengthAndDecAge) # 1 sex
ObsRetCatchFreqAtLengthAndAge2 = as.matrix(Res2$ObsRetCatchFreqAtLengthAndDecAge) # 1 sex
plot(1:MaxAge, rowSums(ObsRetCatchFreqAtLengthAndAge)/sum(rowSums(ObsRetCatchFreqAtLengthAndAge)), "l")
lines(1:MaxAge, rowSums(ObsRetCatchFreqAtLengthAndAge2)/sum(rowSums(ObsRetCatchFreqAtLengthAndAge2)), col="blue")
plot(1:MaxAge, Res$ModelDiag$ObsRetCatchFreqAtIntAge, "l")
lines(1:MaxAge, Res2$ModelDiag$ObsRetCatchFreqAtIntAge, col="blue")
# age-length comparison
plot(Res$ObsDecAgeRetCatch, Res$ObsRandLenRetCatch, "p", xlim=c(0,40))
lines(Res2$ObsDecAgeRetCatch, Res2$ObsRandLenRetCatch, "p", col="blue")
lines(Res$ObsDecAgeRetCatch, Res$ObsRandLenRetCatch, "p")
# exp prop at len
plot(midpt, Res$ModelDiag$ExpRetCatchPropAtLen_Fem)
lines(midpt, Res$ModelDiag$ExpRetCatchPropAtLen_Fem, col="blue")
# exp prop at age
plot(1:MaxAge, Res$ModelDiag$ExpRetCatchPropAtDecAge, 'l')
lines(1:MaxAge, Res2$ModelDiag$ExpRetCatchPropAtDecAge, col="blue")
RetCatchAtDecAgeLen = as.matrix(Res$RetCatchAtDecAgeLen) # 1 sex
RetCatchAtDecAgeLen2 = as.matrix(Res2$RetCatchAtDecAgeLen) # 1 sex
Res$RetCatchAtDecAgeLen
RetCatchAtDecAgeLen = as.matrix(Res$ModelDiag$RetCatchAtDecAgeLen) # 1 sex
RetCatchAtDecAgeLen
RetCatchAtDecAgeLen2 = as.matrix(Res2ModelDiag$$RetCatchAtDecAgeLen) # 1 sex
RetCatchAtDecAgeLen2 = as.matrix(Res2$ModelDiag$RetCatchAtDecAgeLen) # 1 sex
plot(1:MaxAge, rowSums(RetCatchAtDecAgeLen)/sum(rowSums(RetCatchAtDecAgeLen)), "l")
lines(1:MaxAge, rowSums(RetCatchAtDecAgeLen2)/sum(rowSums(RetCatchAtDecAgeLen2)), col="blue")
Res2$ModelDiag$RetAtLength
Res$ModelDiag$RetAtLength
Res2$ModelDiag$RetAtLength
Res$ModelDiag$RecLenDist_Fem
Res$RecLenDist_Fem
Res$ModelDiag$InitRecNumber
Res2$ModelDiag$InitRecNumber
Res$ModelDiag$SelAtLength
Res2$ModelDiag$SelAtLength
TimeStep
nTimeSteps
Res$ModelDiag$nTimeSteps
Res2$ModelDiag$nTimeSteps
Res$ModelDiag$FAtLenReten
Res2$ModelDiag$FAtLenReten
Res$ModelDiag$Fish_NPerRecAtDecAgeLen_Fem
Res2$ModelDiag$Fish_NPerRecAtDecAgeLen_Fem
rowSums(Res$ModelDiag$Fish_NPerRecAtDecAgeLen_Fem)
plot(1:MaxAge, rowSums(Res$ModelDiag$Fish_NPerRecAtDecAgeLen_Fem))
lines(1:MaxAge, rowSums(Res2$ModelDiag$Fish_NPerRecAtDecAgeLen_Fem),col="blue")
plot(1:MaxAge, rowSums(Res$ModelDiag$Fish_NPerRecAtDecAgeLen_Fem), ylim=c(0,1))
lines(1:MaxAge, rowSums(Res2$ModelDiag$Fish_NPerRecAtDecAgeLen_Fem),col="blue")
plot(1:MaxAge, rowSums(Res$ModelDiag$Fish_NPerRecAtDecAgeLen_Fem), ylim=c(0,1))
lines(1:MaxAge, rowSums(Res2$ModelDiag$Fish_NPerRecAtDecAgeLen_Fem),col="blue")
rm(list=ls())
library(WAFishBiology)
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install package from github
# library(devtools)
# devtools::install_github("SAlexHesp/L3AssessRPackage", build_vignettes=TRUE, force=TRUE)
# devtools::install_github("SAlexHesp/WAFishBiologyRPackage", build_vignettes=TRUE, force=TRUE)
library(L3Assess)
# library("Rcpp")
# sourceCpp("L3Analyses.cpp")
# library(RTMB)
# Simulate data
set.seed(123)
SampleSize=5000
MaxAge = 40
TimeStep = 1 # model timestep (e.g. 1 = annual, 1/12 = monthly)
MinAge = floor(TimeStep)
nAgeCl = length(MinAge:MaxAge)
nTimeSteps = length(seq(TimeStep,MaxAge,TimeStep))
NatMort = 4.22/MaxAge
FishMort = 0.1
MaxLen = 1400
LenInc = 20
MLL=NA # (minimum legal length) # retention set to 1 for all lengths if MLL set to NA and retention parameters not specified is knife-edged at MLL
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logist sel curve, 3=separate logist sel params, common growth
SelectivityAtLen = NA # selectivity vector
SelParams = c(350, 50) # L50, L95-L50 for gear selectivity
RetenParams = c(350, 50) # L50, L95-L50 for retention
DiscMort = 0
# single sex, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy
Linf = 900
vbK = 0.12
CVSizeAtAge = 0.05
RefnceAges = NA
GrowthParams = c(Linf, vbK, CVSizeAtAge)
Res=SimLenAndAgeFreqData_EqMod(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
SelParams, RetenParams, SelectivityAtLen, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
# 2 sexes, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy
Linf = c(900,900)
vbK = c(0.12,0.12)
CVSizeAtAge = c(0.05,0.05)
RefnceAges = NA
GrowthParams = data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge)
Res2=SimLenAndAgeFreqData_EqMod(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
SelParams, RetenParams, SelectivityAtLen, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
lbnd=Res$lbnd
midpt=Res$midpt
ubnd=Res$ubnd
par(mfrow=c(3,2))
# selectivity
plot(midpt, Res$ModelDiag$SelAtLength)
lines(midpt, Res2$ModelDiag$SelAtLength, col="blue")
# growth
plot(1:MaxAge, Res$ModelDiag$MeanSizeAtAge)
lines(1:MaxAge, Res2$ModelDiag$MeanSizeAtAge[1,], col="red")
lines(1:MaxAge, Res2$ModelDiag$MeanSizeAtAge[2,], col="blue")
# length comparison
ObsRetCatchFreqAtLen = as.vector(Res$ObsRetCatchFreqAtLen) # 1 sex
ObsRetCatchFreqAtLen2 = as.matrix(Res2$ObsRetCatchFreqAtLen) # 1 sex
plot(midpt, ObsRetCatchFreqAtLen/sum(ObsRetCatchFreqAtLen), "l")
lines(midpt, ObsRetCatchFreqAtLen2/sum(ObsRetCatchFreqAtLen2), col="blue")
# rec len distns
plot(midpt, Res$ModelDiag$RecLenDist, "l")
lines(midpt, Res$ModelDiag$RecLenDist, col="blue")
# age comparison
ObsRetCatchFreqAtLengthAndAge = as.matrix(Res$ObsRetCatchFreqAtLengthAndDecAge) # 1 sex
ObsRetCatchFreqAtLengthAndAge2 = as.matrix(Res2$ObsRetCatchFreqAtLengthAndDecAge) # 1 sex
plot(1:MaxAge, rowSums(ObsRetCatchFreqAtLengthAndAge)/sum(rowSums(ObsRetCatchFreqAtLengthAndAge)), "l")
lines(1:MaxAge, rowSums(ObsRetCatchFreqAtLengthAndAge2)/sum(rowSums(ObsRetCatchFreqAtLengthAndAge2)), col="blue")
plot(1:MaxAge, Res$ModelDiag$ObsRetCatchFreqAtIntAge, "l")
lines(1:MaxAge, Res2$ModelDiag$ObsRetCatchFreqAtIntAge, col="blue")
# age-length comparison
plot(Res$ObsDecAgeRetCatch, Res$ObsRandLenRetCatch, "p", xlim=c(0,40))
lines(Res2$ObsDecAgeRetCatch, Res2$ObsRandLenRetCatch, "p", col="blue")
lines(Res$ObsDecAgeRetCatch, Res$ObsRandLenRetCatch, "p")
# exp prop at len
plot(midpt, Res$ModelDiag$ExpRetCatchPropAtLen_Fem)
lines(midpt, Res$ModelDiag$ExpRetCatchPropAtLen_Fem, col="blue")
# exp prop at age
plot(1:MaxAge, Res$ModelDiag$ExpRetCatchPropAtDecAge, 'l')
lines(1:MaxAge, Res2$ModelDiag$ExpRetCatchPropAtDecAge, col="blue")
RetCatchAtDecAgeLen = as.matrix(Res$ModelDiag$RetCatchAtDecAgeLen) # 1 sex
RetCatchAtDecAgeLen2 = as.matrix(Res2$ModelDiag$RetCatchAtDecAgeLen) # 1 sex
plot(1:MaxAge, rowSums(RetCatchAtDecAgeLen)/sum(rowSums(RetCatchAtDecAgeLen)), "l")
lines(1:MaxAge, rowSums(RetCatchAtDecAgeLen2)/sum(rowSums(RetCatchAtDecAgeLen2)), col="blue")
Res$ModelDiag$RetAtLength
Res2$ModelDiag$RetAtLength
Res$ModelDiag$SelAtLength
Res2$ModelDiag$SelAtLength
Res$ModelDiag$InitRecNumber
Res2$ModelDiag$InitRecNumber
Res$ModelDiag$InitRecNumber
rm(list=ls())
library(WAFishBiology)
# install.packages("C:/~/L3Assess_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install.packages("C:/~/WAFishBiology_0.1.0.tar.gz", source = TRUE, repos=NULL)
# install package from github
# library(devtools)
# devtools::install_github("SAlexHesp/L3AssessRPackage", build_vignettes=TRUE, force=TRUE)
# devtools::install_github("SAlexHesp/WAFishBiologyRPackage", build_vignettes=TRUE, force=TRUE)
library(L3Assess)
# library("Rcpp")
# sourceCpp("L3Analyses.cpp")
# library(RTMB)
# Simulate data
set.seed(123)
SampleSize=5000
MaxAge = 40
TimeStep = 1 # model timestep (e.g. 1 = annual, 1/12 = monthly)
MinAge = floor(TimeStep)
nAgeCl = length(MinAge:MaxAge)
nTimeSteps = length(seq(TimeStep,MaxAge,TimeStep))
NatMort = 4.22/MaxAge
FishMort = 0.1
MaxLen = 1400
LenInc = 20
MLL=NA # (minimum legal length) # retention set to 1 for all lengths if MLL set to NA and retention parameters not specified is knife-edged at MLL
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logist sel curve, 3=separate logist sel params, common growth
SelectivityAtLen = NA # selectivity vector
SelParams = c(350, 50) # L50, L95-L50 for gear selectivity
RetenParams = c(350, 50) # L50, L95-L50 for retention
DiscMort = 0
# single sex, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy
Linf = 900
vbK = 0.12
CVSizeAtAge = 0.05
RefnceAges = NA
GrowthParams = c(Linf, vbK, CVSizeAtAge)
Res=SimLenAndAgeFreqData_EqMod(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
SelParams, RetenParams, SelectivityAtLen, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
# 2 sexes, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy
Linf = c(900,900)
vbK = c(0.12,0.12)
CVSizeAtAge = c(0.05,0.05)
RefnceAges = NA
GrowthParams = data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge)
Res2=SimLenAndAgeFreqData_EqMod(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
SelParams, RetenParams, SelectivityAtLen, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
lbnd=Res$lbnd
midpt=Res$midpt
ubnd=Res$ubnd
par(mfrow=c(3,2))
# selectivity
plot(midpt, Res$ModelDiag$SelAtLength)
lines(midpt, Res2$ModelDiag$SelAtLength, col="blue")
# growth
plot(1:MaxAge, Res$ModelDiag$MeanSizeAtAge)
lines(1:MaxAge, Res2$ModelDiag$MeanSizeAtAge[1,], col="red")
lines(1:MaxAge, Res2$ModelDiag$MeanSizeAtAge[2,], col="blue")
# length comparison
ObsRetCatchFreqAtLen = as.vector(Res$ObsRetCatchFreqAtLen) # 1 sex
ObsRetCatchFreqAtLen2 = as.matrix(Res2$ObsRetCatchFreqAtLen) # 1 sex
plot(midpt, ObsRetCatchFreqAtLen/sum(ObsRetCatchFreqAtLen), "l")
lines(midpt, ObsRetCatchFreqAtLen2/sum(ObsRetCatchFreqAtLen2), col="blue")
# rec len distns
plot(midpt, Res$ModelDiag$RecLenDist, "l")
lines(midpt, Res$ModelDiag$RecLenDist, col="blue")
# age comparison
ObsRetCatchFreqAtLengthAndAge = as.matrix(Res$ObsRetCatchFreqAtLengthAndDecAge) # 1 sex
ObsRetCatchFreqAtLengthAndAge2 = as.matrix(Res2$ObsRetCatchFreqAtLengthAndDecAge) # 1 sex
plot(1:MaxAge, rowSums(ObsRetCatchFreqAtLengthAndAge)/sum(rowSums(ObsRetCatchFreqAtLengthAndAge)), "l")
lines(1:MaxAge, rowSums(ObsRetCatchFreqAtLengthAndAge2)/sum(rowSums(ObsRetCatchFreqAtLengthAndAge2)), col="blue")
plot(1:MaxAge, Res$ModelDiag$ObsRetCatchFreqAtIntAge, "l")
lines(1:MaxAge, Res2$ModelDiag$ObsRetCatchFreqAtIntAge, col="blue")
# age-length comparison
plot(Res$ObsDecAgeRetCatch, Res$ObsRandLenRetCatch, "p", xlim=c(0,40))
lines(Res2$ObsDecAgeRetCatch, Res2$ObsRandLenRetCatch, "p", col="blue")
lines(Res$ObsDecAgeRetCatch, Res$ObsRandLenRetCatch, "p")
# exp prop at len
plot(midpt, Res$ModelDiag$ExpRetCatchPropAtLen_Fem)
lines(midpt, Res$ModelDiag$ExpRetCatchPropAtLen_Fem, col="blue")
# exp prop at age
plot(1:MaxAge, Res$ModelDiag$ExpRetCatchPropAtDecAge, 'l')
lines(1:MaxAge, Res2$ModelDiag$ExpRetCatchPropAtDecAge, col="blue")
RetCatchAtDecAgeLen = as.matrix(Res$ModelDiag$RetCatchAtDecAgeLen) # 1 sex
RetCatchAtDecAgeLen2 = as.matrix(Res2$ModelDiag$RetCatchAtDecAgeLen) # 1 sex
plot(1:MaxAge, rowSums(RetCatchAtDecAgeLen)/sum(rowSums(RetCatchAtDecAgeLen)), "l")
lines(1:MaxAge, rowSums(RetCatchAtDecAgeLen2)/sum(rowSums(RetCatchAtDecAgeLen2)), col="blue")
Res$ModelDiag$RetAtLength
Res2$ModelDiag$RetAtLength
Res$ModelDiag$SelAtLength
Res2$ModelDiag$SelAtLength
Res$ModelDiag$InitRecNumber
Res2$ModelDiag$InitRecNumber
Res$ModelDiag$nTimeSteps
Res2$ModelDiag$nTimeSteps
